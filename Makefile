# ================================================================================================
# üéØ CU Clubs Bot - Development Makefile
# ================================================================================================

# –¶–≤–µ—Ç–∞ –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞
RESET := $(shell tput sgr0 2>/dev/null || echo "")
RED := $(shell tput setaf 1 2>/dev/null || echo "")
GREEN := $(shell tput setaf 2 2>/dev/null || echo "")
YELLOW := $(shell tput setaf 3 2>/dev/null || echo "")
BLUE := $(shell tput setaf 4 2>/dev/null || echo "")
MAGENTA := $(shell tput setaf 5 2>/dev/null || echo "")
CYAN := $(shell tput setaf 6 2>/dev/null || echo "")
WHITE := $(shell tput setaf 7 2>/dev/null || echo "")
BOLD := $(shell tput bold 2>/dev/null || echo "")

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
DOCKER_COMPOSE_DEV := docker-compose-dev.yml
DOCKER_COMPOSE_PROD := docker-compose.yml
BOT_CONTAINER := bot
DB_CONTAINER := database
REDIS_CONTAINER := redis

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ø—Ä–æ–¥–æ–≤–æ–≥–æ –¥–µ–ø–ª–æ—è
PROD_OWNER ?= badsnus
PROD_REPO  ?= cu-clubs-bot
PROD_REF   ?= main2
PROD_PATH  ?= docker-compose.yml
PROD_COMPOSE_FILE ?= docker-compose.yml
PROD_COMPOSE_URL ?= https://raw.githubusercontent.com/$(PROD_OWNER)/$(PROD_REPO)/$(PROD_REF)/$(PROD_PATH)

# –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ–∫–∞–∑—ã–≤–∞–µ–º help
.DEFAULT_GOAL := help

# ================================================================================================
# üìã –°–ü–†–ê–í–ö–ê –ò –ò–ù–§–û–†–ú–ê–¶–ò–Ø
# ================================================================================================

.PHONY: help version

help: ## üìã –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É (—ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ)
	@printf "$(GREEN)$(BOLD)üéØ CU Clubs Bot - Makefile$(RESET)\n"
	@printf "$(CYAN)–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:$(RESET)\n"
	@grep -E '^[a-zA-Z0-9_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | \
		awk 'BEGIN {FS = ":.*?## "}; {printf "  $(YELLOW)%-20s$(RESET) %s\n", $$1, $$2}'

version: ## ‚ÑπÔ∏è –ü–æ–∫–∞–∑–∞—Ç—å –≤–µ—Ä—Å–∏—é –ø—Ä–æ–µ–∫—Ç–∞
	@printf "$(GREEN)$(BOLD)‚ÑπÔ∏è –í–µ—Ä—Å–∏—è –ø—Ä–æ–µ–∫—Ç–∞:$(RESET)\n"
	@printf "$(BLUE)–í–µ—Ç–∫–∞:$(RESET) $(shell git rev-parse --abbrev-ref HEAD 2>/dev/null || echo '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')\n"
	@printf "$(BLUE)Commit:$(RESET) $(shell git rev-parse --short HEAD 2>/dev/null || echo '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')\n"
	@printf "$(BLUE)–î–∞—Ç–∞:$(RESET) $(shell git log -1 --format=%cd --date=format:"%Y-%m-%d %H:%M:%S" 2>/dev/null || echo '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')\n"

# ================================================================================================
# üîÑ –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´ –†–ê–ó–†–ê–ë–û–¢–ö–ò
# ================================================================================================

.PHONY: dev build start stop restart status logs shell

# –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
dev: build up ## üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–µ–∫—Ç –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ (—Å–∏–Ω–æ–Ω–∏–º –¥–ª—è build + up)

build: ## üî® –°–æ–±—Ä–∞—Ç—å –æ–±—Ä–∞–∑
	@printf "$(BLUE)$(BOLD)üî® –°–æ–±–∏—Ä–∞—é –æ–±—Ä–∞–∑...$(RESET)\n"
	@docker compose -f $(DOCKER_COMPOSE_DEV) build

up: ## ‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –≤ foreground —Ä–µ–∂–∏–º–µ
	@printf "$(GREEN)$(BOLD)‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫–∞—é –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã...$(RESET)\n"
	@docker compose -f $(DOCKER_COMPOSE_DEV) up

start: ## ‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –≤ background —Ä–µ–∂–∏–º–µ
	@printf "$(GREEN)$(BOLD)‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫–∞—é –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ...$(RESET)\n"
	@docker compose -f $(DOCKER_COMPOSE_DEV) up -d

stop: ## ‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
	@printf "$(RED)$(BOLD)‚èπÔ∏è –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã...$(RESET)\n"
	@docker compose -f $(DOCKER_COMPOSE_DEV) down

restart: ## üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
	@printf "$(YELLOW)$(BOLD)üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—é –≤—Å–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã...$(RESET)\n"
	@docker compose -f $(DOCKER_COMPOSE_DEV) down
	@docker compose -f $(DOCKER_COMPOSE_DEV) up -d

restart-bot: ## üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ –±–æ—Ç
	@printf "$(YELLOW)$(BOLD)üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—é —Ç–æ–ª—å–∫–æ –±–æ—Ç...$(RESET)\n"
	@docker compose -f $(DOCKER_COMPOSE_DEV) restart $(BOT_CONTAINER)

status: ## ‚ÑπÔ∏è –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
	@printf "$(CYAN)$(BOLD)‚ÑπÔ∏è –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:$(RESET)\n"
	@docker compose -f $(DOCKER_COMPOSE_DEV) ps

logs: ## üìÉ –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ –≤—Å–µ—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
	@printf "$(CYAN)$(BOLD)üìÉ –õ–æ–≥–∏:$(RESET)\n"
	@docker compose -f $(DOCKER_COMPOSE_DEV) logs -f

# ================================================================================================
# üñ•Ô∏è –†–ê–ë–û–¢–ê –° –ö–û–ù–¢–ï–ô–ù–ï–†–ê–ú–ò
# ================================================================================================

.PHONY: logs-bot logs-db logs-redis shell-bot shell-db shell-redis rebuild clean clean-all

logs-bot: ## üìÉ –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ –±–æ—Ç–∞
	@printf "$(CYAN)$(BOLD)üìÉ –õ–æ–≥–∏ –±–æ—Ç–∞:$(RESET)\n"
	@docker compose -f $(DOCKER_COMPOSE_DEV) logs -f $(BOT_CONTAINER)

logs-db: ## üìÉ –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
	@printf "$(CYAN)$(BOLD)üìÉ –õ–æ–≥–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:$(RESET)\n"
	@docker compose -f $(DOCKER_COMPOSE_DEV) logs -f $(DB_CONTAINER)

logs-redis: ## üìÉ –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ Redis
	@printf "$(CYAN)$(BOLD)üìÉ –õ–æ–≥–∏ Redis:$(RESET)\n"
	@docker compose -f $(DOCKER_COMPOSE_DEV) logs -f $(REDIS_CONTAINER)

shell-bot: ## üíª –ó–∞–ø—É—Å—Ç–∏—Ç—å –æ–±–æ–ª–æ—á–∫—É –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ –±–æ—Ç–∞
	@printf "$(BLUE)$(BOLD)üíª –ó–∞–ø—É—Å–∫–∞—é –æ–±–æ–ª–æ—á–∫—É –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ –±–æ—Ç–∞...$(RESET)\n"
	@docker compose -f $(DOCKER_COMPOSE_DEV) exec $(BOT_CONTAINER) /bin/sh

shell-db: ## üíª –ó–∞–ø—É—Å—Ç–∏—Ç—å –æ–±–æ–ª–æ—á–∫—É –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
	@printf "$(BLUE)$(BOLD)üíª –ó–∞–ø—É—Å–∫–∞—é –æ–±–æ–ª–æ—á–∫—É –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...$(RESET)\n"
	@docker compose -f $(DOCKER_COMPOSE_DEV) exec $(DB_CONTAINER) /bin/sh

shell-redis: ## üíª –ó–∞–ø—É—Å—Ç–∏—Ç—å –æ–±–æ–ª–æ—á–∫—É –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ Redis
	@printf "$(BLUE)$(BOLD)üíª –ó–∞–ø—É—Å–∫–∞—é –æ–±–æ–ª–æ—á–∫—É –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ Redis...$(RESET)\n"
	@docker compose -f $(DOCKER_COMPOSE_DEV) exec $(REDIS_CONTAINER) redis-cli -a "$${REDIS_PASSWORD}"

rebuild: ## üî® –ü–µ—Ä–µ—Å–æ–±—Ä–∞—Ç—å –ø—Ä–æ–µ–∫—Ç —Å –Ω—É–ª—è
	@printf "$(BLUE)$(BOLD)üî® –ü–µ—Ä–µ—Å–æ–±–∏—Ä–∞—é –ø—Ä–æ–µ–∫—Ç...$(RESET)\n"
	@docker compose -f $(DOCKER_COMPOSE_DEV) down
	@docker compose -f $(DOCKER_COMPOSE_DEV) build --no-cache

clean: ## üßπ –û—á–∏—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
	@printf "$(RED)$(BOLD)üßπ –û—á–∏—â–∞—é –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã...$(RESET)\n"
	@docker compose -f $(DOCKER_COMPOSE_DEV) down -v

clean-all: ## üßπ –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –∏ –æ–±—Ä–∞–∑—ã
	@printf "$(RED)$(BOLD)‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å —É–¥–∞–ª–∏—Ç—å –í–°–ï –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã, –æ–±—Ä–∞–∑—ã –∏ —Ç–æ–º–∞ Docker!$(RESET)\n"
	@printf "$(YELLOW)–≠—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏—è –Ω–µ–æ–±—Ä–∞—Ç–∏–º–∞ –∏ –ø—Ä–∏–≤–µ–¥–µ—Ç –∫ –ø–æ—Ç–µ—Ä–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞—Ö.$(RESET)\n"
	@read -p "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/N): " confirm && [ "$$confirm" = "y" ] || { printf "$(GREEN)–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.$(RESET)\n"; exit 1; }
	@printf "$(RED)$(BOLD)üßπ –û—á–∏—â–∞—é –≤—Å–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –∏ –æ–±—Ä–∞–∑—ã...$(RESET)\n"
	@docker compose -f $(DOCKER_COMPOSE_DEV) down -v
	@docker system prune -af --volumes

# ================================================================================================
# üß™ GO –†–ê–ó–†–ê–ë–û–¢–ö–ê
# ================================================================================================

.PHONY: go-test go-test-coverage go-lint go-lint-fix go-fmt go-vet go-mod go-deps go-build go-run go-check

go-test: ## üß™ –ó–∞–ø—É—Å—Ç–∏—Ç—å Go —Ç–µ—Å—Ç—ã
	@printf "$(BLUE)$(BOLD)üß™ –ó–∞–ø—É—Å–∫–∞—é —Ç–µ—Å—Ç—ã...$(RESET)\n"
	@cd bot && go test ./... -v

go-test-coverage: ## üìä –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã –∏ –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–∫—Ä—ã—Ç–∏–µ
	@printf "$(BLUE)$(BOLD)üìä –ó–∞–ø—É—Å–∫–∞—é —Ç–µ—Å—Ç—ã —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º...$(RESET)\n"
	@cd bot && go test ./... -coverprofile=coverage.out
	@cd bot && go tool cover -func=coverage.out
	@cd bot && go tool cover -html=coverage.out -o coverage.html
	@printf "$(GREEN)‚úÖ –û—Ç—á–µ—Ç –æ –ø–æ–∫—Ä—ã—Ç–∏–∏ —Å–æ–∑–¥–∞–Ω: bot/coverage.html$(RESET)\n"

go-lint: ## üîç –ó–∞–ø—É—Å—Ç–∏—Ç—å –ª–∏–Ω—Ç–µ—Ä (golangci-lint)
	@printf "$(BLUE)$(BOLD)üîç –ó–∞–ø—É—Å–∫–∞—é –ª–∏–Ω—Ç–µ—Ä...$(RESET)\n"
	@cd bot && golangci-lint run --timeout=5m

go-lint-fix: ## üîß –ó–∞–ø—É—Å—Ç–∏—Ç—å –ª–∏–Ω—Ç–µ—Ä —Å –∞–≤—Ç–æ—Ñ–∏–∫—Å–æ–º –ø—Ä–æ–±–ª–µ–º
	@printf "$(BLUE)$(BOLD)üîß –ó–∞–ø—É—Å–∫–∞—é –ª–∏–Ω—Ç–µ—Ä —Å –∞–≤—Ç–æ—Ñ–∏–∫—Å–æ–º...$(RESET)\n"
	@cd bot && golangci-lint run --timeout=5m --fix

go-fmt: ## üé® –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å Go –∫–æ–¥
	@printf "$(BLUE)$(BOLD)üé® –§–æ—Ä–º–∞—Ç–∏—Ä—É—é –∫–æ–¥...$(RESET)\n"
	@test -f "$$(go env GOPATH)/bin/goimports" || { printf "$(RED)‚ùå goimports –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: make install-tools$(RESET)\n"; exit 1; }
	@test -f "$$(go env GOPATH)/bin/gofumpt" || { printf "$(RED)‚ùå gofumpt –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: make install-tools$(RESET)\n"; exit 1; }
	@cd bot && $$(go env GOPATH)/bin/gofumpt -l -w .
	@cd bot && $$(go env GOPATH)/bin/goimports -w -local github.com/Badsnus/cu-clubs-bot .
	@printf "$(GREEN)‚úÖ –ö–æ–¥ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω$(RESET)\n"

go-vet: ## üîç –ó–∞–ø—É—Å—Ç–∏—Ç—å go vet
	@printf "$(BLUE)$(BOLD)üîç –ó–∞–ø—É—Å–∫–∞—é go vet...$(RESET)\n"
	@cd bot && go vet ./...

go-mod: ## üì¶ –û–±–Ω–æ–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ Go
	@printf "$(BLUE)$(BOLD)üì¶ –û–±–Ω–æ–≤–ª—è—é –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏...$(RESET)\n"
	@cd bot && go mod tidy

go-deps: ## üìã –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
	@printf "$(BLUE)$(BOLD)üìã –°–ø–∏—Å–æ–∫ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π:$(RESET)\n"
	@cd bot && go list -m all

go-build: ## üî® –°–æ–±—Ä–∞—Ç—å Go –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
	@printf "$(BLUE)$(BOLD)üî® –°–æ–±–∏—Ä–∞—é Go –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ...$(RESET)\n"
	@cd bot && go build -v ./...
	@printf "$(GREEN)‚úÖ –°–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞$(RESET)\n"

go-run: ## ‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å Go –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
	@printf "$(GREEN)$(BOLD)‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫–∞—é Go –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ...$(RESET)\n"
	@cd bot && go run ./cmd/app/main.go

go-check: go-fmt go-vet go-lint go-test ## üîç –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–¥–∞

# ================================================================================================
# üõ†Ô∏è –ò–ù–°–¢–†–£–ú–ï–ù–¢–´
# ================================================================================================

.PHONY: install-tools git-hooks git-pre-commit

install-tools: ## üì• –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
	@printf "$(YELLOW)$(BOLD)üì• –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é Go –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã...$(RESET)\n"
	@which golangci-lint >/dev/null 2>&1 || { \
		printf "$(YELLOW)–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é golangci-lint...$(RESET)\n"; \
		curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $$(go env GOPATH)/bin v2.5.0; \
	}
	@[ -f $$(go env GOPATH)/bin/goimports ] || { \
		printf "$(YELLOW)–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é goimports...$(RESET)\n"; \
		go install golang.org/x/tools/cmd/goimports@latest; \
	}
	@[ -f $$(go env GOPATH)/bin/gofumpt ] || { \
		printf "$(YELLOW)–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é gofumpt...$(RESET)\n"; \
		go install mvdan.cc/gofumpt@latest; \
	}

	@printf "$(GREEN)‚úÖ –í—Å–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã$(RESET)\n"
	@printf "$(GREEN)golangci-lint: $$(golangci-lint version 2>/dev/null || echo '–Ω–µ –Ω–∞–π–¥–µ–Ω')$(RESET)\n"
	@printf "$(GREEN)goimports: $$($$(go env GOPATH)/bin/goimports -h 2>&1 | grep -q "usage:" && echo '—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' || echo '–Ω–µ –Ω–∞–π–¥–µ–Ω')$(RESET)\n"
	@printf "$(GREEN)gofumpt: $$($$(go env GOPATH)/bin/gofumpt -h >/dev/null 2>&1 && echo '—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' || echo '–Ω–µ –Ω–∞–π–¥–µ–Ω')$(RESET)\n"

git-hooks: ## üîó –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Git —Ö—É–∫–∏
	@printf "$(YELLOW)$(BOLD)üîó –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é Git —Ö—É–∫–∏...$(RESET)\n"
	@mkdir -p .git/hooks
	@echo '#!/bin/sh' > .git/hooks/pre-commit
	@echo 'echo "üîç –ó–∞–ø—É—Å–∫–∞—é pre-commit –ø—Ä–æ–≤–µ—Ä–∫–∏..."' >> .git/hooks/pre-commit
	@echo 'echo "‚Ä¢ –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞"' >> .git/hooks/pre-commit
	@echo 'make go-fmt go-vet go-lint' >> .git/hooks/pre-commit
	@echo 'if [ $$? -ne 0 ]; then' >> .git/hooks/pre-commit
	@echo '    echo "‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–¥–∞ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã"' >> .git/hooks/pre-commit
	@echo '    exit 1' >> .git/hooks/pre-commit
	@echo 'fi' >> .git/hooks/pre-commit
	@echo 'echo "‚úÖ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!"' >> .git/hooks/pre-commit
	@chmod +x .git/hooks/pre-commit
	@printf "$(GREEN)‚úÖ Git —Ö—É–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã$(RESET)\n"

# ================================================================================================
# üìä –ú–û–ù–ò–¢–û–†–ò–ù–ì –ò –°–¢–ê–¢–ò–°–¢–ò–ö–ê
# ================================================================================================

.PHONY: metrics docker-stats

metrics: ## üìä –ü–æ–∫–∞–∑–∞—Ç—å –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
	@printf "$(CYAN)$(BOLD)üìä –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:$(RESET)\n"
	@printf "$(YELLOW)LOC Go:$(RESET) $$(find bot -name "*.go" | xargs wc -l | tail -1 | awk '{print $$1}') —Å—Ç—Ä–æ–∫\n"
	@printf "$(YELLOW)–ö–æ–ª-–≤–æ Go —Ñ–∞–π–ª–æ–≤:$(RESET) $$(find bot -name "*.go" | wc -l)\n"
	@printf "$(YELLOW)–ö–æ–ª-–≤–æ —Ç–µ—Å—Ç–æ–≤:$(RESET) $$(grep -r "func Test" bot --include="*_test.go" | wc -l)\n"
	@printf "$(YELLOW)–ö–æ–ª-–≤–æ –ø–∞–∫–µ—Ç–æ–≤:$(RESET) $$(cd bot && go list ./... | wc -l)\n"
	@printf "$(YELLOW)–ö–æ–ª-–≤–æ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π:$(RESET) $$(cd bot && go list -m all | wc -l)\n"
	@printf "$(YELLOW)–†–∞–∑–º–µ—Ä –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∫–æ–¥–∞:$(RESET) $$(du -sh bot | awk '{print $$1}')\n"
	@printf "$(YELLOW)–†–∞–∑–º–µ—Ä docker –æ–±—Ä–∞–∑–∞:$(RESET) $$(docker images | grep cu-clubs-bot | awk '{print $$7}')\n"

docker-stats: ## üìä –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É Docker
	@printf "$(CYAN)$(BOLD)üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Docker:$(RESET)\n"
	@docker stats --no-stream

# ================================================================================================
# üöÄ –ü–†–û–î–û–í–´–ô –ó–ê–ü–£–°–ö
# ================================================================================================

.PHONY: prod-start prod-stop prod-restart prod-status prod-logs prod-pull prod-deploy

prod-pull: ## üì• –ü–æ–¥—Ç—è–Ω—É—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ–±—Ä–∞–∑—ã —Å Docker registry
	@printf "$(BLUE)$(BOLD)üì• –ü–æ–¥—Ç—è–≥–∏–≤–∞—é –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ–±—Ä–∞–∑—ã —Å Docker registry...$(RESET)\n"
	@docker compose -f $(DOCKER_COMPOSE_PROD) pull

prod-start: prod-check ## üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–µ–∫—Ç –≤ –ø—Ä–æ–¥–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
	@printf "$(GREEN)$(BOLD)üöÄ –ó–∞–ø—É—Å–∫–∞—é –ø—Ä–æ–µ–∫—Ç –≤ –ø—Ä–æ–¥–æ–≤–æ–º —Ä–µ–∂–∏–º–µ...$(RESET)\n"
	@docker compose -f $(DOCKER_COMPOSE_PROD) up -d

prod-stop: ## ‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–¥–æ–≤—ã–π —Ä–µ–∂–∏–º
	@printf "$(RED)$(BOLD)‚èπÔ∏è –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –ø—Ä–æ–¥–æ–≤—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã...$(RESET)\n"
	@docker compose -f $(DOCKER_COMPOSE_PROD) down

prod-restart: prod-pull ## üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ –ø—Ä–æ–¥–æ–≤—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –æ–±—Ä–∞–∑–æ–≤
	@printf "$(YELLOW)$(BOLD)üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—é –≤—Å–µ –ø—Ä–æ–¥–æ–≤—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã...$(RESET)\n"
	@docker compose -f $(DOCKER_COMPOSE_PROD) down
	@docker compose -f $(DOCKER_COMPOSE_PROD) up -d

prod-status: ## ‚ÑπÔ∏è –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–¥–æ–≤—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
	@printf "$(CYAN)$(BOLD)‚ÑπÔ∏è –°—Ç–∞—Ç—É—Å –ø—Ä–æ–¥–æ–≤—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:$(RESET)\n"
	@docker compose -f $(DOCKER_COMPOSE_PROD) ps

prod-logs: ## üìÉ –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ –≤—Å–µ—Ö –ø—Ä–æ–¥–æ–≤—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
	@printf "$(CYAN)$(BOLD)üìÉ –õ–æ–≥–∏ –ø—Ä–æ–¥–æ–≤—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:$(RESET)\n"
	@docker compose -f $(DOCKER_COMPOSE_PROD) logs -f

prod-logs-bot: ## üìÉ –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ –±–æ—Ç–∞ –≤ –ø—Ä–æ–¥–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
	@printf "$(CYAN)$(BOLD)üìÉ –õ–æ–≥–∏ –ø—Ä–æ–¥–æ–≤–æ–≥–æ –±–æ—Ç–∞:$(RESET)\n"
	@docker compose -f $(DOCKER_COMPOSE_PROD) logs -f $(BOT_CONTAINER)

prod-deploy: prod-check prod-pull prod-restart ## üöÄ –ü–æ–ª–Ω—ã–π –¥–µ–ø–ª–æ–π –≤ –ø—Ä–æ–¥–æ–≤—ã–π —Ä–µ–∂–∏–º
	@printf "$(GREEN)$(BOLD)üöÄ –î–µ–ø–ª–æ–π –≤ –ø—Ä–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!$(RESET)\n"

prod-check: ## üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –ø—Ä–æ–¥–æ–≤–æ–º—É –∑–∞–ø—É—Å–∫—É
	@printf "$(CYAN)$(BOLD)üîç –ü—Ä–æ–≤–µ—Ä—è—é –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –ø—Ä–æ–¥–æ–≤–æ–º—É –∑–∞–ø—É—Å–∫—É...$(RESET)\n"
	@printf "$(YELLOW)–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è...$(RESET)\n"
	@[ -f .env ] || { printf "$(RED)‚ùå –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω$(RESET)\n"; exit 1; }
	@printf "$(YELLOW)–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è docker-compose.yml...$(RESET)\n"
	@[ -f $(DOCKER_COMPOSE_PROD) ] || { printf "$(RED)‚ùå –§–∞–π–ª $(DOCKER_COMPOSE_PROD) –Ω–µ –Ω–∞–π–¥–µ–Ω$(RESET)\n"; exit 1; }
	@printf "$(YELLOW)–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...$(RESET)\n"
	@[ -f config/config.yaml ] || { printf "$(RED)‚ùå –§–∞–π–ª config/config.yaml –Ω–µ –Ω–∞–π–¥–µ–Ω$(RESET)\n"; exit 1; }
	@printf "$(GREEN)‚úÖ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ! –ú–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –≤ –ø—Ä–æ–¥–æ–≤–æ–º —Ä–µ–∂–∏–º–µ.$(RESET)\n"

# ================================================================================================
# üöÄ –ë–´–°–¢–†–´–ï –ö–û–ú–ê–ù–î–´ –ò –ö–û–ú–ë–ò–ù–ê–¶–ò–ò
# ================================================================================================

.PHONY: quick-start dev-reset

quick-start: build start ## üöÄ –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç (—Å–æ–±—Ä–∞—Ç—å –∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å –≤ —Ñ–æ–Ω–µ)

dev-reset: clean build start ## üîÑ –ü–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø—Ä–æ–µ–∫—Ç–∞
