// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"

	"github.com/Badsnus/cu-clubs-bot/bot/internal/adapters/secondary/postgres/ent/club"
	"github.com/Badsnus/cu-clubs-bot/bot/internal/adapters/secondary/postgres/ent/clubowner"
	"github.com/Badsnus/cu-clubs-bot/bot/internal/adapters/secondary/postgres/ent/event"
	"github.com/Badsnus/cu-clubs-bot/bot/internal/adapters/secondary/postgres/ent/ignoremailing"
	"github.com/Badsnus/cu-clubs-bot/bot/internal/adapters/secondary/postgres/ent/user"
	"github.com/Badsnus/cu-clubs-bot/bot/internal/domain/valueobject"
)

// ClubCreate is the builder for creating a Club entity.
type ClubCreate struct {
	config
	mutation *ClubMutation
	hooks    []Hook
}

// SetDeletedAt sets the "deleted_at" field.
func (cc *ClubCreate) SetDeletedAt(t time.Time) *ClubCreate {
	cc.mutation.SetDeletedAt(t)
	return cc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (cc *ClubCreate) SetNillableDeletedAt(t *time.Time) *ClubCreate {
	if t != nil {
		cc.SetDeletedAt(*t)
	}
	return cc
}

// SetCreatedAt sets the "created_at" field.
func (cc *ClubCreate) SetCreatedAt(t time.Time) *ClubCreate {
	cc.mutation.SetCreatedAt(t)
	return cc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cc *ClubCreate) SetNillableCreatedAt(t *time.Time) *ClubCreate {
	if t != nil {
		cc.SetCreatedAt(*t)
	}
	return cc
}

// SetUpdatedAt sets the "updated_at" field.
func (cc *ClubCreate) SetUpdatedAt(t time.Time) *ClubCreate {
	cc.mutation.SetUpdatedAt(t)
	return cc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (cc *ClubCreate) SetNillableUpdatedAt(t *time.Time) *ClubCreate {
	if t != nil {
		cc.SetUpdatedAt(*t)
	}
	return cc
}

// SetName sets the "name" field.
func (cc *ClubCreate) SetName(s string) *ClubCreate {
	cc.mutation.SetName(s)
	return cc
}

// SetDescription sets the "description" field.
func (cc *ClubCreate) SetDescription(s string) *ClubCreate {
	cc.mutation.SetDescription(s)
	return cc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (cc *ClubCreate) SetNillableDescription(s *string) *ClubCreate {
	if s != nil {
		cc.SetDescription(*s)
	}
	return cc
}

// SetLink sets the "link" field.
func (cc *ClubCreate) SetLink(s string) *ClubCreate {
	cc.mutation.SetLink(s)
	return cc
}

// SetNillableLink sets the "link" field if the given value is not nil.
func (cc *ClubCreate) SetNillableLink(s *string) *ClubCreate {
	if s != nil {
		cc.SetLink(*s)
	}
	return cc
}

// SetAvatarID sets the "avatar_id" field.
func (cc *ClubCreate) SetAvatarID(s string) *ClubCreate {
	cc.mutation.SetAvatarID(s)
	return cc
}

// SetNillableAvatarID sets the "avatar_id" field if the given value is not nil.
func (cc *ClubCreate) SetNillableAvatarID(s *string) *ClubCreate {
	if s != nil {
		cc.SetAvatarID(*s)
	}
	return cc
}

// SetIntroID sets the "intro_id" field.
func (cc *ClubCreate) SetIntroID(s string) *ClubCreate {
	cc.mutation.SetIntroID(s)
	return cc
}

// SetNillableIntroID sets the "intro_id" field if the given value is not nil.
func (cc *ClubCreate) SetNillableIntroID(s *string) *ClubCreate {
	if s != nil {
		cc.SetIntroID(*s)
	}
	return cc
}

// SetVisibleInTour sets the "visible_in_tour" field.
func (cc *ClubCreate) SetVisibleInTour(b bool) *ClubCreate {
	cc.mutation.SetVisibleInTour(b)
	return cc
}

// SetNillableVisibleInTour sets the "visible_in_tour" field if the given value is not nil.
func (cc *ClubCreate) SetNillableVisibleInTour(b *bool) *ClubCreate {
	if b != nil {
		cc.SetVisibleInTour(*b)
	}
	return cc
}

// SetAllowedRoles sets the "allowed_roles" field.
func (cc *ClubCreate) SetAllowedRoles(v valueobject.Roles) *ClubCreate {
	cc.mutation.SetAllowedRoles(v)
	return cc
}

// SetQrAllowed sets the "qr_allowed" field.
func (cc *ClubCreate) SetQrAllowed(b bool) *ClubCreate {
	cc.mutation.SetQrAllowed(b)
	return cc
}

// SetNillableQrAllowed sets the "qr_allowed" field if the given value is not nil.
func (cc *ClubCreate) SetNillableQrAllowed(b *bool) *ClubCreate {
	if b != nil {
		cc.SetQrAllowed(*b)
	}
	return cc
}

// SetID sets the "id" field.
func (cc *ClubCreate) SetID(u uuid.UUID) *ClubCreate {
	cc.mutation.SetID(u)
	return cc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (cc *ClubCreate) SetNillableID(u *uuid.UUID) *ClubCreate {
	if u != nil {
		cc.SetID(*u)
	}
	return cc
}

// AddEventIDs adds the "events" edge to the Event entity by IDs.
func (cc *ClubCreate) AddEventIDs(ids ...uuid.UUID) *ClubCreate {
	cc.mutation.AddEventIDs(ids...)
	return cc
}

// AddEvents adds the "events" edges to the Event entity.
func (cc *ClubCreate) AddEvents(e ...*Event) *ClubCreate {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return cc.AddEventIDs(ids...)
}

// AddOwnerIDs adds the "owners" edge to the User entity by IDs.
func (cc *ClubCreate) AddOwnerIDs(ids ...uuid.UUID) *ClubCreate {
	cc.mutation.AddOwnerIDs(ids...)
	return cc
}

// AddOwners adds the "owners" edges to the User entity.
func (cc *ClubCreate) AddOwners(u ...*User) *ClubCreate {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return cc.AddOwnerIDs(ids...)
}

// AddIgnoreMailingIDs adds the "ignore_mailings" edge to the IgnoreMailing entity by IDs.
func (cc *ClubCreate) AddIgnoreMailingIDs(ids ...uuid.UUID) *ClubCreate {
	cc.mutation.AddIgnoreMailingIDs(ids...)
	return cc
}

// AddIgnoreMailings adds the "ignore_mailings" edges to the IgnoreMailing entity.
func (cc *ClubCreate) AddIgnoreMailings(i ...*IgnoreMailing) *ClubCreate {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return cc.AddIgnoreMailingIDs(ids...)
}

// AddClubOwnerIDs adds the "club_owners" edge to the ClubOwner entity by IDs.
func (cc *ClubCreate) AddClubOwnerIDs(ids ...uuid.UUID) *ClubCreate {
	cc.mutation.AddClubOwnerIDs(ids...)
	return cc
}

// AddClubOwners adds the "club_owners" edges to the ClubOwner entity.
func (cc *ClubCreate) AddClubOwners(c ...*ClubOwner) *ClubCreate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cc.AddClubOwnerIDs(ids...)
}

// Mutation returns the ClubMutation object of the builder.
func (cc *ClubCreate) Mutation() *ClubMutation {
	return cc.mutation
}

// Save creates the Club in the database.
func (cc *ClubCreate) Save(ctx context.Context) (*Club, error) {
	if err := cc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, cc.sqlSave, cc.mutation, cc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cc *ClubCreate) SaveX(ctx context.Context) *Club {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cc *ClubCreate) Exec(ctx context.Context) error {
	_, err := cc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cc *ClubCreate) ExecX(ctx context.Context) {
	if err := cc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cc *ClubCreate) defaults() error {
	if _, ok := cc.mutation.CreatedAt(); !ok {
		v := club.DefaultCreatedAt
		cc.mutation.SetCreatedAt(v)
	}
	if _, ok := cc.mutation.UpdatedAt(); !ok {
		v := club.DefaultUpdatedAt
		cc.mutation.SetUpdatedAt(v)
	}
	if _, ok := cc.mutation.VisibleInTour(); !ok {
		v := club.DefaultVisibleInTour
		cc.mutation.SetVisibleInTour(v)
	}
	if _, ok := cc.mutation.QrAllowed(); !ok {
		v := club.DefaultQrAllowed
		cc.mutation.SetQrAllowed(v)
	}
	if _, ok := cc.mutation.ID(); !ok {
		if club.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized club.DefaultID (forgotten import ent/runtime?)")
		}
		v := club.DefaultID()
		cc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (cc *ClubCreate) check() error {
	if _, ok := cc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Club.created_at"`)}
	}
	if _, ok := cc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Club.updated_at"`)}
	}
	if _, ok := cc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Club.name"`)}
	}
	if v, ok := cc.mutation.Link(); ok {
		if err := club.LinkValidator(v); err != nil {
			return &ValidationError{Name: "link", err: fmt.Errorf(`ent: validator failed for field "Club.link": %w`, err)}
		}
	}
	if _, ok := cc.mutation.VisibleInTour(); !ok {
		return &ValidationError{Name: "visible_in_tour", err: errors.New(`ent: missing required field "Club.visible_in_tour"`)}
	}
	if _, ok := cc.mutation.QrAllowed(); !ok {
		return &ValidationError{Name: "qr_allowed", err: errors.New(`ent: missing required field "Club.qr_allowed"`)}
	}
	return nil
}

func (cc *ClubCreate) sqlSave(ctx context.Context) (*Club, error) {
	if err := cc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	cc.mutation.id = &_node.ID
	cc.mutation.done = true
	return _node, nil
}

func (cc *ClubCreate) createSpec() (*Club, *sqlgraph.CreateSpec) {
	var (
		_node = &Club{config: cc.config}
		_spec = sqlgraph.NewCreateSpec(club.Table, sqlgraph.NewFieldSpec(club.FieldID, field.TypeUUID))
	)
	if id, ok := cc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := cc.mutation.DeletedAt(); ok {
		_spec.SetField(club.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := cc.mutation.CreatedAt(); ok {
		_spec.SetField(club.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := cc.mutation.UpdatedAt(); ok {
		_spec.SetField(club.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := cc.mutation.Name(); ok {
		_spec.SetField(club.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := cc.mutation.Description(); ok {
		_spec.SetField(club.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := cc.mutation.Link(); ok {
		_spec.SetField(club.FieldLink, field.TypeString, value)
		_node.Link = value
	}
	if value, ok := cc.mutation.AvatarID(); ok {
		_spec.SetField(club.FieldAvatarID, field.TypeString, value)
		_node.AvatarID = value
	}
	if value, ok := cc.mutation.IntroID(); ok {
		_spec.SetField(club.FieldIntroID, field.TypeString, value)
		_node.IntroID = value
	}
	if value, ok := cc.mutation.VisibleInTour(); ok {
		_spec.SetField(club.FieldVisibleInTour, field.TypeBool, value)
		_node.VisibleInTour = value
	}
	if value, ok := cc.mutation.AllowedRoles(); ok {
		_spec.SetField(club.FieldAllowedRoles, field.TypeJSON, value)
		_node.AllowedRoles = value
	}
	if value, ok := cc.mutation.QrAllowed(); ok {
		_spec.SetField(club.FieldQrAllowed, field.TypeBool, value)
		_node.QrAllowed = value
	}
	if nodes := cc.mutation.EventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   club.EventsTable,
			Columns: []string{club.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.OwnersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   club.OwnersTable,
			Columns: club.OwnersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &ClubOwnerCreate{config: cc.config, mutation: newClubOwnerMutation(cc.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.IgnoreMailingsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   club.IgnoreMailingsTable,
			Columns: []string{club.IgnoreMailingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ignoremailing.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.ClubOwnersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   club.ClubOwnersTable,
			Columns: []string{club.ClubOwnersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(clubowner.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ClubCreateBulk is the builder for creating many Club entities in bulk.
type ClubCreateBulk struct {
	config
	err      error
	builders []*ClubCreate
}

// Save creates the Club entities in the database.
func (ccb *ClubCreateBulk) Save(ctx context.Context) ([]*Club, error) {
	if ccb.err != nil {
		return nil, ccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ccb.builders))
	nodes := make([]*Club, len(ccb.builders))
	mutators := make([]Mutator, len(ccb.builders))
	for i := range ccb.builders {
		func(i int, root context.Context) {
			builder := ccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ClubMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccb *ClubCreateBulk) SaveX(ctx context.Context) []*Club {
	v, err := ccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccb *ClubCreateBulk) Exec(ctx context.Context) error {
	_, err := ccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccb *ClubCreateBulk) ExecX(ctx context.Context) {
	if err := ccb.Exec(ctx); err != nil {
		panic(err)
	}
}
