// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"

	"github.com/Badsnus/cu-clubs-bot/bot/internal/adapters/secondary/postgres/ent/event"
	"github.com/Badsnus/cu-clubs-bot/bot/internal/adapters/secondary/postgres/ent/eventparticipant"
	"github.com/Badsnus/cu-clubs-bot/bot/internal/adapters/secondary/postgres/ent/user"
)

// EventParticipantCreate is the builder for creating a EventParticipant entity.
type EventParticipantCreate struct {
	config
	mutation *EventParticipantMutation
	hooks    []Hook
}

// SetDeletedAt sets the "deleted_at" field.
func (epc *EventParticipantCreate) SetDeletedAt(t time.Time) *EventParticipantCreate {
	epc.mutation.SetDeletedAt(t)
	return epc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (epc *EventParticipantCreate) SetNillableDeletedAt(t *time.Time) *EventParticipantCreate {
	if t != nil {
		epc.SetDeletedAt(*t)
	}
	return epc
}

// SetCreatedAt sets the "created_at" field.
func (epc *EventParticipantCreate) SetCreatedAt(t time.Time) *EventParticipantCreate {
	epc.mutation.SetCreatedAt(t)
	return epc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (epc *EventParticipantCreate) SetNillableCreatedAt(t *time.Time) *EventParticipantCreate {
	if t != nil {
		epc.SetCreatedAt(*t)
	}
	return epc
}

// SetUpdatedAt sets the "updated_at" field.
func (epc *EventParticipantCreate) SetUpdatedAt(t time.Time) *EventParticipantCreate {
	epc.mutation.SetUpdatedAt(t)
	return epc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (epc *EventParticipantCreate) SetNillableUpdatedAt(t *time.Time) *EventParticipantCreate {
	if t != nil {
		epc.SetUpdatedAt(*t)
	}
	return epc
}

// SetEventID sets the "event_id" field.
func (epc *EventParticipantCreate) SetEventID(u uuid.UUID) *EventParticipantCreate {
	epc.mutation.SetEventID(u)
	return epc
}

// SetUserID sets the "user_id" field.
func (epc *EventParticipantCreate) SetUserID(u uuid.UUID) *EventParticipantCreate {
	epc.mutation.SetUserID(u)
	return epc
}

// SetAttendanceMethod sets the "attendance_method" field.
func (epc *EventParticipantCreate) SetAttendanceMethod(em eventparticipant.AttendanceMethod) *EventParticipantCreate {
	epc.mutation.SetAttendanceMethod(em)
	return epc
}

// SetNillableAttendanceMethod sets the "attendance_method" field if the given value is not nil.
func (epc *EventParticipantCreate) SetNillableAttendanceMethod(em *eventparticipant.AttendanceMethod) *EventParticipantCreate {
	if em != nil {
		epc.SetAttendanceMethod(*em)
	}
	return epc
}

// SetAttendedAt sets the "attended_at" field.
func (epc *EventParticipantCreate) SetAttendedAt(t time.Time) *EventParticipantCreate {
	epc.mutation.SetAttendedAt(t)
	return epc
}

// SetNillableAttendedAt sets the "attended_at" field if the given value is not nil.
func (epc *EventParticipantCreate) SetNillableAttendedAt(t *time.Time) *EventParticipantCreate {
	if t != nil {
		epc.SetAttendedAt(*t)
	}
	return epc
}

// SetID sets the "id" field.
func (epc *EventParticipantCreate) SetID(u uuid.UUID) *EventParticipantCreate {
	epc.mutation.SetID(u)
	return epc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (epc *EventParticipantCreate) SetNillableID(u *uuid.UUID) *EventParticipantCreate {
	if u != nil {
		epc.SetID(*u)
	}
	return epc
}

// SetEvent sets the "event" edge to the Event entity.
func (epc *EventParticipantCreate) SetEvent(e *Event) *EventParticipantCreate {
	return epc.SetEventID(e.ID)
}

// SetUser sets the "user" edge to the User entity.
func (epc *EventParticipantCreate) SetUser(u *User) *EventParticipantCreate {
	return epc.SetUserID(u.ID)
}

// Mutation returns the EventParticipantMutation object of the builder.
func (epc *EventParticipantCreate) Mutation() *EventParticipantMutation {
	return epc.mutation
}

// Save creates the EventParticipant in the database.
func (epc *EventParticipantCreate) Save(ctx context.Context) (*EventParticipant, error) {
	if err := epc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, epc.sqlSave, epc.mutation, epc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (epc *EventParticipantCreate) SaveX(ctx context.Context) *EventParticipant {
	v, err := epc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (epc *EventParticipantCreate) Exec(ctx context.Context) error {
	_, err := epc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (epc *EventParticipantCreate) ExecX(ctx context.Context) {
	if err := epc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (epc *EventParticipantCreate) defaults() error {
	if _, ok := epc.mutation.CreatedAt(); !ok {
		v := eventparticipant.DefaultCreatedAt
		epc.mutation.SetCreatedAt(v)
	}
	if _, ok := epc.mutation.UpdatedAt(); !ok {
		v := eventparticipant.DefaultUpdatedAt
		epc.mutation.SetUpdatedAt(v)
	}
	if _, ok := epc.mutation.AttendanceMethod(); !ok {
		v := eventparticipant.DefaultAttendanceMethod
		epc.mutation.SetAttendanceMethod(v)
	}
	if _, ok := epc.mutation.ID(); !ok {
		if eventparticipant.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized eventparticipant.DefaultID (forgotten import ent/runtime?)")
		}
		v := eventparticipant.DefaultID()
		epc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (epc *EventParticipantCreate) check() error {
	if _, ok := epc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "EventParticipant.created_at"`)}
	}
	if _, ok := epc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "EventParticipant.updated_at"`)}
	}
	if _, ok := epc.mutation.EventID(); !ok {
		return &ValidationError{Name: "event_id", err: errors.New(`ent: missing required field "EventParticipant.event_id"`)}
	}
	if _, ok := epc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "EventParticipant.user_id"`)}
	}
	if _, ok := epc.mutation.AttendanceMethod(); !ok {
		return &ValidationError{Name: "attendance_method", err: errors.New(`ent: missing required field "EventParticipant.attendance_method"`)}
	}
	if v, ok := epc.mutation.AttendanceMethod(); ok {
		if err := eventparticipant.AttendanceMethodValidator(v); err != nil {
			return &ValidationError{Name: "attendance_method", err: fmt.Errorf(`ent: validator failed for field "EventParticipant.attendance_method": %w`, err)}
		}
	}
	if len(epc.mutation.EventIDs()) == 0 {
		return &ValidationError{Name: "event", err: errors.New(`ent: missing required edge "EventParticipant.event"`)}
	}
	if len(epc.mutation.UserIDs()) == 0 {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "EventParticipant.user"`)}
	}
	return nil
}

func (epc *EventParticipantCreate) sqlSave(ctx context.Context) (*EventParticipant, error) {
	if err := epc.check(); err != nil {
		return nil, err
	}
	_node, _spec := epc.createSpec()
	if err := sqlgraph.CreateNode(ctx, epc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	epc.mutation.id = &_node.ID
	epc.mutation.done = true
	return _node, nil
}

func (epc *EventParticipantCreate) createSpec() (*EventParticipant, *sqlgraph.CreateSpec) {
	var (
		_node = &EventParticipant{config: epc.config}
		_spec = sqlgraph.NewCreateSpec(eventparticipant.Table, sqlgraph.NewFieldSpec(eventparticipant.FieldID, field.TypeUUID))
	)
	if id, ok := epc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := epc.mutation.DeletedAt(); ok {
		_spec.SetField(eventparticipant.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := epc.mutation.CreatedAt(); ok {
		_spec.SetField(eventparticipant.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := epc.mutation.UpdatedAt(); ok {
		_spec.SetField(eventparticipant.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := epc.mutation.AttendanceMethod(); ok {
		_spec.SetField(eventparticipant.FieldAttendanceMethod, field.TypeEnum, value)
		_node.AttendanceMethod = value
	}
	if value, ok := epc.mutation.AttendedAt(); ok {
		_spec.SetField(eventparticipant.FieldAttendedAt, field.TypeTime, value)
		_node.AttendedAt = value
	}
	if nodes := epc.mutation.EventIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   eventparticipant.EventTable,
			Columns: []string{eventparticipant.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.EventID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := epc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   eventparticipant.UserTable,
			Columns: []string{eventparticipant.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// EventParticipantCreateBulk is the builder for creating many EventParticipant entities in bulk.
type EventParticipantCreateBulk struct {
	config
	err      error
	builders []*EventParticipantCreate
}

// Save creates the EventParticipant entities in the database.
func (epcb *EventParticipantCreateBulk) Save(ctx context.Context) ([]*EventParticipant, error) {
	if epcb.err != nil {
		return nil, epcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(epcb.builders))
	nodes := make([]*EventParticipant, len(epcb.builders))
	mutators := make([]Mutator, len(epcb.builders))
	for i := range epcb.builders {
		func(i int, root context.Context) {
			builder := epcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*EventParticipantMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, epcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, epcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, epcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (epcb *EventParticipantCreateBulk) SaveX(ctx context.Context) []*EventParticipant {
	v, err := epcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (epcb *EventParticipantCreateBulk) Exec(ctx context.Context) error {
	_, err := epcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (epcb *EventParticipantCreateBulk) ExecX(ctx context.Context) {
	if err := epcb.Exec(ctx); err != nil {
		panic(err)
	}
}
