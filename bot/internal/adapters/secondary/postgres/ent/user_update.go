// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"

	"github.com/Badsnus/cu-clubs-bot/bot/internal/adapters/secondary/postgres/ent/club"
	"github.com/Badsnus/cu-clubs-bot/bot/internal/adapters/secondary/postgres/ent/clubowner"
	"github.com/Badsnus/cu-clubs-bot/bot/internal/adapters/secondary/postgres/ent/event"
	"github.com/Badsnus/cu-clubs-bot/bot/internal/adapters/secondary/postgres/ent/eventparticipant"
	"github.com/Badsnus/cu-clubs-bot/bot/internal/adapters/secondary/postgres/ent/ignoremailing"
	"github.com/Badsnus/cu-clubs-bot/bot/internal/adapters/secondary/postgres/ent/notification"
	"github.com/Badsnus/cu-clubs-bot/bot/internal/adapters/secondary/postgres/ent/pass"
	"github.com/Badsnus/cu-clubs-bot/bot/internal/adapters/secondary/postgres/ent/predicate"
	"github.com/Badsnus/cu-clubs-bot/bot/internal/adapters/secondary/postgres/ent/user"
	"github.com/Badsnus/cu-clubs-bot/bot/internal/domain/valueobject"
)

// UserUpdate is the builder for updating User entities.
type UserUpdate struct {
	config
	hooks    []Hook
	mutation *UserMutation
}

// Where appends a list predicates to the UserUpdate builder.
func (uu *UserUpdate) Where(ps ...predicate.User) *UserUpdate {
	uu.mutation.Where(ps...)
	return uu
}

// SetUpdatedAt sets the "updated_at" field.
func (uu *UserUpdate) SetUpdatedAt(t time.Time) *UserUpdate {
	uu.mutation.SetUpdatedAt(t)
	return uu
}

// SetTelegramID sets the "telegram_id" field.
func (uu *UserUpdate) SetTelegramID(i int64) *UserUpdate {
	uu.mutation.ResetTelegramID()
	uu.mutation.SetTelegramID(i)
	return uu
}

// SetNillableTelegramID sets the "telegram_id" field if the given value is not nil.
func (uu *UserUpdate) SetNillableTelegramID(i *int64) *UserUpdate {
	if i != nil {
		uu.SetTelegramID(*i)
	}
	return uu
}

// AddTelegramID adds i to the "telegram_id" field.
func (uu *UserUpdate) AddTelegramID(i int64) *UserUpdate {
	uu.mutation.AddTelegramID(i)
	return uu
}

// SetLocalization sets the "localization" field.
func (uu *UserUpdate) SetLocalization(u user.Localization) *UserUpdate {
	uu.mutation.SetLocalization(u)
	return uu
}

// SetNillableLocalization sets the "localization" field if the given value is not nil.
func (uu *UserUpdate) SetNillableLocalization(u *user.Localization) *UserUpdate {
	if u != nil {
		uu.SetLocalization(*u)
	}
	return uu
}

// SetUsername sets the "username" field.
func (uu *UserUpdate) SetUsername(s string) *UserUpdate {
	uu.mutation.SetUsername(s)
	return uu
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (uu *UserUpdate) SetNillableUsername(s *string) *UserUpdate {
	if s != nil {
		uu.SetUsername(*s)
	}
	return uu
}

// ClearUsername clears the value of the "username" field.
func (uu *UserUpdate) ClearUsername() *UserUpdate {
	uu.mutation.ClearUsername()
	return uu
}

// SetRole sets the "role" field.
func (uu *UserUpdate) SetRole(v valueobject.Role) *UserUpdate {
	uu.mutation.SetRole(v)
	return uu
}

// SetNillableRole sets the "role" field if the given value is not nil.
func (uu *UserUpdate) SetNillableRole(v *valueobject.Role) *UserUpdate {
	if v != nil {
		uu.SetRole(*v)
	}
	return uu
}

// SetEmail sets the "email" field.
func (uu *UserUpdate) SetEmail(v valueobject.Email) *UserUpdate {
	uu.mutation.SetEmail(v)
	return uu
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (uu *UserUpdate) SetNillableEmail(v *valueobject.Email) *UserUpdate {
	if v != nil {
		uu.SetEmail(*v)
	}
	return uu
}

// ClearEmail clears the value of the "email" field.
func (uu *UserUpdate) ClearEmail() *UserUpdate {
	uu.mutation.ClearEmail()
	return uu
}

// SetFio sets the "fio" field.
func (uu *UserUpdate) SetFio(v valueobject.FIO) *UserUpdate {
	uu.mutation.SetFio(v)
	return uu
}

// SetNillableFio sets the "fio" field if the given value is not nil.
func (uu *UserUpdate) SetNillableFio(v *valueobject.FIO) *UserUpdate {
	if v != nil {
		uu.SetFio(*v)
	}
	return uu
}

// SetQrPayload sets the "qr_payload" field.
func (uu *UserUpdate) SetQrPayload(u uuid.UUID) *UserUpdate {
	uu.mutation.SetQrPayload(u)
	return uu
}

// SetNillableQrPayload sets the "qr_payload" field if the given value is not nil.
func (uu *UserUpdate) SetNillableQrPayload(u *uuid.UUID) *UserUpdate {
	if u != nil {
		uu.SetQrPayload(*u)
	}
	return uu
}

// ClearQrPayload clears the value of the "qr_payload" field.
func (uu *UserUpdate) ClearQrPayload() *UserUpdate {
	uu.mutation.ClearQrPayload()
	return uu
}

// SetQrFileID sets the "qr_file_id" field.
func (uu *UserUpdate) SetQrFileID(s string) *UserUpdate {
	uu.mutation.SetQrFileID(s)
	return uu
}

// SetNillableQrFileID sets the "qr_file_id" field if the given value is not nil.
func (uu *UserUpdate) SetNillableQrFileID(s *string) *UserUpdate {
	if s != nil {
		uu.SetQrFileID(*s)
	}
	return uu
}

// ClearQrFileID clears the value of the "qr_file_id" field.
func (uu *UserUpdate) ClearQrFileID() *UserUpdate {
	uu.mutation.ClearQrFileID()
	return uu
}

// SetIsBanned sets the "is_banned" field.
func (uu *UserUpdate) SetIsBanned(b bool) *UserUpdate {
	uu.mutation.SetIsBanned(b)
	return uu
}

// SetNillableIsBanned sets the "is_banned" field if the given value is not nil.
func (uu *UserUpdate) SetNillableIsBanned(b *bool) *UserUpdate {
	if b != nil {
		uu.SetIsBanned(*b)
	}
	return uu
}

// AddOwnedClubIDs adds the "owned_clubs" edge to the Club entity by IDs.
func (uu *UserUpdate) AddOwnedClubIDs(ids ...uuid.UUID) *UserUpdate {
	uu.mutation.AddOwnedClubIDs(ids...)
	return uu
}

// AddOwnedClubs adds the "owned_clubs" edges to the Club entity.
func (uu *UserUpdate) AddOwnedClubs(c ...*Club) *UserUpdate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uu.AddOwnedClubIDs(ids...)
}

// AddEventIDs adds the "events" edge to the Event entity by IDs.
func (uu *UserUpdate) AddEventIDs(ids ...uuid.UUID) *UserUpdate {
	uu.mutation.AddEventIDs(ids...)
	return uu
}

// AddEvents adds the "events" edges to the Event entity.
func (uu *UserUpdate) AddEvents(e ...*Event) *UserUpdate {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return uu.AddEventIDs(ids...)
}

// AddIgnoreMailingIDs adds the "ignore_mailings" edge to the IgnoreMailing entity by IDs.
func (uu *UserUpdate) AddIgnoreMailingIDs(ids ...uuid.UUID) *UserUpdate {
	uu.mutation.AddIgnoreMailingIDs(ids...)
	return uu
}

// AddIgnoreMailings adds the "ignore_mailings" edges to the IgnoreMailing entity.
func (uu *UserUpdate) AddIgnoreMailings(i ...*IgnoreMailing) *UserUpdate {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return uu.AddIgnoreMailingIDs(ids...)
}

// AddNotificationIDs adds the "notifications" edge to the Notification entity by IDs.
func (uu *UserUpdate) AddNotificationIDs(ids ...uuid.UUID) *UserUpdate {
	uu.mutation.AddNotificationIDs(ids...)
	return uu
}

// AddNotifications adds the "notifications" edges to the Notification entity.
func (uu *UserUpdate) AddNotifications(n ...*Notification) *UserUpdate {
	ids := make([]uuid.UUID, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return uu.AddNotificationIDs(ids...)
}

// AddPassIDs adds the "passes" edge to the Pass entity by IDs.
func (uu *UserUpdate) AddPassIDs(ids ...uuid.UUID) *UserUpdate {
	uu.mutation.AddPassIDs(ids...)
	return uu
}

// AddPasses adds the "passes" edges to the Pass entity.
func (uu *UserUpdate) AddPasses(p ...*Pass) *UserUpdate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uu.AddPassIDs(ids...)
}

// AddClubOwnerIDs adds the "club_owners" edge to the ClubOwner entity by IDs.
func (uu *UserUpdate) AddClubOwnerIDs(ids ...uuid.UUID) *UserUpdate {
	uu.mutation.AddClubOwnerIDs(ids...)
	return uu
}

// AddClubOwners adds the "club_owners" edges to the ClubOwner entity.
func (uu *UserUpdate) AddClubOwners(c ...*ClubOwner) *UserUpdate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uu.AddClubOwnerIDs(ids...)
}

// AddEventParticipantIDs adds the "event_participants" edge to the EventParticipant entity by IDs.
func (uu *UserUpdate) AddEventParticipantIDs(ids ...uuid.UUID) *UserUpdate {
	uu.mutation.AddEventParticipantIDs(ids...)
	return uu
}

// AddEventParticipants adds the "event_participants" edges to the EventParticipant entity.
func (uu *UserUpdate) AddEventParticipants(e ...*EventParticipant) *UserUpdate {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return uu.AddEventParticipantIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (uu *UserUpdate) Mutation() *UserMutation {
	return uu.mutation
}

// ClearOwnedClubs clears all "owned_clubs" edges to the Club entity.
func (uu *UserUpdate) ClearOwnedClubs() *UserUpdate {
	uu.mutation.ClearOwnedClubs()
	return uu
}

// RemoveOwnedClubIDs removes the "owned_clubs" edge to Club entities by IDs.
func (uu *UserUpdate) RemoveOwnedClubIDs(ids ...uuid.UUID) *UserUpdate {
	uu.mutation.RemoveOwnedClubIDs(ids...)
	return uu
}

// RemoveOwnedClubs removes "owned_clubs" edges to Club entities.
func (uu *UserUpdate) RemoveOwnedClubs(c ...*Club) *UserUpdate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uu.RemoveOwnedClubIDs(ids...)
}

// ClearEvents clears all "events" edges to the Event entity.
func (uu *UserUpdate) ClearEvents() *UserUpdate {
	uu.mutation.ClearEvents()
	return uu
}

// RemoveEventIDs removes the "events" edge to Event entities by IDs.
func (uu *UserUpdate) RemoveEventIDs(ids ...uuid.UUID) *UserUpdate {
	uu.mutation.RemoveEventIDs(ids...)
	return uu
}

// RemoveEvents removes "events" edges to Event entities.
func (uu *UserUpdate) RemoveEvents(e ...*Event) *UserUpdate {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return uu.RemoveEventIDs(ids...)
}

// ClearIgnoreMailings clears all "ignore_mailings" edges to the IgnoreMailing entity.
func (uu *UserUpdate) ClearIgnoreMailings() *UserUpdate {
	uu.mutation.ClearIgnoreMailings()
	return uu
}

// RemoveIgnoreMailingIDs removes the "ignore_mailings" edge to IgnoreMailing entities by IDs.
func (uu *UserUpdate) RemoveIgnoreMailingIDs(ids ...uuid.UUID) *UserUpdate {
	uu.mutation.RemoveIgnoreMailingIDs(ids...)
	return uu
}

// RemoveIgnoreMailings removes "ignore_mailings" edges to IgnoreMailing entities.
func (uu *UserUpdate) RemoveIgnoreMailings(i ...*IgnoreMailing) *UserUpdate {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return uu.RemoveIgnoreMailingIDs(ids...)
}

// ClearNotifications clears all "notifications" edges to the Notification entity.
func (uu *UserUpdate) ClearNotifications() *UserUpdate {
	uu.mutation.ClearNotifications()
	return uu
}

// RemoveNotificationIDs removes the "notifications" edge to Notification entities by IDs.
func (uu *UserUpdate) RemoveNotificationIDs(ids ...uuid.UUID) *UserUpdate {
	uu.mutation.RemoveNotificationIDs(ids...)
	return uu
}

// RemoveNotifications removes "notifications" edges to Notification entities.
func (uu *UserUpdate) RemoveNotifications(n ...*Notification) *UserUpdate {
	ids := make([]uuid.UUID, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return uu.RemoveNotificationIDs(ids...)
}

// ClearPasses clears all "passes" edges to the Pass entity.
func (uu *UserUpdate) ClearPasses() *UserUpdate {
	uu.mutation.ClearPasses()
	return uu
}

// RemovePassIDs removes the "passes" edge to Pass entities by IDs.
func (uu *UserUpdate) RemovePassIDs(ids ...uuid.UUID) *UserUpdate {
	uu.mutation.RemovePassIDs(ids...)
	return uu
}

// RemovePasses removes "passes" edges to Pass entities.
func (uu *UserUpdate) RemovePasses(p ...*Pass) *UserUpdate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uu.RemovePassIDs(ids...)
}

// ClearClubOwners clears all "club_owners" edges to the ClubOwner entity.
func (uu *UserUpdate) ClearClubOwners() *UserUpdate {
	uu.mutation.ClearClubOwners()
	return uu
}

// RemoveClubOwnerIDs removes the "club_owners" edge to ClubOwner entities by IDs.
func (uu *UserUpdate) RemoveClubOwnerIDs(ids ...uuid.UUID) *UserUpdate {
	uu.mutation.RemoveClubOwnerIDs(ids...)
	return uu
}

// RemoveClubOwners removes "club_owners" edges to ClubOwner entities.
func (uu *UserUpdate) RemoveClubOwners(c ...*ClubOwner) *UserUpdate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uu.RemoveClubOwnerIDs(ids...)
}

// ClearEventParticipants clears all "event_participants" edges to the EventParticipant entity.
func (uu *UserUpdate) ClearEventParticipants() *UserUpdate {
	uu.mutation.ClearEventParticipants()
	return uu
}

// RemoveEventParticipantIDs removes the "event_participants" edge to EventParticipant entities by IDs.
func (uu *UserUpdate) RemoveEventParticipantIDs(ids ...uuid.UUID) *UserUpdate {
	uu.mutation.RemoveEventParticipantIDs(ids...)
	return uu
}

// RemoveEventParticipants removes "event_participants" edges to EventParticipant entities.
func (uu *UserUpdate) RemoveEventParticipants(e ...*EventParticipant) *UserUpdate {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return uu.RemoveEventParticipantIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uu *UserUpdate) Save(ctx context.Context) (int, error) {
	uu.defaults()
	return withHooks(ctx, uu.sqlSave, uu.mutation, uu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uu *UserUpdate) SaveX(ctx context.Context) int {
	affected, err := uu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uu *UserUpdate) Exec(ctx context.Context) error {
	_, err := uu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uu *UserUpdate) ExecX(ctx context.Context) {
	if err := uu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uu *UserUpdate) defaults() {
	if _, ok := uu.mutation.UpdatedAt(); !ok {
		v := user.UpdateDefaultUpdatedAt()
		uu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uu *UserUpdate) check() error {
	if v, ok := uu.mutation.TelegramID(); ok {
		if err := user.TelegramIDValidator(v); err != nil {
			return &ValidationError{Name: "telegram_id", err: fmt.Errorf(`ent: validator failed for field "User.telegram_id": %w`, err)}
		}
	}
	if v, ok := uu.mutation.Localization(); ok {
		if err := user.LocalizationValidator(v); err != nil {
			return &ValidationError{Name: "localization", err: fmt.Errorf(`ent: validator failed for field "User.localization": %w`, err)}
		}
	}
	if v, ok := uu.mutation.Role(); ok {
		if err := user.RoleValidator(v); err != nil {
			return &ValidationError{Name: "role", err: fmt.Errorf(`ent: validator failed for field "User.role": %w`, err)}
		}
	}
	return nil
}

func (uu *UserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := uu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID))
	if ps := uu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uu.mutation.UpdatedAt(); ok {
		_spec.SetField(user.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := uu.mutation.TelegramID(); ok {
		_spec.SetField(user.FieldTelegramID, field.TypeInt64, value)
	}
	if value, ok := uu.mutation.AddedTelegramID(); ok {
		_spec.AddField(user.FieldTelegramID, field.TypeInt64, value)
	}
	if value, ok := uu.mutation.Localization(); ok {
		_spec.SetField(user.FieldLocalization, field.TypeEnum, value)
	}
	if value, ok := uu.mutation.Username(); ok {
		_spec.SetField(user.FieldUsername, field.TypeString, value)
	}
	if uu.mutation.UsernameCleared() {
		_spec.ClearField(user.FieldUsername, field.TypeString)
	}
	if value, ok := uu.mutation.Role(); ok {
		_spec.SetField(user.FieldRole, field.TypeEnum, value)
	}
	if value, ok := uu.mutation.Email(); ok {
		_spec.SetField(user.FieldEmail, field.TypeString, value)
	}
	if uu.mutation.EmailCleared() {
		_spec.ClearField(user.FieldEmail, field.TypeString)
	}
	if value, ok := uu.mutation.Fio(); ok {
		_spec.SetField(user.FieldFio, field.TypeString, value)
	}
	if value, ok := uu.mutation.QrPayload(); ok {
		_spec.SetField(user.FieldQrPayload, field.TypeUUID, value)
	}
	if uu.mutation.QrPayloadCleared() {
		_spec.ClearField(user.FieldQrPayload, field.TypeUUID)
	}
	if value, ok := uu.mutation.QrFileID(); ok {
		_spec.SetField(user.FieldQrFileID, field.TypeString, value)
	}
	if uu.mutation.QrFileIDCleared() {
		_spec.ClearField(user.FieldQrFileID, field.TypeString)
	}
	if value, ok := uu.mutation.IsBanned(); ok {
		_spec.SetField(user.FieldIsBanned, field.TypeBool, value)
	}
	if uu.mutation.OwnedClubsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.OwnedClubsTable,
			Columns: user.OwnedClubsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(club.FieldID, field.TypeUUID),
			},
		}
		createE := &ClubOwnerCreate{config: uu.config, mutation: newClubOwnerMutation(uu.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedOwnedClubsIDs(); len(nodes) > 0 && !uu.mutation.OwnedClubsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.OwnedClubsTable,
			Columns: user.OwnedClubsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(club.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &ClubOwnerCreate{config: uu.config, mutation: newClubOwnerMutation(uu.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.OwnedClubsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.OwnedClubsTable,
			Columns: user.OwnedClubsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(club.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &ClubOwnerCreate{config: uu.config, mutation: newClubOwnerMutation(uu.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.EventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.EventsTable,
			Columns: user.EventsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeUUID),
			},
		}
		createE := &EventParticipantCreate{config: uu.config, mutation: newEventParticipantMutation(uu.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedEventsIDs(); len(nodes) > 0 && !uu.mutation.EventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.EventsTable,
			Columns: user.EventsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &EventParticipantCreate{config: uu.config, mutation: newEventParticipantMutation(uu.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.EventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.EventsTable,
			Columns: user.EventsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &EventParticipantCreate{config: uu.config, mutation: newEventParticipantMutation(uu.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.IgnoreMailingsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.IgnoreMailingsTable,
			Columns: []string{user.IgnoreMailingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ignoremailing.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedIgnoreMailingsIDs(); len(nodes) > 0 && !uu.mutation.IgnoreMailingsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.IgnoreMailingsTable,
			Columns: []string{user.IgnoreMailingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ignoremailing.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.IgnoreMailingsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.IgnoreMailingsTable,
			Columns: []string{user.IgnoreMailingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ignoremailing.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.NotificationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.NotificationsTable,
			Columns: []string{user.NotificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedNotificationsIDs(); len(nodes) > 0 && !uu.mutation.NotificationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.NotificationsTable,
			Columns: []string{user.NotificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.NotificationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.NotificationsTable,
			Columns: []string{user.NotificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.PassesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.PassesTable,
			Columns: []string{user.PassesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pass.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedPassesIDs(); len(nodes) > 0 && !uu.mutation.PassesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.PassesTable,
			Columns: []string{user.PassesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pass.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.PassesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.PassesTable,
			Columns: []string{user.PassesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pass.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.ClubOwnersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.ClubOwnersTable,
			Columns: []string{user.ClubOwnersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(clubowner.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedClubOwnersIDs(); len(nodes) > 0 && !uu.mutation.ClubOwnersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.ClubOwnersTable,
			Columns: []string{user.ClubOwnersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(clubowner.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.ClubOwnersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.ClubOwnersTable,
			Columns: []string{user.ClubOwnersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(clubowner.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.EventParticipantsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.EventParticipantsTable,
			Columns: []string{user.EventParticipantsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eventparticipant.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedEventParticipantsIDs(); len(nodes) > 0 && !uu.mutation.EventParticipantsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.EventParticipantsTable,
			Columns: []string{user.EventParticipantsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eventparticipant.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.EventParticipantsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.EventParticipantsTable,
			Columns: []string{user.EventParticipantsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eventparticipant.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	uu.mutation.done = true
	return n, nil
}

// UserUpdateOne is the builder for updating a single User entity.
type UserUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (uuo *UserUpdateOne) SetUpdatedAt(t time.Time) *UserUpdateOne {
	uuo.mutation.SetUpdatedAt(t)
	return uuo
}

// SetTelegramID sets the "telegram_id" field.
func (uuo *UserUpdateOne) SetTelegramID(i int64) *UserUpdateOne {
	uuo.mutation.ResetTelegramID()
	uuo.mutation.SetTelegramID(i)
	return uuo
}

// SetNillableTelegramID sets the "telegram_id" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableTelegramID(i *int64) *UserUpdateOne {
	if i != nil {
		uuo.SetTelegramID(*i)
	}
	return uuo
}

// AddTelegramID adds i to the "telegram_id" field.
func (uuo *UserUpdateOne) AddTelegramID(i int64) *UserUpdateOne {
	uuo.mutation.AddTelegramID(i)
	return uuo
}

// SetLocalization sets the "localization" field.
func (uuo *UserUpdateOne) SetLocalization(u user.Localization) *UserUpdateOne {
	uuo.mutation.SetLocalization(u)
	return uuo
}

// SetNillableLocalization sets the "localization" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableLocalization(u *user.Localization) *UserUpdateOne {
	if u != nil {
		uuo.SetLocalization(*u)
	}
	return uuo
}

// SetUsername sets the "username" field.
func (uuo *UserUpdateOne) SetUsername(s string) *UserUpdateOne {
	uuo.mutation.SetUsername(s)
	return uuo
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableUsername(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetUsername(*s)
	}
	return uuo
}

// ClearUsername clears the value of the "username" field.
func (uuo *UserUpdateOne) ClearUsername() *UserUpdateOne {
	uuo.mutation.ClearUsername()
	return uuo
}

// SetRole sets the "role" field.
func (uuo *UserUpdateOne) SetRole(v valueobject.Role) *UserUpdateOne {
	uuo.mutation.SetRole(v)
	return uuo
}

// SetNillableRole sets the "role" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableRole(v *valueobject.Role) *UserUpdateOne {
	if v != nil {
		uuo.SetRole(*v)
	}
	return uuo
}

// SetEmail sets the "email" field.
func (uuo *UserUpdateOne) SetEmail(v valueobject.Email) *UserUpdateOne {
	uuo.mutation.SetEmail(v)
	return uuo
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableEmail(v *valueobject.Email) *UserUpdateOne {
	if v != nil {
		uuo.SetEmail(*v)
	}
	return uuo
}

// ClearEmail clears the value of the "email" field.
func (uuo *UserUpdateOne) ClearEmail() *UserUpdateOne {
	uuo.mutation.ClearEmail()
	return uuo
}

// SetFio sets the "fio" field.
func (uuo *UserUpdateOne) SetFio(v valueobject.FIO) *UserUpdateOne {
	uuo.mutation.SetFio(v)
	return uuo
}

// SetNillableFio sets the "fio" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableFio(v *valueobject.FIO) *UserUpdateOne {
	if v != nil {
		uuo.SetFio(*v)
	}
	return uuo
}

// SetQrPayload sets the "qr_payload" field.
func (uuo *UserUpdateOne) SetQrPayload(u uuid.UUID) *UserUpdateOne {
	uuo.mutation.SetQrPayload(u)
	return uuo
}

// SetNillableQrPayload sets the "qr_payload" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableQrPayload(u *uuid.UUID) *UserUpdateOne {
	if u != nil {
		uuo.SetQrPayload(*u)
	}
	return uuo
}

// ClearQrPayload clears the value of the "qr_payload" field.
func (uuo *UserUpdateOne) ClearQrPayload() *UserUpdateOne {
	uuo.mutation.ClearQrPayload()
	return uuo
}

// SetQrFileID sets the "qr_file_id" field.
func (uuo *UserUpdateOne) SetQrFileID(s string) *UserUpdateOne {
	uuo.mutation.SetQrFileID(s)
	return uuo
}

// SetNillableQrFileID sets the "qr_file_id" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableQrFileID(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetQrFileID(*s)
	}
	return uuo
}

// ClearQrFileID clears the value of the "qr_file_id" field.
func (uuo *UserUpdateOne) ClearQrFileID() *UserUpdateOne {
	uuo.mutation.ClearQrFileID()
	return uuo
}

// SetIsBanned sets the "is_banned" field.
func (uuo *UserUpdateOne) SetIsBanned(b bool) *UserUpdateOne {
	uuo.mutation.SetIsBanned(b)
	return uuo
}

// SetNillableIsBanned sets the "is_banned" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableIsBanned(b *bool) *UserUpdateOne {
	if b != nil {
		uuo.SetIsBanned(*b)
	}
	return uuo
}

// AddOwnedClubIDs adds the "owned_clubs" edge to the Club entity by IDs.
func (uuo *UserUpdateOne) AddOwnedClubIDs(ids ...uuid.UUID) *UserUpdateOne {
	uuo.mutation.AddOwnedClubIDs(ids...)
	return uuo
}

// AddOwnedClubs adds the "owned_clubs" edges to the Club entity.
func (uuo *UserUpdateOne) AddOwnedClubs(c ...*Club) *UserUpdateOne {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uuo.AddOwnedClubIDs(ids...)
}

// AddEventIDs adds the "events" edge to the Event entity by IDs.
func (uuo *UserUpdateOne) AddEventIDs(ids ...uuid.UUID) *UserUpdateOne {
	uuo.mutation.AddEventIDs(ids...)
	return uuo
}

// AddEvents adds the "events" edges to the Event entity.
func (uuo *UserUpdateOne) AddEvents(e ...*Event) *UserUpdateOne {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return uuo.AddEventIDs(ids...)
}

// AddIgnoreMailingIDs adds the "ignore_mailings" edge to the IgnoreMailing entity by IDs.
func (uuo *UserUpdateOne) AddIgnoreMailingIDs(ids ...uuid.UUID) *UserUpdateOne {
	uuo.mutation.AddIgnoreMailingIDs(ids...)
	return uuo
}

// AddIgnoreMailings adds the "ignore_mailings" edges to the IgnoreMailing entity.
func (uuo *UserUpdateOne) AddIgnoreMailings(i ...*IgnoreMailing) *UserUpdateOne {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return uuo.AddIgnoreMailingIDs(ids...)
}

// AddNotificationIDs adds the "notifications" edge to the Notification entity by IDs.
func (uuo *UserUpdateOne) AddNotificationIDs(ids ...uuid.UUID) *UserUpdateOne {
	uuo.mutation.AddNotificationIDs(ids...)
	return uuo
}

// AddNotifications adds the "notifications" edges to the Notification entity.
func (uuo *UserUpdateOne) AddNotifications(n ...*Notification) *UserUpdateOne {
	ids := make([]uuid.UUID, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return uuo.AddNotificationIDs(ids...)
}

// AddPassIDs adds the "passes" edge to the Pass entity by IDs.
func (uuo *UserUpdateOne) AddPassIDs(ids ...uuid.UUID) *UserUpdateOne {
	uuo.mutation.AddPassIDs(ids...)
	return uuo
}

// AddPasses adds the "passes" edges to the Pass entity.
func (uuo *UserUpdateOne) AddPasses(p ...*Pass) *UserUpdateOne {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uuo.AddPassIDs(ids...)
}

// AddClubOwnerIDs adds the "club_owners" edge to the ClubOwner entity by IDs.
func (uuo *UserUpdateOne) AddClubOwnerIDs(ids ...uuid.UUID) *UserUpdateOne {
	uuo.mutation.AddClubOwnerIDs(ids...)
	return uuo
}

// AddClubOwners adds the "club_owners" edges to the ClubOwner entity.
func (uuo *UserUpdateOne) AddClubOwners(c ...*ClubOwner) *UserUpdateOne {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uuo.AddClubOwnerIDs(ids...)
}

// AddEventParticipantIDs adds the "event_participants" edge to the EventParticipant entity by IDs.
func (uuo *UserUpdateOne) AddEventParticipantIDs(ids ...uuid.UUID) *UserUpdateOne {
	uuo.mutation.AddEventParticipantIDs(ids...)
	return uuo
}

// AddEventParticipants adds the "event_participants" edges to the EventParticipant entity.
func (uuo *UserUpdateOne) AddEventParticipants(e ...*EventParticipant) *UserUpdateOne {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return uuo.AddEventParticipantIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (uuo *UserUpdateOne) Mutation() *UserMutation {
	return uuo.mutation
}

// ClearOwnedClubs clears all "owned_clubs" edges to the Club entity.
func (uuo *UserUpdateOne) ClearOwnedClubs() *UserUpdateOne {
	uuo.mutation.ClearOwnedClubs()
	return uuo
}

// RemoveOwnedClubIDs removes the "owned_clubs" edge to Club entities by IDs.
func (uuo *UserUpdateOne) RemoveOwnedClubIDs(ids ...uuid.UUID) *UserUpdateOne {
	uuo.mutation.RemoveOwnedClubIDs(ids...)
	return uuo
}

// RemoveOwnedClubs removes "owned_clubs" edges to Club entities.
func (uuo *UserUpdateOne) RemoveOwnedClubs(c ...*Club) *UserUpdateOne {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uuo.RemoveOwnedClubIDs(ids...)
}

// ClearEvents clears all "events" edges to the Event entity.
func (uuo *UserUpdateOne) ClearEvents() *UserUpdateOne {
	uuo.mutation.ClearEvents()
	return uuo
}

// RemoveEventIDs removes the "events" edge to Event entities by IDs.
func (uuo *UserUpdateOne) RemoveEventIDs(ids ...uuid.UUID) *UserUpdateOne {
	uuo.mutation.RemoveEventIDs(ids...)
	return uuo
}

// RemoveEvents removes "events" edges to Event entities.
func (uuo *UserUpdateOne) RemoveEvents(e ...*Event) *UserUpdateOne {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return uuo.RemoveEventIDs(ids...)
}

// ClearIgnoreMailings clears all "ignore_mailings" edges to the IgnoreMailing entity.
func (uuo *UserUpdateOne) ClearIgnoreMailings() *UserUpdateOne {
	uuo.mutation.ClearIgnoreMailings()
	return uuo
}

// RemoveIgnoreMailingIDs removes the "ignore_mailings" edge to IgnoreMailing entities by IDs.
func (uuo *UserUpdateOne) RemoveIgnoreMailingIDs(ids ...uuid.UUID) *UserUpdateOne {
	uuo.mutation.RemoveIgnoreMailingIDs(ids...)
	return uuo
}

// RemoveIgnoreMailings removes "ignore_mailings" edges to IgnoreMailing entities.
func (uuo *UserUpdateOne) RemoveIgnoreMailings(i ...*IgnoreMailing) *UserUpdateOne {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return uuo.RemoveIgnoreMailingIDs(ids...)
}

// ClearNotifications clears all "notifications" edges to the Notification entity.
func (uuo *UserUpdateOne) ClearNotifications() *UserUpdateOne {
	uuo.mutation.ClearNotifications()
	return uuo
}

// RemoveNotificationIDs removes the "notifications" edge to Notification entities by IDs.
func (uuo *UserUpdateOne) RemoveNotificationIDs(ids ...uuid.UUID) *UserUpdateOne {
	uuo.mutation.RemoveNotificationIDs(ids...)
	return uuo
}

// RemoveNotifications removes "notifications" edges to Notification entities.
func (uuo *UserUpdateOne) RemoveNotifications(n ...*Notification) *UserUpdateOne {
	ids := make([]uuid.UUID, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return uuo.RemoveNotificationIDs(ids...)
}

// ClearPasses clears all "passes" edges to the Pass entity.
func (uuo *UserUpdateOne) ClearPasses() *UserUpdateOne {
	uuo.mutation.ClearPasses()
	return uuo
}

// RemovePassIDs removes the "passes" edge to Pass entities by IDs.
func (uuo *UserUpdateOne) RemovePassIDs(ids ...uuid.UUID) *UserUpdateOne {
	uuo.mutation.RemovePassIDs(ids...)
	return uuo
}

// RemovePasses removes "passes" edges to Pass entities.
func (uuo *UserUpdateOne) RemovePasses(p ...*Pass) *UserUpdateOne {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uuo.RemovePassIDs(ids...)
}

// ClearClubOwners clears all "club_owners" edges to the ClubOwner entity.
func (uuo *UserUpdateOne) ClearClubOwners() *UserUpdateOne {
	uuo.mutation.ClearClubOwners()
	return uuo
}

// RemoveClubOwnerIDs removes the "club_owners" edge to ClubOwner entities by IDs.
func (uuo *UserUpdateOne) RemoveClubOwnerIDs(ids ...uuid.UUID) *UserUpdateOne {
	uuo.mutation.RemoveClubOwnerIDs(ids...)
	return uuo
}

// RemoveClubOwners removes "club_owners" edges to ClubOwner entities.
func (uuo *UserUpdateOne) RemoveClubOwners(c ...*ClubOwner) *UserUpdateOne {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uuo.RemoveClubOwnerIDs(ids...)
}

// ClearEventParticipants clears all "event_participants" edges to the EventParticipant entity.
func (uuo *UserUpdateOne) ClearEventParticipants() *UserUpdateOne {
	uuo.mutation.ClearEventParticipants()
	return uuo
}

// RemoveEventParticipantIDs removes the "event_participants" edge to EventParticipant entities by IDs.
func (uuo *UserUpdateOne) RemoveEventParticipantIDs(ids ...uuid.UUID) *UserUpdateOne {
	uuo.mutation.RemoveEventParticipantIDs(ids...)
	return uuo
}

// RemoveEventParticipants removes "event_participants" edges to EventParticipant entities.
func (uuo *UserUpdateOne) RemoveEventParticipants(e ...*EventParticipant) *UserUpdateOne {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return uuo.RemoveEventParticipantIDs(ids...)
}

// Where appends a list predicates to the UserUpdate builder.
func (uuo *UserUpdateOne) Where(ps ...predicate.User) *UserUpdateOne {
	uuo.mutation.Where(ps...)
	return uuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uuo *UserUpdateOne) Select(field string, fields ...string) *UserUpdateOne {
	uuo.fields = append([]string{field}, fields...)
	return uuo
}

// Save executes the query and returns the updated User entity.
func (uuo *UserUpdateOne) Save(ctx context.Context) (*User, error) {
	uuo.defaults()
	return withHooks(ctx, uuo.sqlSave, uuo.mutation, uuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uuo *UserUpdateOne) SaveX(ctx context.Context) *User {
	node, err := uuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uuo *UserUpdateOne) Exec(ctx context.Context) error {
	_, err := uuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uuo *UserUpdateOne) ExecX(ctx context.Context) {
	if err := uuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uuo *UserUpdateOne) defaults() {
	if _, ok := uuo.mutation.UpdatedAt(); !ok {
		v := user.UpdateDefaultUpdatedAt()
		uuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uuo *UserUpdateOne) check() error {
	if v, ok := uuo.mutation.TelegramID(); ok {
		if err := user.TelegramIDValidator(v); err != nil {
			return &ValidationError{Name: "telegram_id", err: fmt.Errorf(`ent: validator failed for field "User.telegram_id": %w`, err)}
		}
	}
	if v, ok := uuo.mutation.Localization(); ok {
		if err := user.LocalizationValidator(v); err != nil {
			return &ValidationError{Name: "localization", err: fmt.Errorf(`ent: validator failed for field "User.localization": %w`, err)}
		}
	}
	if v, ok := uuo.mutation.Role(); ok {
		if err := user.RoleValidator(v); err != nil {
			return &ValidationError{Name: "role", err: fmt.Errorf(`ent: validator failed for field "User.role": %w`, err)}
		}
	}
	return nil
}

func (uuo *UserUpdateOne) sqlSave(ctx context.Context) (_node *User, err error) {
	if err := uuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID))
	id, ok := uuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "User.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, user.FieldID)
		for _, f := range fields {
			if !user.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != user.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uuo.mutation.UpdatedAt(); ok {
		_spec.SetField(user.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := uuo.mutation.TelegramID(); ok {
		_spec.SetField(user.FieldTelegramID, field.TypeInt64, value)
	}
	if value, ok := uuo.mutation.AddedTelegramID(); ok {
		_spec.AddField(user.FieldTelegramID, field.TypeInt64, value)
	}
	if value, ok := uuo.mutation.Localization(); ok {
		_spec.SetField(user.FieldLocalization, field.TypeEnum, value)
	}
	if value, ok := uuo.mutation.Username(); ok {
		_spec.SetField(user.FieldUsername, field.TypeString, value)
	}
	if uuo.mutation.UsernameCleared() {
		_spec.ClearField(user.FieldUsername, field.TypeString)
	}
	if value, ok := uuo.mutation.Role(); ok {
		_spec.SetField(user.FieldRole, field.TypeEnum, value)
	}
	if value, ok := uuo.mutation.Email(); ok {
		_spec.SetField(user.FieldEmail, field.TypeString, value)
	}
	if uuo.mutation.EmailCleared() {
		_spec.ClearField(user.FieldEmail, field.TypeString)
	}
	if value, ok := uuo.mutation.Fio(); ok {
		_spec.SetField(user.FieldFio, field.TypeString, value)
	}
	if value, ok := uuo.mutation.QrPayload(); ok {
		_spec.SetField(user.FieldQrPayload, field.TypeUUID, value)
	}
	if uuo.mutation.QrPayloadCleared() {
		_spec.ClearField(user.FieldQrPayload, field.TypeUUID)
	}
	if value, ok := uuo.mutation.QrFileID(); ok {
		_spec.SetField(user.FieldQrFileID, field.TypeString, value)
	}
	if uuo.mutation.QrFileIDCleared() {
		_spec.ClearField(user.FieldQrFileID, field.TypeString)
	}
	if value, ok := uuo.mutation.IsBanned(); ok {
		_spec.SetField(user.FieldIsBanned, field.TypeBool, value)
	}
	if uuo.mutation.OwnedClubsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.OwnedClubsTable,
			Columns: user.OwnedClubsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(club.FieldID, field.TypeUUID),
			},
		}
		createE := &ClubOwnerCreate{config: uuo.config, mutation: newClubOwnerMutation(uuo.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedOwnedClubsIDs(); len(nodes) > 0 && !uuo.mutation.OwnedClubsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.OwnedClubsTable,
			Columns: user.OwnedClubsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(club.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &ClubOwnerCreate{config: uuo.config, mutation: newClubOwnerMutation(uuo.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.OwnedClubsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.OwnedClubsTable,
			Columns: user.OwnedClubsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(club.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &ClubOwnerCreate{config: uuo.config, mutation: newClubOwnerMutation(uuo.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.EventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.EventsTable,
			Columns: user.EventsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeUUID),
			},
		}
		createE := &EventParticipantCreate{config: uuo.config, mutation: newEventParticipantMutation(uuo.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedEventsIDs(); len(nodes) > 0 && !uuo.mutation.EventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.EventsTable,
			Columns: user.EventsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &EventParticipantCreate{config: uuo.config, mutation: newEventParticipantMutation(uuo.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.EventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.EventsTable,
			Columns: user.EventsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &EventParticipantCreate{config: uuo.config, mutation: newEventParticipantMutation(uuo.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.IgnoreMailingsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.IgnoreMailingsTable,
			Columns: []string{user.IgnoreMailingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ignoremailing.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedIgnoreMailingsIDs(); len(nodes) > 0 && !uuo.mutation.IgnoreMailingsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.IgnoreMailingsTable,
			Columns: []string{user.IgnoreMailingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ignoremailing.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.IgnoreMailingsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.IgnoreMailingsTable,
			Columns: []string{user.IgnoreMailingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ignoremailing.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.NotificationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.NotificationsTable,
			Columns: []string{user.NotificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedNotificationsIDs(); len(nodes) > 0 && !uuo.mutation.NotificationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.NotificationsTable,
			Columns: []string{user.NotificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.NotificationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.NotificationsTable,
			Columns: []string{user.NotificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.PassesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.PassesTable,
			Columns: []string{user.PassesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pass.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedPassesIDs(); len(nodes) > 0 && !uuo.mutation.PassesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.PassesTable,
			Columns: []string{user.PassesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pass.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.PassesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.PassesTable,
			Columns: []string{user.PassesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pass.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.ClubOwnersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.ClubOwnersTable,
			Columns: []string{user.ClubOwnersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(clubowner.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedClubOwnersIDs(); len(nodes) > 0 && !uuo.mutation.ClubOwnersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.ClubOwnersTable,
			Columns: []string{user.ClubOwnersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(clubowner.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.ClubOwnersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.ClubOwnersTable,
			Columns: []string{user.ClubOwnersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(clubowner.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.EventParticipantsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.EventParticipantsTable,
			Columns: []string{user.EventParticipantsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eventparticipant.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedEventParticipantsIDs(); len(nodes) > 0 && !uuo.mutation.EventParticipantsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.EventParticipantsTable,
			Columns: []string{user.EventParticipantsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eventparticipant.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.EventParticipantsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.EventParticipantsTable,
			Columns: []string{user.EventParticipantsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eventparticipant.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &User{config: uuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	uuo.mutation.done = true
	return _node, nil
}
