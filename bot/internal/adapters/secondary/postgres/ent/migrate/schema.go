// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/entsql"
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// ClubsColumns holds the columns for the "clubs" table.
	ClubsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "name", Type: field.TypeString, Unique: true},
		{Name: "description", Type: field.TypeString, Nullable: true},
		{Name: "link", Type: field.TypeString, Nullable: true},
		{Name: "avatar_id", Type: field.TypeString, Nullable: true},
		{Name: "intro_id", Type: field.TypeString, Nullable: true},
		{Name: "visible_in_tour", Type: field.TypeBool, Default: false},
		{Name: "allowed_roles", Type: field.TypeJSON, Nullable: true},
		{Name: "qr_allowed", Type: field.TypeBool, Default: false},
	}
	// ClubsTable holds the schema information for the "clubs" table.
	ClubsTable = &schema.Table{
		Name:       "clubs",
		Columns:    ClubsColumns,
		PrimaryKey: []*schema.Column{ClubsColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "club_deleted_at",
				Unique:  false,
				Columns: []*schema.Column{ClubsColumns[1]},
				Annotation: &entsql.IndexAnnotation{
					Where: "deleted_at IS NULL",
				},
			},
			{
				Name:    "club_visible_in_tour",
				Unique:  false,
				Columns: []*schema.Column{ClubsColumns[9]},
			},
			{
				Name:    "club_allowed_roles",
				Unique:  false,
				Columns: []*schema.Column{ClubsColumns[10]},
				Annotation: &entsql.IndexAnnotation{
					Type: "GIN",
				},
			},
		},
	}
	// ClubOwnersColumns holds the columns for the "club_owners" table.
	ClubOwnersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "warnings", Type: field.TypeBool, Default: false},
		{Name: "user_id", Type: field.TypeUUID},
		{Name: "club_id", Type: field.TypeUUID},
	}
	// ClubOwnersTable holds the schema information for the "club_owners" table.
	ClubOwnersTable = &schema.Table{
		Name:       "club_owners",
		Columns:    ClubOwnersColumns,
		PrimaryKey: []*schema.Column{ClubOwnersColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "club_owners_users_user",
				Columns:    []*schema.Column{ClubOwnersColumns[5]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "club_owners_clubs_club",
				Columns:    []*schema.Column{ClubOwnersColumns[6]},
				RefColumns: []*schema.Column{ClubsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "clubowner_deleted_at",
				Unique:  false,
				Columns: []*schema.Column{ClubOwnersColumns[1]},
				Annotation: &entsql.IndexAnnotation{
					Where: "deleted_at IS NULL",
				},
			},
			{
				Name:    "clubowner_user_id_club_id",
				Unique:  true,
				Columns: []*schema.Column{ClubOwnersColumns[5], ClubOwnersColumns[6]},
			},
		},
	}
	// EventsColumns holds the columns for the "events" table.
	EventsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "name", Type: field.TypeString},
		{Name: "description", Type: field.TypeString, Nullable: true},
		{Name: "after_registration_text", Type: field.TypeString, Nullable: true},
		{Name: "location", Type: field.TypeString},
		{Name: "start_time", Type: field.TypeTime},
		{Name: "end_time", Type: field.TypeTime, Nullable: true},
		{Name: "registration_end_time", Type: field.TypeTime},
		{Name: "max_participants", Type: field.TypeInt, Nullable: true},
		{Name: "expected_participants", Type: field.TypeInt, Nullable: true},
		{Name: "qr_payload", Type: field.TypeUUID, Unique: true, Nullable: true},
		{Name: "qr_file_id", Type: field.TypeString, Nullable: true},
		{Name: "allowed_roles", Type: field.TypeJSON, Nullable: true},
		{Name: "pass_required", Type: field.TypeBool, Default: false},
		{Name: "club_id", Type: field.TypeUUID},
	}
	// EventsTable holds the schema information for the "events" table.
	EventsTable = &schema.Table{
		Name:       "events",
		Columns:    EventsColumns,
		PrimaryKey: []*schema.Column{EventsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "events_clubs_events",
				Columns:    []*schema.Column{EventsColumns[17]},
				RefColumns: []*schema.Column{ClubsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "event_deleted_at",
				Unique:  false,
				Columns: []*schema.Column{EventsColumns[1]},
				Annotation: &entsql.IndexAnnotation{
					Where: "deleted_at IS NULL",
				},
			},
			{
				Name:    "event_qr_payload",
				Unique:  true,
				Columns: []*schema.Column{EventsColumns[13]},
			},
			{
				Name:    "event_club_id_start_time",
				Unique:  false,
				Columns: []*schema.Column{EventsColumns[17], EventsColumns[8]},
			},
			{
				Name:    "event_allowed_roles",
				Unique:  false,
				Columns: []*schema.Column{EventsColumns[15]},
				Annotation: &entsql.IndexAnnotation{
					Type: "GIN",
				},
			},
			{
				Name:    "event_registration_end_time",
				Unique:  false,
				Columns: []*schema.Column{EventsColumns[10]},
			},
		},
	}
	// EventParticipantsColumns holds the columns for the "event_participants" table.
	EventParticipantsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "attendance_method", Type: field.TypeEnum, Enums: []string{"not_visited", "user_qr", "event_qr"}, Default: "not_visited"},
		{Name: "attended_at", Type: field.TypeTime, Nullable: true},
		{Name: "event_id", Type: field.TypeUUID},
		{Name: "user_id", Type: field.TypeUUID},
	}
	// EventParticipantsTable holds the schema information for the "event_participants" table.
	EventParticipantsTable = &schema.Table{
		Name:       "event_participants",
		Columns:    EventParticipantsColumns,
		PrimaryKey: []*schema.Column{EventParticipantsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "event_participants_events_event",
				Columns:    []*schema.Column{EventParticipantsColumns[6]},
				RefColumns: []*schema.Column{EventsColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "event_participants_users_user",
				Columns:    []*schema.Column{EventParticipantsColumns[7]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "eventparticipant_deleted_at",
				Unique:  false,
				Columns: []*schema.Column{EventParticipantsColumns[1]},
				Annotation: &entsql.IndexAnnotation{
					Where: "deleted_at IS NULL",
				},
			},
			{
				Name:    "eventparticipant_user_id_event_id",
				Unique:  true,
				Columns: []*schema.Column{EventParticipantsColumns[7], EventParticipantsColumns[6]},
			},
		},
	}
	// IgnoreMailingsColumns holds the columns for the "ignore_mailings" table.
	IgnoreMailingsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "club_id", Type: field.TypeUUID},
		{Name: "user_id", Type: field.TypeUUID},
	}
	// IgnoreMailingsTable holds the schema information for the "ignore_mailings" table.
	IgnoreMailingsTable = &schema.Table{
		Name:       "ignore_mailings",
		Columns:    IgnoreMailingsColumns,
		PrimaryKey: []*schema.Column{IgnoreMailingsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "ignore_mailings_clubs_ignore_mailings",
				Columns:    []*schema.Column{IgnoreMailingsColumns[4]},
				RefColumns: []*schema.Column{ClubsColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "ignore_mailings_users_ignore_mailings",
				Columns:    []*schema.Column{IgnoreMailingsColumns[5]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "ignoremailing_deleted_at",
				Unique:  false,
				Columns: []*schema.Column{IgnoreMailingsColumns[1]},
				Annotation: &entsql.IndexAnnotation{
					Where: "deleted_at IS NULL",
				},
			},
			{
				Name:    "ignoremailing_user_id_club_id",
				Unique:  true,
				Columns: []*schema.Column{IgnoreMailingsColumns[5], IgnoreMailingsColumns[4]},
			},
		},
	}
	// NotificationsColumns holds the columns for the "notifications" table.
	NotificationsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "type", Type: field.TypeEnum, Enums: []string{"day", "hour"}},
		{Name: "event_id", Type: field.TypeUUID},
		{Name: "user_id", Type: field.TypeUUID},
	}
	// NotificationsTable holds the schema information for the "notifications" table.
	NotificationsTable = &schema.Table{
		Name:       "notifications",
		Columns:    NotificationsColumns,
		PrimaryKey: []*schema.Column{NotificationsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "notifications_events_event",
				Columns:    []*schema.Column{NotificationsColumns[5]},
				RefColumns: []*schema.Column{EventsColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "notifications_users_user",
				Columns:    []*schema.Column{NotificationsColumns[6]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "notification_deleted_at",
				Unique:  false,
				Columns: []*schema.Column{NotificationsColumns[1]},
				Annotation: &entsql.IndexAnnotation{
					Where: "deleted_at IS NULL",
				},
			},
			{
				Name:    "notification_user_id_event_id",
				Unique:  true,
				Columns: []*schema.Column{NotificationsColumns[6], NotificationsColumns[5]},
			},
		},
	}
	// PassesColumns holds the columns for the "passes" table.
	PassesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "type", Type: field.TypeEnum, Enums: []string{"event", "manual", "api"}, Default: "event"},
		{Name: "status", Type: field.TypeEnum, Enums: []string{"pending", "sent", "cancelled"}, Default: "pending"},
		{Name: "requester_type", Type: field.TypeEnum, Enums: []string{"user", "admin", "club"}, Default: "user"},
		{Name: "requester_id", Type: field.TypeUUID, Nullable: true},
		{Name: "scheduled_at", Type: field.TypeTime},
		{Name: "sent_at", Type: field.TypeTime, Nullable: true},
		{Name: "notes", Type: field.TypeString, Nullable: true},
		{Name: "email_sent", Type: field.TypeBool, Default: false},
		{Name: "telegram_sent", Type: field.TypeBool, Default: false},
		{Name: "event_id", Type: field.TypeUUID},
		{Name: "user_id", Type: field.TypeUUID},
	}
	// PassesTable holds the schema information for the "passes" table.
	PassesTable = &schema.Table{
		Name:       "passes",
		Columns:    PassesColumns,
		PrimaryKey: []*schema.Column{PassesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "passes_events_event",
				Columns:    []*schema.Column{PassesColumns[12]},
				RefColumns: []*schema.Column{EventsColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "passes_users_user",
				Columns:    []*schema.Column{PassesColumns[13]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "pass_event_id_user_id_status",
				Unique:  true,
				Columns: []*schema.Column{PassesColumns[12], PassesColumns[13], PassesColumns[4]},
				Annotation: &entsql.IndexAnnotation{
					Where: "status != 'cancelled'",
				},
			},
			{
				Name:    "pass_status_scheduled_at",
				Unique:  false,
				Columns: []*schema.Column{PassesColumns[4], PassesColumns[7]},
			},
		},
	}
	// UsersColumns holds the columns for the "users" table.
	UsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "telegram_id", Type: field.TypeInt64, Unique: true},
		{Name: "localization", Type: field.TypeEnum, Enums: []string{"ru"}, Default: "ru"},
		{Name: "username", Type: field.TypeString, Nullable: true},
		{Name: "role", Type: field.TypeEnum, Enums: []string{"external_user", "grant_user", "student"}},
		{Name: "email", Type: field.TypeString, Unique: true, Nullable: true},
		{Name: "fio", Type: field.TypeString},
		{Name: "qr_payload", Type: field.TypeUUID, Unique: true, Nullable: true},
		{Name: "qr_file_id", Type: field.TypeString, Nullable: true},
		{Name: "is_banned", Type: field.TypeBool, Default: false},
	}
	// UsersTable holds the schema information for the "users" table.
	UsersTable = &schema.Table{
		Name:       "users",
		Columns:    UsersColumns,
		PrimaryKey: []*schema.Column{UsersColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "user_is_banned",
				Unique:  false,
				Columns: []*schema.Column{UsersColumns[11]},
			},
			{
				Name:    "user_role",
				Unique:  false,
				Columns: []*schema.Column{UsersColumns[6]},
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		ClubsTable,
		ClubOwnersTable,
		EventsTable,
		EventParticipantsTable,
		IgnoreMailingsTable,
		NotificationsTable,
		PassesTable,
		UsersTable,
	}
)

func init() {
	ClubOwnersTable.ForeignKeys[0].RefTable = UsersTable
	ClubOwnersTable.ForeignKeys[1].RefTable = ClubsTable
	EventsTable.ForeignKeys[0].RefTable = ClubsTable
	EventsTable.Annotation = &entsql.Annotation{}
	EventsTable.Annotation.Checks = map[string]string{
		"end_time_after_start": "end_time IS NULL OR end_time > start_time",
		"reg_before_start":     "registration_end_time <= start_time",
	}
	EventParticipantsTable.ForeignKeys[0].RefTable = EventsTable
	EventParticipantsTable.ForeignKeys[1].RefTable = UsersTable
	IgnoreMailingsTable.ForeignKeys[0].RefTable = ClubsTable
	IgnoreMailingsTable.ForeignKeys[1].RefTable = UsersTable
	NotificationsTable.ForeignKeys[0].RefTable = EventsTable
	NotificationsTable.ForeignKeys[1].RefTable = UsersTable
	PassesTable.ForeignKeys[0].RefTable = EventsTable
	PassesTable.ForeignKeys[1].RefTable = UsersTable
}
