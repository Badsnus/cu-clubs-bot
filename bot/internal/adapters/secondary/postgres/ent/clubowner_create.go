// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"

	"github.com/Badsnus/cu-clubs-bot/bot/internal/adapters/secondary/postgres/ent/club"
	"github.com/Badsnus/cu-clubs-bot/bot/internal/adapters/secondary/postgres/ent/clubowner"
	"github.com/Badsnus/cu-clubs-bot/bot/internal/adapters/secondary/postgres/ent/user"
)

// ClubOwnerCreate is the builder for creating a ClubOwner entity.
type ClubOwnerCreate struct {
	config
	mutation *ClubOwnerMutation
	hooks    []Hook
}

// SetDeletedAt sets the "deleted_at" field.
func (coc *ClubOwnerCreate) SetDeletedAt(t time.Time) *ClubOwnerCreate {
	coc.mutation.SetDeletedAt(t)
	return coc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (coc *ClubOwnerCreate) SetNillableDeletedAt(t *time.Time) *ClubOwnerCreate {
	if t != nil {
		coc.SetDeletedAt(*t)
	}
	return coc
}

// SetCreatedAt sets the "created_at" field.
func (coc *ClubOwnerCreate) SetCreatedAt(t time.Time) *ClubOwnerCreate {
	coc.mutation.SetCreatedAt(t)
	return coc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (coc *ClubOwnerCreate) SetNillableCreatedAt(t *time.Time) *ClubOwnerCreate {
	if t != nil {
		coc.SetCreatedAt(*t)
	}
	return coc
}

// SetUpdatedAt sets the "updated_at" field.
func (coc *ClubOwnerCreate) SetUpdatedAt(t time.Time) *ClubOwnerCreate {
	coc.mutation.SetUpdatedAt(t)
	return coc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (coc *ClubOwnerCreate) SetNillableUpdatedAt(t *time.Time) *ClubOwnerCreate {
	if t != nil {
		coc.SetUpdatedAt(*t)
	}
	return coc
}

// SetUserID sets the "user_id" field.
func (coc *ClubOwnerCreate) SetUserID(u uuid.UUID) *ClubOwnerCreate {
	coc.mutation.SetUserID(u)
	return coc
}

// SetClubID sets the "club_id" field.
func (coc *ClubOwnerCreate) SetClubID(u uuid.UUID) *ClubOwnerCreate {
	coc.mutation.SetClubID(u)
	return coc
}

// SetWarnings sets the "warnings" field.
func (coc *ClubOwnerCreate) SetWarnings(b bool) *ClubOwnerCreate {
	coc.mutation.SetWarnings(b)
	return coc
}

// SetNillableWarnings sets the "warnings" field if the given value is not nil.
func (coc *ClubOwnerCreate) SetNillableWarnings(b *bool) *ClubOwnerCreate {
	if b != nil {
		coc.SetWarnings(*b)
	}
	return coc
}

// SetID sets the "id" field.
func (coc *ClubOwnerCreate) SetID(u uuid.UUID) *ClubOwnerCreate {
	coc.mutation.SetID(u)
	return coc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (coc *ClubOwnerCreate) SetNillableID(u *uuid.UUID) *ClubOwnerCreate {
	if u != nil {
		coc.SetID(*u)
	}
	return coc
}

// SetUser sets the "user" edge to the User entity.
func (coc *ClubOwnerCreate) SetUser(u *User) *ClubOwnerCreate {
	return coc.SetUserID(u.ID)
}

// SetClub sets the "club" edge to the Club entity.
func (coc *ClubOwnerCreate) SetClub(c *Club) *ClubOwnerCreate {
	return coc.SetClubID(c.ID)
}

// Mutation returns the ClubOwnerMutation object of the builder.
func (coc *ClubOwnerCreate) Mutation() *ClubOwnerMutation {
	return coc.mutation
}

// Save creates the ClubOwner in the database.
func (coc *ClubOwnerCreate) Save(ctx context.Context) (*ClubOwner, error) {
	if err := coc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, coc.sqlSave, coc.mutation, coc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (coc *ClubOwnerCreate) SaveX(ctx context.Context) *ClubOwner {
	v, err := coc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (coc *ClubOwnerCreate) Exec(ctx context.Context) error {
	_, err := coc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (coc *ClubOwnerCreate) ExecX(ctx context.Context) {
	if err := coc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (coc *ClubOwnerCreate) defaults() error {
	if _, ok := coc.mutation.CreatedAt(); !ok {
		v := clubowner.DefaultCreatedAt
		coc.mutation.SetCreatedAt(v)
	}
	if _, ok := coc.mutation.UpdatedAt(); !ok {
		v := clubowner.DefaultUpdatedAt
		coc.mutation.SetUpdatedAt(v)
	}
	if _, ok := coc.mutation.Warnings(); !ok {
		v := clubowner.DefaultWarnings
		coc.mutation.SetWarnings(v)
	}
	if _, ok := coc.mutation.ID(); !ok {
		if clubowner.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized clubowner.DefaultID (forgotten import ent/runtime?)")
		}
		v := clubowner.DefaultID()
		coc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (coc *ClubOwnerCreate) check() error {
	if _, ok := coc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "ClubOwner.created_at"`)}
	}
	if _, ok := coc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "ClubOwner.updated_at"`)}
	}
	if _, ok := coc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "ClubOwner.user_id"`)}
	}
	if _, ok := coc.mutation.ClubID(); !ok {
		return &ValidationError{Name: "club_id", err: errors.New(`ent: missing required field "ClubOwner.club_id"`)}
	}
	if _, ok := coc.mutation.Warnings(); !ok {
		return &ValidationError{Name: "warnings", err: errors.New(`ent: missing required field "ClubOwner.warnings"`)}
	}
	if len(coc.mutation.UserIDs()) == 0 {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "ClubOwner.user"`)}
	}
	if len(coc.mutation.ClubIDs()) == 0 {
		return &ValidationError{Name: "club", err: errors.New(`ent: missing required edge "ClubOwner.club"`)}
	}
	return nil
}

func (coc *ClubOwnerCreate) sqlSave(ctx context.Context) (*ClubOwner, error) {
	if err := coc.check(); err != nil {
		return nil, err
	}
	_node, _spec := coc.createSpec()
	if err := sqlgraph.CreateNode(ctx, coc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	coc.mutation.id = &_node.ID
	coc.mutation.done = true
	return _node, nil
}

func (coc *ClubOwnerCreate) createSpec() (*ClubOwner, *sqlgraph.CreateSpec) {
	var (
		_node = &ClubOwner{config: coc.config}
		_spec = sqlgraph.NewCreateSpec(clubowner.Table, sqlgraph.NewFieldSpec(clubowner.FieldID, field.TypeUUID))
	)
	if id, ok := coc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := coc.mutation.DeletedAt(); ok {
		_spec.SetField(clubowner.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := coc.mutation.CreatedAt(); ok {
		_spec.SetField(clubowner.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := coc.mutation.UpdatedAt(); ok {
		_spec.SetField(clubowner.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := coc.mutation.Warnings(); ok {
		_spec.SetField(clubowner.FieldWarnings, field.TypeBool, value)
		_node.Warnings = value
	}
	if nodes := coc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   clubowner.UserTable,
			Columns: []string{clubowner.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := coc.mutation.ClubIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   clubowner.ClubTable,
			Columns: []string{clubowner.ClubColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(club.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ClubID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ClubOwnerCreateBulk is the builder for creating many ClubOwner entities in bulk.
type ClubOwnerCreateBulk struct {
	config
	err      error
	builders []*ClubOwnerCreate
}

// Save creates the ClubOwner entities in the database.
func (cocb *ClubOwnerCreateBulk) Save(ctx context.Context) ([]*ClubOwner, error) {
	if cocb.err != nil {
		return nil, cocb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(cocb.builders))
	nodes := make([]*ClubOwner, len(cocb.builders))
	mutators := make([]Mutator, len(cocb.builders))
	for i := range cocb.builders {
		func(i int, root context.Context) {
			builder := cocb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ClubOwnerMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cocb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cocb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cocb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cocb *ClubOwnerCreateBulk) SaveX(ctx context.Context) []*ClubOwner {
	v, err := cocb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cocb *ClubOwnerCreateBulk) Exec(ctx context.Context) error {
	_, err := cocb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cocb *ClubOwnerCreateBulk) ExecX(ctx context.Context) {
	if err := cocb.Exec(ctx); err != nil {
		panic(err)
	}
}
