// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"

	"github.com/Badsnus/cu-clubs-bot/bot/internal/adapters/secondary/postgres/ent/club"
	"github.com/Badsnus/cu-clubs-bot/bot/internal/domain/valueobject"
)

// Club is the model entity for the Club schema.
type Club struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Название клуба
	Name string `json:"name,omitempty"`
	// Описание клуба
	Description string `json:"description,omitempty"`
	// Ссылка в профиле клуба (Например ссылка на канал/чат)
	Link string `json:"link,omitempty"`
	// id изображения которое отображается в профиле клуба
	AvatarID string `json:"avatar_id,omitempty"`
	// id кружка клуба который отправлятся перед профилем
	IntroID string `json:"intro_id,omitempty"`
	// Виден ли клуб в туре
	VisibleInTour bool `json:"visible_in_tour,omitempty"`
	// Роли для которых клуб может создавать Event
	AllowedRoles valueobject.Roles `json:"allowed_roles,omitempty"`
	// Разрешено ли использование qr-кода мероприятия
	QrAllowed bool `json:"qr_allowed,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ClubQuery when eager-loading is set.
	Edges        ClubEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ClubEdges holds the relations/edges for other nodes in the graph.
type ClubEdges struct {
	// Events holds the value of the events edge.
	Events []*Event `json:"events,omitempty"`
	// Owners holds the value of the owners edge.
	Owners []*User `json:"owners,omitempty"`
	// IgnoreMailings holds the value of the ignore_mailings edge.
	IgnoreMailings []*IgnoreMailing `json:"ignore_mailings,omitempty"`
	// ClubOwners holds the value of the club_owners edge.
	ClubOwners []*ClubOwner `json:"club_owners,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// EventsOrErr returns the Events value or an error if the edge
// was not loaded in eager-loading.
func (e ClubEdges) EventsOrErr() ([]*Event, error) {
	if e.loadedTypes[0] {
		return e.Events, nil
	}
	return nil, &NotLoadedError{edge: "events"}
}

// OwnersOrErr returns the Owners value or an error if the edge
// was not loaded in eager-loading.
func (e ClubEdges) OwnersOrErr() ([]*User, error) {
	if e.loadedTypes[1] {
		return e.Owners, nil
	}
	return nil, &NotLoadedError{edge: "owners"}
}

// IgnoreMailingsOrErr returns the IgnoreMailings value or an error if the edge
// was not loaded in eager-loading.
func (e ClubEdges) IgnoreMailingsOrErr() ([]*IgnoreMailing, error) {
	if e.loadedTypes[2] {
		return e.IgnoreMailings, nil
	}
	return nil, &NotLoadedError{edge: "ignore_mailings"}
}

// ClubOwnersOrErr returns the ClubOwners value or an error if the edge
// was not loaded in eager-loading.
func (e ClubEdges) ClubOwnersOrErr() ([]*ClubOwner, error) {
	if e.loadedTypes[3] {
		return e.ClubOwners, nil
	}
	return nil, &NotLoadedError{edge: "club_owners"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Club) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case club.FieldAllowedRoles:
			values[i] = new([]byte)
		case club.FieldVisibleInTour, club.FieldQrAllowed:
			values[i] = new(sql.NullBool)
		case club.FieldName, club.FieldDescription, club.FieldLink, club.FieldAvatarID, club.FieldIntroID:
			values[i] = new(sql.NullString)
		case club.FieldDeletedAt, club.FieldCreatedAt, club.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case club.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Club fields.
func (c *Club) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case club.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				c.ID = *value
			}
		case club.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				c.DeletedAt = value.Time
			}
		case club.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				c.CreatedAt = value.Time
			}
		case club.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				c.UpdatedAt = value.Time
			}
		case club.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				c.Name = value.String
			}
		case club.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				c.Description = value.String
			}
		case club.FieldLink:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field link", values[i])
			} else if value.Valid {
				c.Link = value.String
			}
		case club.FieldAvatarID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field avatar_id", values[i])
			} else if value.Valid {
				c.AvatarID = value.String
			}
		case club.FieldIntroID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field intro_id", values[i])
			} else if value.Valid {
				c.IntroID = value.String
			}
		case club.FieldVisibleInTour:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field visible_in_tour", values[i])
			} else if value.Valid {
				c.VisibleInTour = value.Bool
			}
		case club.FieldAllowedRoles:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field allowed_roles", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &c.AllowedRoles); err != nil {
					return fmt.Errorf("unmarshal field allowed_roles: %w", err)
				}
			}
		case club.FieldQrAllowed:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field qr_allowed", values[i])
			} else if value.Valid {
				c.QrAllowed = value.Bool
			}
		default:
			c.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Club.
// This includes values selected through modifiers, order, etc.
func (c *Club) Value(name string) (ent.Value, error) {
	return c.selectValues.Get(name)
}

// QueryEvents queries the "events" edge of the Club entity.
func (c *Club) QueryEvents() *EventQuery {
	return NewClubClient(c.config).QueryEvents(c)
}

// QueryOwners queries the "owners" edge of the Club entity.
func (c *Club) QueryOwners() *UserQuery {
	return NewClubClient(c.config).QueryOwners(c)
}

// QueryIgnoreMailings queries the "ignore_mailings" edge of the Club entity.
func (c *Club) QueryIgnoreMailings() *IgnoreMailingQuery {
	return NewClubClient(c.config).QueryIgnoreMailings(c)
}

// QueryClubOwners queries the "club_owners" edge of the Club entity.
func (c *Club) QueryClubOwners() *ClubOwnerQuery {
	return NewClubClient(c.config).QueryClubOwners(c)
}

// Update returns a builder for updating this Club.
// Note that you need to call Club.Unwrap() before calling this method if this Club
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Club) Update() *ClubUpdateOne {
	return NewClubClient(c.config).UpdateOne(c)
}

// Unwrap unwraps the Club entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Club) Unwrap() *Club {
	_tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Club is not a transactional entity")
	}
	c.config.driver = _tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Club) String() string {
	var builder strings.Builder
	builder.WriteString("Club(")
	builder.WriteString(fmt.Sprintf("id=%v, ", c.ID))
	builder.WriteString("deleted_at=")
	builder.WriteString(c.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(c.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(c.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(c.Name)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(c.Description)
	builder.WriteString(", ")
	builder.WriteString("link=")
	builder.WriteString(c.Link)
	builder.WriteString(", ")
	builder.WriteString("avatar_id=")
	builder.WriteString(c.AvatarID)
	builder.WriteString(", ")
	builder.WriteString("intro_id=")
	builder.WriteString(c.IntroID)
	builder.WriteString(", ")
	builder.WriteString("visible_in_tour=")
	builder.WriteString(fmt.Sprintf("%v", c.VisibleInTour))
	builder.WriteString(", ")
	builder.WriteString("allowed_roles=")
	builder.WriteString(fmt.Sprintf("%v", c.AllowedRoles))
	builder.WriteString(", ")
	builder.WriteString("qr_allowed=")
	builder.WriteString(fmt.Sprintf("%v", c.QrAllowed))
	builder.WriteByte(')')
	return builder.String()
}

// Clubs is a parsable slice of Club.
type Clubs []*Club
