// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"

	"github.com/Badsnus/cu-clubs-bot/bot/internal/adapters/secondary/postgres/ent/event"
	"github.com/Badsnus/cu-clubs-bot/bot/internal/adapters/secondary/postgres/ent/pass"
	"github.com/Badsnus/cu-clubs-bot/bot/internal/adapters/secondary/postgres/ent/user"
	"github.com/Badsnus/cu-clubs-bot/bot/internal/domain/valueobject"
)

// Pass is the model entity for the Pass schema.
type Pass struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// EventID holds the value of the "event_id" field.
	EventID uuid.UUID `json:"event_id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID uuid.UUID `json:"user_id,omitempty"`
	// Тип пропуска (event, manual, api)
	Type valueobject.PassType `json:"type,omitempty"`
	// Статус пропуска (pending, sent, cancel)
	Status valueobject.PassStatus `json:"status,omitempty"`
	// Тип запросившего пропуск
	RequesterType valueobject.RequesterType `json:"requester_type,omitempty"`
	// ID запросившего пропуск
	RequesterID uuid.UUID `json:"requester_id,omitempty"`
	// Когда запланирована отправка пропуска
	ScheduledAt time.Time `json:"scheduled_at,omitempty"`
	// Когда был отправлен пропуск
	SentAt time.Time `json:"sent_at,omitempty"`
	// Дополнительная информация по пропуску
	Notes string `json:"notes,omitempty"`
	// Пропуск отправлен на почту
	EmailSent bool `json:"email_sent,omitempty"`
	// Пропуск отправлен в Telegram
	TelegramSent bool `json:"telegram_sent,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PassQuery when eager-loading is set.
	Edges        PassEdges `json:"edges"`
	selectValues sql.SelectValues
}

// PassEdges holds the relations/edges for other nodes in the graph.
type PassEdges struct {
	// Event holds the value of the event edge.
	Event *Event `json:"event,omitempty"`
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// EventOrErr returns the Event value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PassEdges) EventOrErr() (*Event, error) {
	if e.Event != nil {
		return e.Event, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: event.Label}
	}
	return nil, &NotLoadedError{edge: "event"}
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PassEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Pass) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case pass.FieldEmailSent, pass.FieldTelegramSent:
			values[i] = new(sql.NullBool)
		case pass.FieldNotes:
			values[i] = new(sql.NullString)
		case pass.FieldCreatedAt, pass.FieldUpdatedAt, pass.FieldScheduledAt, pass.FieldSentAt:
			values[i] = new(sql.NullTime)
		case pass.FieldID, pass.FieldEventID, pass.FieldUserID, pass.FieldRequesterID:
			values[i] = new(uuid.UUID)
		case pass.FieldStatus:
			values[i] = new(valueobject.PassStatus)
		case pass.FieldType:
			values[i] = new(valueobject.PassType)
		case pass.FieldRequesterType:
			values[i] = new(valueobject.RequesterType)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Pass fields.
func (pa *Pass) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case pass.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				pa.ID = *value
			}
		case pass.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				pa.CreatedAt = value.Time
			}
		case pass.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				pa.UpdatedAt = value.Time
			}
		case pass.FieldEventID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field event_id", values[i])
			} else if value != nil {
				pa.EventID = *value
			}
		case pass.FieldUserID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value != nil {
				pa.UserID = *value
			}
		case pass.FieldType:
			if value, ok := values[i].(*valueobject.PassType); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value != nil {
				pa.Type = *value
			}
		case pass.FieldStatus:
			if value, ok := values[i].(*valueobject.PassStatus); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value != nil {
				pa.Status = *value
			}
		case pass.FieldRequesterType:
			if value, ok := values[i].(*valueobject.RequesterType); !ok {
				return fmt.Errorf("unexpected type %T for field requester_type", values[i])
			} else if value != nil {
				pa.RequesterType = *value
			}
		case pass.FieldRequesterID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field requester_id", values[i])
			} else if value != nil {
				pa.RequesterID = *value
			}
		case pass.FieldScheduledAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field scheduled_at", values[i])
			} else if value.Valid {
				pa.ScheduledAt = value.Time
			}
		case pass.FieldSentAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field sent_at", values[i])
			} else if value.Valid {
				pa.SentAt = value.Time
			}
		case pass.FieldNotes:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field notes", values[i])
			} else if value.Valid {
				pa.Notes = value.String
			}
		case pass.FieldEmailSent:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field email_sent", values[i])
			} else if value.Valid {
				pa.EmailSent = value.Bool
			}
		case pass.FieldTelegramSent:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field telegram_sent", values[i])
			} else if value.Valid {
				pa.TelegramSent = value.Bool
			}
		default:
			pa.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Pass.
// This includes values selected through modifiers, order, etc.
func (pa *Pass) Value(name string) (ent.Value, error) {
	return pa.selectValues.Get(name)
}

// QueryEvent queries the "event" edge of the Pass entity.
func (pa *Pass) QueryEvent() *EventQuery {
	return NewPassClient(pa.config).QueryEvent(pa)
}

// QueryUser queries the "user" edge of the Pass entity.
func (pa *Pass) QueryUser() *UserQuery {
	return NewPassClient(pa.config).QueryUser(pa)
}

// Update returns a builder for updating this Pass.
// Note that you need to call Pass.Unwrap() before calling this method if this Pass
// was returned from a transaction, and the transaction was committed or rolled back.
func (pa *Pass) Update() *PassUpdateOne {
	return NewPassClient(pa.config).UpdateOne(pa)
}

// Unwrap unwraps the Pass entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pa *Pass) Unwrap() *Pass {
	_tx, ok := pa.config.driver.(*txDriver)
	if !ok {
		panic("ent: Pass is not a transactional entity")
	}
	pa.config.driver = _tx.drv
	return pa
}

// String implements the fmt.Stringer.
func (pa *Pass) String() string {
	var builder strings.Builder
	builder.WriteString("Pass(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pa.ID))
	builder.WriteString("created_at=")
	builder.WriteString(pa.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(pa.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("event_id=")
	builder.WriteString(fmt.Sprintf("%v", pa.EventID))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", pa.UserID))
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", pa.Type))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", pa.Status))
	builder.WriteString(", ")
	builder.WriteString("requester_type=")
	builder.WriteString(fmt.Sprintf("%v", pa.RequesterType))
	builder.WriteString(", ")
	builder.WriteString("requester_id=")
	builder.WriteString(fmt.Sprintf("%v", pa.RequesterID))
	builder.WriteString(", ")
	builder.WriteString("scheduled_at=")
	builder.WriteString(pa.ScheduledAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("sent_at=")
	builder.WriteString(pa.SentAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("notes=")
	builder.WriteString(pa.Notes)
	builder.WriteString(", ")
	builder.WriteString("email_sent=")
	builder.WriteString(fmt.Sprintf("%v", pa.EmailSent))
	builder.WriteString(", ")
	builder.WriteString("telegram_sent=")
	builder.WriteString(fmt.Sprintf("%v", pa.TelegramSent))
	builder.WriteByte(')')
	return builder.String()
}

// Passes is a parsable slice of Pass.
type Passes []*Pass
