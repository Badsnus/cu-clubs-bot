// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"

	"github.com/Badsnus/cu-clubs-bot/bot/internal/adapters/secondary/postgres/ent/club"
	"github.com/Badsnus/cu-clubs-bot/bot/internal/adapters/secondary/postgres/ent/clubowner"
	"github.com/Badsnus/cu-clubs-bot/bot/internal/adapters/secondary/postgres/ent/event"
	"github.com/Badsnus/cu-clubs-bot/bot/internal/adapters/secondary/postgres/ent/eventparticipant"
	"github.com/Badsnus/cu-clubs-bot/bot/internal/adapters/secondary/postgres/ent/ignoremailing"
	"github.com/Badsnus/cu-clubs-bot/bot/internal/adapters/secondary/postgres/ent/notification"
	"github.com/Badsnus/cu-clubs-bot/bot/internal/adapters/secondary/postgres/ent/pass"
	"github.com/Badsnus/cu-clubs-bot/bot/internal/adapters/secondary/postgres/ent/user"
	"github.com/Badsnus/cu-clubs-bot/bot/internal/domain/valueobject"
)

// UserCreate is the builder for creating a User entity.
type UserCreate struct {
	config
	mutation *UserMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (uc *UserCreate) SetCreatedAt(t time.Time) *UserCreate {
	uc.mutation.SetCreatedAt(t)
	return uc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (uc *UserCreate) SetNillableCreatedAt(t *time.Time) *UserCreate {
	if t != nil {
		uc.SetCreatedAt(*t)
	}
	return uc
}

// SetUpdatedAt sets the "updated_at" field.
func (uc *UserCreate) SetUpdatedAt(t time.Time) *UserCreate {
	uc.mutation.SetUpdatedAt(t)
	return uc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (uc *UserCreate) SetNillableUpdatedAt(t *time.Time) *UserCreate {
	if t != nil {
		uc.SetUpdatedAt(*t)
	}
	return uc
}

// SetTelegramID sets the "telegram_id" field.
func (uc *UserCreate) SetTelegramID(i int64) *UserCreate {
	uc.mutation.SetTelegramID(i)
	return uc
}

// SetLocalization sets the "localization" field.
func (uc *UserCreate) SetLocalization(u user.Localization) *UserCreate {
	uc.mutation.SetLocalization(u)
	return uc
}

// SetNillableLocalization sets the "localization" field if the given value is not nil.
func (uc *UserCreate) SetNillableLocalization(u *user.Localization) *UserCreate {
	if u != nil {
		uc.SetLocalization(*u)
	}
	return uc
}

// SetUsername sets the "username" field.
func (uc *UserCreate) SetUsername(s string) *UserCreate {
	uc.mutation.SetUsername(s)
	return uc
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (uc *UserCreate) SetNillableUsername(s *string) *UserCreate {
	if s != nil {
		uc.SetUsername(*s)
	}
	return uc
}

// SetRole sets the "role" field.
func (uc *UserCreate) SetRole(v valueobject.Role) *UserCreate {
	uc.mutation.SetRole(v)
	return uc
}

// SetEmail sets the "email" field.
func (uc *UserCreate) SetEmail(v valueobject.Email) *UserCreate {
	uc.mutation.SetEmail(v)
	return uc
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (uc *UserCreate) SetNillableEmail(v *valueobject.Email) *UserCreate {
	if v != nil {
		uc.SetEmail(*v)
	}
	return uc
}

// SetFio sets the "fio" field.
func (uc *UserCreate) SetFio(v valueobject.FIO) *UserCreate {
	uc.mutation.SetFio(v)
	return uc
}

// SetQrPayload sets the "qr_payload" field.
func (uc *UserCreate) SetQrPayload(u uuid.UUID) *UserCreate {
	uc.mutation.SetQrPayload(u)
	return uc
}

// SetNillableQrPayload sets the "qr_payload" field if the given value is not nil.
func (uc *UserCreate) SetNillableQrPayload(u *uuid.UUID) *UserCreate {
	if u != nil {
		uc.SetQrPayload(*u)
	}
	return uc
}

// SetQrFileID sets the "qr_file_id" field.
func (uc *UserCreate) SetQrFileID(s string) *UserCreate {
	uc.mutation.SetQrFileID(s)
	return uc
}

// SetNillableQrFileID sets the "qr_file_id" field if the given value is not nil.
func (uc *UserCreate) SetNillableQrFileID(s *string) *UserCreate {
	if s != nil {
		uc.SetQrFileID(*s)
	}
	return uc
}

// SetIsBanned sets the "is_banned" field.
func (uc *UserCreate) SetIsBanned(b bool) *UserCreate {
	uc.mutation.SetIsBanned(b)
	return uc
}

// SetNillableIsBanned sets the "is_banned" field if the given value is not nil.
func (uc *UserCreate) SetNillableIsBanned(b *bool) *UserCreate {
	if b != nil {
		uc.SetIsBanned(*b)
	}
	return uc
}

// SetID sets the "id" field.
func (uc *UserCreate) SetID(u uuid.UUID) *UserCreate {
	uc.mutation.SetID(u)
	return uc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (uc *UserCreate) SetNillableID(u *uuid.UUID) *UserCreate {
	if u != nil {
		uc.SetID(*u)
	}
	return uc
}

// AddOwnedClubIDs adds the "owned_clubs" edge to the Club entity by IDs.
func (uc *UserCreate) AddOwnedClubIDs(ids ...uuid.UUID) *UserCreate {
	uc.mutation.AddOwnedClubIDs(ids...)
	return uc
}

// AddOwnedClubs adds the "owned_clubs" edges to the Club entity.
func (uc *UserCreate) AddOwnedClubs(c ...*Club) *UserCreate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uc.AddOwnedClubIDs(ids...)
}

// AddEventIDs adds the "events" edge to the Event entity by IDs.
func (uc *UserCreate) AddEventIDs(ids ...uuid.UUID) *UserCreate {
	uc.mutation.AddEventIDs(ids...)
	return uc
}

// AddEvents adds the "events" edges to the Event entity.
func (uc *UserCreate) AddEvents(e ...*Event) *UserCreate {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return uc.AddEventIDs(ids...)
}

// AddIgnoreMailingIDs adds the "ignore_mailings" edge to the IgnoreMailing entity by IDs.
func (uc *UserCreate) AddIgnoreMailingIDs(ids ...uuid.UUID) *UserCreate {
	uc.mutation.AddIgnoreMailingIDs(ids...)
	return uc
}

// AddIgnoreMailings adds the "ignore_mailings" edges to the IgnoreMailing entity.
func (uc *UserCreate) AddIgnoreMailings(i ...*IgnoreMailing) *UserCreate {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return uc.AddIgnoreMailingIDs(ids...)
}

// AddNotificationIDs adds the "notifications" edge to the Notification entity by IDs.
func (uc *UserCreate) AddNotificationIDs(ids ...uuid.UUID) *UserCreate {
	uc.mutation.AddNotificationIDs(ids...)
	return uc
}

// AddNotifications adds the "notifications" edges to the Notification entity.
func (uc *UserCreate) AddNotifications(n ...*Notification) *UserCreate {
	ids := make([]uuid.UUID, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return uc.AddNotificationIDs(ids...)
}

// AddPassIDs adds the "passes" edge to the Pass entity by IDs.
func (uc *UserCreate) AddPassIDs(ids ...uuid.UUID) *UserCreate {
	uc.mutation.AddPassIDs(ids...)
	return uc
}

// AddPasses adds the "passes" edges to the Pass entity.
func (uc *UserCreate) AddPasses(p ...*Pass) *UserCreate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uc.AddPassIDs(ids...)
}

// AddClubOwnerIDs adds the "club_owners" edge to the ClubOwner entity by IDs.
func (uc *UserCreate) AddClubOwnerIDs(ids ...uuid.UUID) *UserCreate {
	uc.mutation.AddClubOwnerIDs(ids...)
	return uc
}

// AddClubOwners adds the "club_owners" edges to the ClubOwner entity.
func (uc *UserCreate) AddClubOwners(c ...*ClubOwner) *UserCreate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uc.AddClubOwnerIDs(ids...)
}

// AddEventParticipantIDs adds the "event_participants" edge to the EventParticipant entity by IDs.
func (uc *UserCreate) AddEventParticipantIDs(ids ...uuid.UUID) *UserCreate {
	uc.mutation.AddEventParticipantIDs(ids...)
	return uc
}

// AddEventParticipants adds the "event_participants" edges to the EventParticipant entity.
func (uc *UserCreate) AddEventParticipants(e ...*EventParticipant) *UserCreate {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return uc.AddEventParticipantIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (uc *UserCreate) Mutation() *UserMutation {
	return uc.mutation
}

// Save creates the User in the database.
func (uc *UserCreate) Save(ctx context.Context) (*User, error) {
	uc.defaults()
	return withHooks(ctx, uc.sqlSave, uc.mutation, uc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (uc *UserCreate) SaveX(ctx context.Context) *User {
	v, err := uc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uc *UserCreate) Exec(ctx context.Context) error {
	_, err := uc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uc *UserCreate) ExecX(ctx context.Context) {
	if err := uc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uc *UserCreate) defaults() {
	if _, ok := uc.mutation.CreatedAt(); !ok {
		v := user.DefaultCreatedAt
		uc.mutation.SetCreatedAt(v)
	}
	if _, ok := uc.mutation.UpdatedAt(); !ok {
		v := user.DefaultUpdatedAt
		uc.mutation.SetUpdatedAt(v)
	}
	if _, ok := uc.mutation.Localization(); !ok {
		v := user.DefaultLocalization
		uc.mutation.SetLocalization(v)
	}
	if _, ok := uc.mutation.IsBanned(); !ok {
		v := user.DefaultIsBanned
		uc.mutation.SetIsBanned(v)
	}
	if _, ok := uc.mutation.ID(); !ok {
		v := user.DefaultID()
		uc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uc *UserCreate) check() error {
	if _, ok := uc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "User.created_at"`)}
	}
	if _, ok := uc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "User.updated_at"`)}
	}
	if _, ok := uc.mutation.TelegramID(); !ok {
		return &ValidationError{Name: "telegram_id", err: errors.New(`ent: missing required field "User.telegram_id"`)}
	}
	if v, ok := uc.mutation.TelegramID(); ok {
		if err := user.TelegramIDValidator(v); err != nil {
			return &ValidationError{Name: "telegram_id", err: fmt.Errorf(`ent: validator failed for field "User.telegram_id": %w`, err)}
		}
	}
	if _, ok := uc.mutation.Localization(); !ok {
		return &ValidationError{Name: "localization", err: errors.New(`ent: missing required field "User.localization"`)}
	}
	if v, ok := uc.mutation.Localization(); ok {
		if err := user.LocalizationValidator(v); err != nil {
			return &ValidationError{Name: "localization", err: fmt.Errorf(`ent: validator failed for field "User.localization": %w`, err)}
		}
	}
	if _, ok := uc.mutation.Role(); !ok {
		return &ValidationError{Name: "role", err: errors.New(`ent: missing required field "User.role"`)}
	}
	if v, ok := uc.mutation.Role(); ok {
		if err := user.RoleValidator(v); err != nil {
			return &ValidationError{Name: "role", err: fmt.Errorf(`ent: validator failed for field "User.role": %w`, err)}
		}
	}
	if _, ok := uc.mutation.Fio(); !ok {
		return &ValidationError{Name: "fio", err: errors.New(`ent: missing required field "User.fio"`)}
	}
	if _, ok := uc.mutation.IsBanned(); !ok {
		return &ValidationError{Name: "is_banned", err: errors.New(`ent: missing required field "User.is_banned"`)}
	}
	return nil
}

func (uc *UserCreate) sqlSave(ctx context.Context) (*User, error) {
	if err := uc.check(); err != nil {
		return nil, err
	}
	_node, _spec := uc.createSpec()
	if err := sqlgraph.CreateNode(ctx, uc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	uc.mutation.id = &_node.ID
	uc.mutation.done = true
	return _node, nil
}

func (uc *UserCreate) createSpec() (*User, *sqlgraph.CreateSpec) {
	var (
		_node = &User{config: uc.config}
		_spec = sqlgraph.NewCreateSpec(user.Table, sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID))
	)
	if id, ok := uc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := uc.mutation.CreatedAt(); ok {
		_spec.SetField(user.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := uc.mutation.UpdatedAt(); ok {
		_spec.SetField(user.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := uc.mutation.TelegramID(); ok {
		_spec.SetField(user.FieldTelegramID, field.TypeInt64, value)
		_node.TelegramID = value
	}
	if value, ok := uc.mutation.Localization(); ok {
		_spec.SetField(user.FieldLocalization, field.TypeEnum, value)
		_node.Localization = value
	}
	if value, ok := uc.mutation.Username(); ok {
		_spec.SetField(user.FieldUsername, field.TypeString, value)
		_node.Username = value
	}
	if value, ok := uc.mutation.Role(); ok {
		_spec.SetField(user.FieldRole, field.TypeEnum, value)
		_node.Role = value
	}
	if value, ok := uc.mutation.Email(); ok {
		_spec.SetField(user.FieldEmail, field.TypeString, value)
		_node.Email = value
	}
	if value, ok := uc.mutation.Fio(); ok {
		_spec.SetField(user.FieldFio, field.TypeString, value)
		_node.Fio = value
	}
	if value, ok := uc.mutation.QrPayload(); ok {
		_spec.SetField(user.FieldQrPayload, field.TypeUUID, value)
		_node.QrPayload = value
	}
	if value, ok := uc.mutation.QrFileID(); ok {
		_spec.SetField(user.FieldQrFileID, field.TypeString, value)
		_node.QrFileID = value
	}
	if value, ok := uc.mutation.IsBanned(); ok {
		_spec.SetField(user.FieldIsBanned, field.TypeBool, value)
		_node.IsBanned = value
	}
	if nodes := uc.mutation.OwnedClubsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.OwnedClubsTable,
			Columns: user.OwnedClubsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(club.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &ClubOwnerCreate{config: uc.config, mutation: newClubOwnerMutation(uc.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.EventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.EventsTable,
			Columns: user.EventsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &EventParticipantCreate{config: uc.config, mutation: newEventParticipantMutation(uc.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.IgnoreMailingsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.IgnoreMailingsTable,
			Columns: []string{user.IgnoreMailingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ignoremailing.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.NotificationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.NotificationsTable,
			Columns: []string{user.NotificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.PassesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.PassesTable,
			Columns: []string{user.PassesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pass.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.ClubOwnersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.ClubOwnersTable,
			Columns: []string{user.ClubOwnersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(clubowner.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.EventParticipantsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.EventParticipantsTable,
			Columns: []string{user.EventParticipantsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eventparticipant.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// UserCreateBulk is the builder for creating many User entities in bulk.
type UserCreateBulk struct {
	config
	err      error
	builders []*UserCreate
}

// Save creates the User entities in the database.
func (ucb *UserCreateBulk) Save(ctx context.Context) ([]*User, error) {
	if ucb.err != nil {
		return nil, ucb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ucb.builders))
	nodes := make([]*User, len(ucb.builders))
	mutators := make([]Mutator, len(ucb.builders))
	for i := range ucb.builders {
		func(i int, root context.Context) {
			builder := ucb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ucb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ucb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ucb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ucb *UserCreateBulk) SaveX(ctx context.Context) []*User {
	v, err := ucb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ucb *UserCreateBulk) Exec(ctx context.Context) error {
	_, err := ucb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ucb *UserCreateBulk) ExecX(ctx context.Context) {
	if err := ucb.Exec(ctx); err != nil {
		panic(err)
	}
}
