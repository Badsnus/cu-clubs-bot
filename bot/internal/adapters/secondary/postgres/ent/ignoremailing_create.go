// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"

	"github.com/Badsnus/cu-clubs-bot/bot/internal/adapters/secondary/postgres/ent/club"
	"github.com/Badsnus/cu-clubs-bot/bot/internal/adapters/secondary/postgres/ent/ignoremailing"
	"github.com/Badsnus/cu-clubs-bot/bot/internal/adapters/secondary/postgres/ent/user"
)

// IgnoreMailingCreate is the builder for creating a IgnoreMailing entity.
type IgnoreMailingCreate struct {
	config
	mutation *IgnoreMailingMutation
	hooks    []Hook
}

// SetDeletedAt sets the "deleted_at" field.
func (imc *IgnoreMailingCreate) SetDeletedAt(t time.Time) *IgnoreMailingCreate {
	imc.mutation.SetDeletedAt(t)
	return imc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (imc *IgnoreMailingCreate) SetNillableDeletedAt(t *time.Time) *IgnoreMailingCreate {
	if t != nil {
		imc.SetDeletedAt(*t)
	}
	return imc
}

// SetCreatedAt sets the "created_at" field.
func (imc *IgnoreMailingCreate) SetCreatedAt(t time.Time) *IgnoreMailingCreate {
	imc.mutation.SetCreatedAt(t)
	return imc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (imc *IgnoreMailingCreate) SetNillableCreatedAt(t *time.Time) *IgnoreMailingCreate {
	if t != nil {
		imc.SetCreatedAt(*t)
	}
	return imc
}

// SetUpdatedAt sets the "updated_at" field.
func (imc *IgnoreMailingCreate) SetUpdatedAt(t time.Time) *IgnoreMailingCreate {
	imc.mutation.SetUpdatedAt(t)
	return imc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (imc *IgnoreMailingCreate) SetNillableUpdatedAt(t *time.Time) *IgnoreMailingCreate {
	if t != nil {
		imc.SetUpdatedAt(*t)
	}
	return imc
}

// SetUserID sets the "user_id" field.
func (imc *IgnoreMailingCreate) SetUserID(u uuid.UUID) *IgnoreMailingCreate {
	imc.mutation.SetUserID(u)
	return imc
}

// SetClubID sets the "club_id" field.
func (imc *IgnoreMailingCreate) SetClubID(u uuid.UUID) *IgnoreMailingCreate {
	imc.mutation.SetClubID(u)
	return imc
}

// SetID sets the "id" field.
func (imc *IgnoreMailingCreate) SetID(u uuid.UUID) *IgnoreMailingCreate {
	imc.mutation.SetID(u)
	return imc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (imc *IgnoreMailingCreate) SetNillableID(u *uuid.UUID) *IgnoreMailingCreate {
	if u != nil {
		imc.SetID(*u)
	}
	return imc
}

// SetUser sets the "user" edge to the User entity.
func (imc *IgnoreMailingCreate) SetUser(u *User) *IgnoreMailingCreate {
	return imc.SetUserID(u.ID)
}

// SetClub sets the "club" edge to the Club entity.
func (imc *IgnoreMailingCreate) SetClub(c *Club) *IgnoreMailingCreate {
	return imc.SetClubID(c.ID)
}

// Mutation returns the IgnoreMailingMutation object of the builder.
func (imc *IgnoreMailingCreate) Mutation() *IgnoreMailingMutation {
	return imc.mutation
}

// Save creates the IgnoreMailing in the database.
func (imc *IgnoreMailingCreate) Save(ctx context.Context) (*IgnoreMailing, error) {
	if err := imc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, imc.sqlSave, imc.mutation, imc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (imc *IgnoreMailingCreate) SaveX(ctx context.Context) *IgnoreMailing {
	v, err := imc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (imc *IgnoreMailingCreate) Exec(ctx context.Context) error {
	_, err := imc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (imc *IgnoreMailingCreate) ExecX(ctx context.Context) {
	if err := imc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (imc *IgnoreMailingCreate) defaults() error {
	if _, ok := imc.mutation.CreatedAt(); !ok {
		v := ignoremailing.DefaultCreatedAt
		imc.mutation.SetCreatedAt(v)
	}
	if _, ok := imc.mutation.UpdatedAt(); !ok {
		v := ignoremailing.DefaultUpdatedAt
		imc.mutation.SetUpdatedAt(v)
	}
	if _, ok := imc.mutation.ID(); !ok {
		if ignoremailing.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized ignoremailing.DefaultID (forgotten import ent/runtime?)")
		}
		v := ignoremailing.DefaultID()
		imc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (imc *IgnoreMailingCreate) check() error {
	if _, ok := imc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "IgnoreMailing.created_at"`)}
	}
	if _, ok := imc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "IgnoreMailing.updated_at"`)}
	}
	if _, ok := imc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "IgnoreMailing.user_id"`)}
	}
	if _, ok := imc.mutation.ClubID(); !ok {
		return &ValidationError{Name: "club_id", err: errors.New(`ent: missing required field "IgnoreMailing.club_id"`)}
	}
	if len(imc.mutation.UserIDs()) == 0 {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "IgnoreMailing.user"`)}
	}
	if len(imc.mutation.ClubIDs()) == 0 {
		return &ValidationError{Name: "club", err: errors.New(`ent: missing required edge "IgnoreMailing.club"`)}
	}
	return nil
}

func (imc *IgnoreMailingCreate) sqlSave(ctx context.Context) (*IgnoreMailing, error) {
	if err := imc.check(); err != nil {
		return nil, err
	}
	_node, _spec := imc.createSpec()
	if err := sqlgraph.CreateNode(ctx, imc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	imc.mutation.id = &_node.ID
	imc.mutation.done = true
	return _node, nil
}

func (imc *IgnoreMailingCreate) createSpec() (*IgnoreMailing, *sqlgraph.CreateSpec) {
	var (
		_node = &IgnoreMailing{config: imc.config}
		_spec = sqlgraph.NewCreateSpec(ignoremailing.Table, sqlgraph.NewFieldSpec(ignoremailing.FieldID, field.TypeUUID))
	)
	if id, ok := imc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := imc.mutation.DeletedAt(); ok {
		_spec.SetField(ignoremailing.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := imc.mutation.CreatedAt(); ok {
		_spec.SetField(ignoremailing.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := imc.mutation.UpdatedAt(); ok {
		_spec.SetField(ignoremailing.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := imc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ignoremailing.UserTable,
			Columns: []string{ignoremailing.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := imc.mutation.ClubIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ignoremailing.ClubTable,
			Columns: []string{ignoremailing.ClubColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(club.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ClubID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// IgnoreMailingCreateBulk is the builder for creating many IgnoreMailing entities in bulk.
type IgnoreMailingCreateBulk struct {
	config
	err      error
	builders []*IgnoreMailingCreate
}

// Save creates the IgnoreMailing entities in the database.
func (imcb *IgnoreMailingCreateBulk) Save(ctx context.Context) ([]*IgnoreMailing, error) {
	if imcb.err != nil {
		return nil, imcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(imcb.builders))
	nodes := make([]*IgnoreMailing, len(imcb.builders))
	mutators := make([]Mutator, len(imcb.builders))
	for i := range imcb.builders {
		func(i int, root context.Context) {
			builder := imcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*IgnoreMailingMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, imcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, imcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, imcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (imcb *IgnoreMailingCreateBulk) SaveX(ctx context.Context) []*IgnoreMailing {
	v, err := imcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (imcb *IgnoreMailingCreateBulk) Exec(ctx context.Context) error {
	_, err := imcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (imcb *IgnoreMailingCreateBulk) ExecX(ctx context.Context) {
	if err := imcb.Exec(ctx); err != nil {
		panic(err)
	}
}
