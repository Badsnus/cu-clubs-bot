// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"

	"github.com/Badsnus/cu-clubs-bot/bot/internal/adapters/secondary/postgres/ent/event"
	"github.com/Badsnus/cu-clubs-bot/bot/internal/adapters/secondary/postgres/ent/pass"
	"github.com/Badsnus/cu-clubs-bot/bot/internal/adapters/secondary/postgres/ent/user"
	"github.com/Badsnus/cu-clubs-bot/bot/internal/domain/valueobject"
)

// PassCreate is the builder for creating a Pass entity.
type PassCreate struct {
	config
	mutation *PassMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (pc *PassCreate) SetCreatedAt(t time.Time) *PassCreate {
	pc.mutation.SetCreatedAt(t)
	return pc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pc *PassCreate) SetNillableCreatedAt(t *time.Time) *PassCreate {
	if t != nil {
		pc.SetCreatedAt(*t)
	}
	return pc
}

// SetUpdatedAt sets the "updated_at" field.
func (pc *PassCreate) SetUpdatedAt(t time.Time) *PassCreate {
	pc.mutation.SetUpdatedAt(t)
	return pc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pc *PassCreate) SetNillableUpdatedAt(t *time.Time) *PassCreate {
	if t != nil {
		pc.SetUpdatedAt(*t)
	}
	return pc
}

// SetEventID sets the "event_id" field.
func (pc *PassCreate) SetEventID(u uuid.UUID) *PassCreate {
	pc.mutation.SetEventID(u)
	return pc
}

// SetUserID sets the "user_id" field.
func (pc *PassCreate) SetUserID(u uuid.UUID) *PassCreate {
	pc.mutation.SetUserID(u)
	return pc
}

// SetType sets the "type" field.
func (pc *PassCreate) SetType(vt valueobject.PassType) *PassCreate {
	pc.mutation.SetType(vt)
	return pc
}

// SetNillableType sets the "type" field if the given value is not nil.
func (pc *PassCreate) SetNillableType(vt *valueobject.PassType) *PassCreate {
	if vt != nil {
		pc.SetType(*vt)
	}
	return pc
}

// SetStatus sets the "status" field.
func (pc *PassCreate) SetStatus(vs valueobject.PassStatus) *PassCreate {
	pc.mutation.SetStatus(vs)
	return pc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (pc *PassCreate) SetNillableStatus(vs *valueobject.PassStatus) *PassCreate {
	if vs != nil {
		pc.SetStatus(*vs)
	}
	return pc
}

// SetRequesterType sets the "requester_type" field.
func (pc *PassCreate) SetRequesterType(vt valueobject.RequesterType) *PassCreate {
	pc.mutation.SetRequesterType(vt)
	return pc
}

// SetNillableRequesterType sets the "requester_type" field if the given value is not nil.
func (pc *PassCreate) SetNillableRequesterType(vt *valueobject.RequesterType) *PassCreate {
	if vt != nil {
		pc.SetRequesterType(*vt)
	}
	return pc
}

// SetRequesterID sets the "requester_id" field.
func (pc *PassCreate) SetRequesterID(u uuid.UUID) *PassCreate {
	pc.mutation.SetRequesterID(u)
	return pc
}

// SetNillableRequesterID sets the "requester_id" field if the given value is not nil.
func (pc *PassCreate) SetNillableRequesterID(u *uuid.UUID) *PassCreate {
	if u != nil {
		pc.SetRequesterID(*u)
	}
	return pc
}

// SetScheduledAt sets the "scheduled_at" field.
func (pc *PassCreate) SetScheduledAt(t time.Time) *PassCreate {
	pc.mutation.SetScheduledAt(t)
	return pc
}

// SetSentAt sets the "sent_at" field.
func (pc *PassCreate) SetSentAt(t time.Time) *PassCreate {
	pc.mutation.SetSentAt(t)
	return pc
}

// SetNillableSentAt sets the "sent_at" field if the given value is not nil.
func (pc *PassCreate) SetNillableSentAt(t *time.Time) *PassCreate {
	if t != nil {
		pc.SetSentAt(*t)
	}
	return pc
}

// SetNotes sets the "notes" field.
func (pc *PassCreate) SetNotes(s string) *PassCreate {
	pc.mutation.SetNotes(s)
	return pc
}

// SetNillableNotes sets the "notes" field if the given value is not nil.
func (pc *PassCreate) SetNillableNotes(s *string) *PassCreate {
	if s != nil {
		pc.SetNotes(*s)
	}
	return pc
}

// SetEmailSent sets the "email_sent" field.
func (pc *PassCreate) SetEmailSent(b bool) *PassCreate {
	pc.mutation.SetEmailSent(b)
	return pc
}

// SetNillableEmailSent sets the "email_sent" field if the given value is not nil.
func (pc *PassCreate) SetNillableEmailSent(b *bool) *PassCreate {
	if b != nil {
		pc.SetEmailSent(*b)
	}
	return pc
}

// SetTelegramSent sets the "telegram_sent" field.
func (pc *PassCreate) SetTelegramSent(b bool) *PassCreate {
	pc.mutation.SetTelegramSent(b)
	return pc
}

// SetNillableTelegramSent sets the "telegram_sent" field if the given value is not nil.
func (pc *PassCreate) SetNillableTelegramSent(b *bool) *PassCreate {
	if b != nil {
		pc.SetTelegramSent(*b)
	}
	return pc
}

// SetID sets the "id" field.
func (pc *PassCreate) SetID(u uuid.UUID) *PassCreate {
	pc.mutation.SetID(u)
	return pc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (pc *PassCreate) SetNillableID(u *uuid.UUID) *PassCreate {
	if u != nil {
		pc.SetID(*u)
	}
	return pc
}

// SetEvent sets the "event" edge to the Event entity.
func (pc *PassCreate) SetEvent(e *Event) *PassCreate {
	return pc.SetEventID(e.ID)
}

// SetUser sets the "user" edge to the User entity.
func (pc *PassCreate) SetUser(u *User) *PassCreate {
	return pc.SetUserID(u.ID)
}

// Mutation returns the PassMutation object of the builder.
func (pc *PassCreate) Mutation() *PassMutation {
	return pc.mutation
}

// Save creates the Pass in the database.
func (pc *PassCreate) Save(ctx context.Context) (*Pass, error) {
	pc.defaults()
	return withHooks(ctx, pc.sqlSave, pc.mutation, pc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pc *PassCreate) SaveX(ctx context.Context) *Pass {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pc *PassCreate) Exec(ctx context.Context) error {
	_, err := pc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pc *PassCreate) ExecX(ctx context.Context) {
	if err := pc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pc *PassCreate) defaults() {
	if _, ok := pc.mutation.CreatedAt(); !ok {
		v := pass.DefaultCreatedAt
		pc.mutation.SetCreatedAt(v)
	}
	if _, ok := pc.mutation.UpdatedAt(); !ok {
		v := pass.DefaultUpdatedAt
		pc.mutation.SetUpdatedAt(v)
	}
	if _, ok := pc.mutation.GetType(); !ok {
		v := pass.DefaultType
		pc.mutation.SetType(v)
	}
	if _, ok := pc.mutation.Status(); !ok {
		v := pass.DefaultStatus
		pc.mutation.SetStatus(v)
	}
	if _, ok := pc.mutation.RequesterType(); !ok {
		v := pass.DefaultRequesterType
		pc.mutation.SetRequesterType(v)
	}
	if _, ok := pc.mutation.EmailSent(); !ok {
		v := pass.DefaultEmailSent
		pc.mutation.SetEmailSent(v)
	}
	if _, ok := pc.mutation.TelegramSent(); !ok {
		v := pass.DefaultTelegramSent
		pc.mutation.SetTelegramSent(v)
	}
	if _, ok := pc.mutation.ID(); !ok {
		v := pass.DefaultID()
		pc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pc *PassCreate) check() error {
	if _, ok := pc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Pass.created_at"`)}
	}
	if _, ok := pc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Pass.updated_at"`)}
	}
	if _, ok := pc.mutation.EventID(); !ok {
		return &ValidationError{Name: "event_id", err: errors.New(`ent: missing required field "Pass.event_id"`)}
	}
	if _, ok := pc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "Pass.user_id"`)}
	}
	if _, ok := pc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "Pass.type"`)}
	}
	if v, ok := pc.mutation.GetType(); ok {
		if err := pass.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Pass.type": %w`, err)}
		}
	}
	if _, ok := pc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Pass.status"`)}
	}
	if v, ok := pc.mutation.Status(); ok {
		if err := pass.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Pass.status": %w`, err)}
		}
	}
	if _, ok := pc.mutation.RequesterType(); !ok {
		return &ValidationError{Name: "requester_type", err: errors.New(`ent: missing required field "Pass.requester_type"`)}
	}
	if v, ok := pc.mutation.RequesterType(); ok {
		if err := pass.RequesterTypeValidator(v); err != nil {
			return &ValidationError{Name: "requester_type", err: fmt.Errorf(`ent: validator failed for field "Pass.requester_type": %w`, err)}
		}
	}
	if _, ok := pc.mutation.ScheduledAt(); !ok {
		return &ValidationError{Name: "scheduled_at", err: errors.New(`ent: missing required field "Pass.scheduled_at"`)}
	}
	if _, ok := pc.mutation.EmailSent(); !ok {
		return &ValidationError{Name: "email_sent", err: errors.New(`ent: missing required field "Pass.email_sent"`)}
	}
	if _, ok := pc.mutation.TelegramSent(); !ok {
		return &ValidationError{Name: "telegram_sent", err: errors.New(`ent: missing required field "Pass.telegram_sent"`)}
	}
	if len(pc.mutation.EventIDs()) == 0 {
		return &ValidationError{Name: "event", err: errors.New(`ent: missing required edge "Pass.event"`)}
	}
	if len(pc.mutation.UserIDs()) == 0 {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "Pass.user"`)}
	}
	return nil
}

func (pc *PassCreate) sqlSave(ctx context.Context) (*Pass, error) {
	if err := pc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	pc.mutation.id = &_node.ID
	pc.mutation.done = true
	return _node, nil
}

func (pc *PassCreate) createSpec() (*Pass, *sqlgraph.CreateSpec) {
	var (
		_node = &Pass{config: pc.config}
		_spec = sqlgraph.NewCreateSpec(pass.Table, sqlgraph.NewFieldSpec(pass.FieldID, field.TypeUUID))
	)
	if id, ok := pc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := pc.mutation.CreatedAt(); ok {
		_spec.SetField(pass.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := pc.mutation.UpdatedAt(); ok {
		_spec.SetField(pass.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := pc.mutation.GetType(); ok {
		_spec.SetField(pass.FieldType, field.TypeEnum, value)
		_node.Type = value
	}
	if value, ok := pc.mutation.Status(); ok {
		_spec.SetField(pass.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := pc.mutation.RequesterType(); ok {
		_spec.SetField(pass.FieldRequesterType, field.TypeEnum, value)
		_node.RequesterType = value
	}
	if value, ok := pc.mutation.RequesterID(); ok {
		_spec.SetField(pass.FieldRequesterID, field.TypeUUID, value)
		_node.RequesterID = value
	}
	if value, ok := pc.mutation.ScheduledAt(); ok {
		_spec.SetField(pass.FieldScheduledAt, field.TypeTime, value)
		_node.ScheduledAt = value
	}
	if value, ok := pc.mutation.SentAt(); ok {
		_spec.SetField(pass.FieldSentAt, field.TypeTime, value)
		_node.SentAt = value
	}
	if value, ok := pc.mutation.Notes(); ok {
		_spec.SetField(pass.FieldNotes, field.TypeString, value)
		_node.Notes = value
	}
	if value, ok := pc.mutation.EmailSent(); ok {
		_spec.SetField(pass.FieldEmailSent, field.TypeBool, value)
		_node.EmailSent = value
	}
	if value, ok := pc.mutation.TelegramSent(); ok {
		_spec.SetField(pass.FieldTelegramSent, field.TypeBool, value)
		_node.TelegramSent = value
	}
	if nodes := pc.mutation.EventIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   pass.EventTable,
			Columns: []string{pass.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.EventID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   pass.UserTable,
			Columns: []string{pass.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// PassCreateBulk is the builder for creating many Pass entities in bulk.
type PassCreateBulk struct {
	config
	err      error
	builders []*PassCreate
}

// Save creates the Pass entities in the database.
func (pcb *PassCreateBulk) Save(ctx context.Context) ([]*Pass, error) {
	if pcb.err != nil {
		return nil, pcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pcb.builders))
	nodes := make([]*Pass, len(pcb.builders))
	mutators := make([]Mutator, len(pcb.builders))
	for i := range pcb.builders {
		func(i int, root context.Context) {
			builder := pcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PassMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcb *PassCreateBulk) SaveX(ctx context.Context) []*Pass {
	v, err := pcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcb *PassCreateBulk) Exec(ctx context.Context) error {
	_, err := pcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcb *PassCreateBulk) ExecX(ctx context.Context) {
	if err := pcb.Exec(ctx); err != nil {
		panic(err)
	}
}
