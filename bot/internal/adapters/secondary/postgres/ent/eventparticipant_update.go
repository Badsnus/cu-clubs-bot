// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"

	"github.com/Badsnus/cu-clubs-bot/bot/internal/adapters/secondary/postgres/ent/event"
	"github.com/Badsnus/cu-clubs-bot/bot/internal/adapters/secondary/postgres/ent/eventparticipant"
	"github.com/Badsnus/cu-clubs-bot/bot/internal/adapters/secondary/postgres/ent/predicate"
	"github.com/Badsnus/cu-clubs-bot/bot/internal/adapters/secondary/postgres/ent/user"
)

// EventParticipantUpdate is the builder for updating EventParticipant entities.
type EventParticipantUpdate struct {
	config
	hooks    []Hook
	mutation *EventParticipantMutation
}

// Where appends a list predicates to the EventParticipantUpdate builder.
func (epu *EventParticipantUpdate) Where(ps ...predicate.EventParticipant) *EventParticipantUpdate {
	epu.mutation.Where(ps...)
	return epu
}

// SetDeletedAt sets the "deleted_at" field.
func (epu *EventParticipantUpdate) SetDeletedAt(t time.Time) *EventParticipantUpdate {
	epu.mutation.SetDeletedAt(t)
	return epu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (epu *EventParticipantUpdate) SetNillableDeletedAt(t *time.Time) *EventParticipantUpdate {
	if t != nil {
		epu.SetDeletedAt(*t)
	}
	return epu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (epu *EventParticipantUpdate) ClearDeletedAt() *EventParticipantUpdate {
	epu.mutation.ClearDeletedAt()
	return epu
}

// SetUpdatedAt sets the "updated_at" field.
func (epu *EventParticipantUpdate) SetUpdatedAt(t time.Time) *EventParticipantUpdate {
	epu.mutation.SetUpdatedAt(t)
	return epu
}

// SetEventID sets the "event_id" field.
func (epu *EventParticipantUpdate) SetEventID(u uuid.UUID) *EventParticipantUpdate {
	epu.mutation.SetEventID(u)
	return epu
}

// SetNillableEventID sets the "event_id" field if the given value is not nil.
func (epu *EventParticipantUpdate) SetNillableEventID(u *uuid.UUID) *EventParticipantUpdate {
	if u != nil {
		epu.SetEventID(*u)
	}
	return epu
}

// SetUserID sets the "user_id" field.
func (epu *EventParticipantUpdate) SetUserID(u uuid.UUID) *EventParticipantUpdate {
	epu.mutation.SetUserID(u)
	return epu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (epu *EventParticipantUpdate) SetNillableUserID(u *uuid.UUID) *EventParticipantUpdate {
	if u != nil {
		epu.SetUserID(*u)
	}
	return epu
}

// SetAttendanceMethod sets the "attendance_method" field.
func (epu *EventParticipantUpdate) SetAttendanceMethod(em eventparticipant.AttendanceMethod) *EventParticipantUpdate {
	epu.mutation.SetAttendanceMethod(em)
	return epu
}

// SetNillableAttendanceMethod sets the "attendance_method" field if the given value is not nil.
func (epu *EventParticipantUpdate) SetNillableAttendanceMethod(em *eventparticipant.AttendanceMethod) *EventParticipantUpdate {
	if em != nil {
		epu.SetAttendanceMethod(*em)
	}
	return epu
}

// SetAttendedAt sets the "attended_at" field.
func (epu *EventParticipantUpdate) SetAttendedAt(t time.Time) *EventParticipantUpdate {
	epu.mutation.SetAttendedAt(t)
	return epu
}

// SetNillableAttendedAt sets the "attended_at" field if the given value is not nil.
func (epu *EventParticipantUpdate) SetNillableAttendedAt(t *time.Time) *EventParticipantUpdate {
	if t != nil {
		epu.SetAttendedAt(*t)
	}
	return epu
}

// ClearAttendedAt clears the value of the "attended_at" field.
func (epu *EventParticipantUpdate) ClearAttendedAt() *EventParticipantUpdate {
	epu.mutation.ClearAttendedAt()
	return epu
}

// SetEvent sets the "event" edge to the Event entity.
func (epu *EventParticipantUpdate) SetEvent(e *Event) *EventParticipantUpdate {
	return epu.SetEventID(e.ID)
}

// SetUser sets the "user" edge to the User entity.
func (epu *EventParticipantUpdate) SetUser(u *User) *EventParticipantUpdate {
	return epu.SetUserID(u.ID)
}

// Mutation returns the EventParticipantMutation object of the builder.
func (epu *EventParticipantUpdate) Mutation() *EventParticipantMutation {
	return epu.mutation
}

// ClearEvent clears the "event" edge to the Event entity.
func (epu *EventParticipantUpdate) ClearEvent() *EventParticipantUpdate {
	epu.mutation.ClearEvent()
	return epu
}

// ClearUser clears the "user" edge to the User entity.
func (epu *EventParticipantUpdate) ClearUser() *EventParticipantUpdate {
	epu.mutation.ClearUser()
	return epu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (epu *EventParticipantUpdate) Save(ctx context.Context) (int, error) {
	if err := epu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, epu.sqlSave, epu.mutation, epu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (epu *EventParticipantUpdate) SaveX(ctx context.Context) int {
	affected, err := epu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (epu *EventParticipantUpdate) Exec(ctx context.Context) error {
	_, err := epu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (epu *EventParticipantUpdate) ExecX(ctx context.Context) {
	if err := epu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (epu *EventParticipantUpdate) defaults() error {
	if _, ok := epu.mutation.UpdatedAt(); !ok {
		if eventparticipant.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized eventparticipant.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := eventparticipant.UpdateDefaultUpdatedAt()
		epu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (epu *EventParticipantUpdate) check() error {
	if v, ok := epu.mutation.AttendanceMethod(); ok {
		if err := eventparticipant.AttendanceMethodValidator(v); err != nil {
			return &ValidationError{Name: "attendance_method", err: fmt.Errorf(`ent: validator failed for field "EventParticipant.attendance_method": %w`, err)}
		}
	}
	if epu.mutation.EventCleared() && len(epu.mutation.EventIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "EventParticipant.event"`)
	}
	if epu.mutation.UserCleared() && len(epu.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "EventParticipant.user"`)
	}
	return nil
}

func (epu *EventParticipantUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := epu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(eventparticipant.Table, eventparticipant.Columns, sqlgraph.NewFieldSpec(eventparticipant.FieldID, field.TypeUUID))
	if ps := epu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := epu.mutation.DeletedAt(); ok {
		_spec.SetField(eventparticipant.FieldDeletedAt, field.TypeTime, value)
	}
	if epu.mutation.DeletedAtCleared() {
		_spec.ClearField(eventparticipant.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := epu.mutation.UpdatedAt(); ok {
		_spec.SetField(eventparticipant.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := epu.mutation.AttendanceMethod(); ok {
		_spec.SetField(eventparticipant.FieldAttendanceMethod, field.TypeEnum, value)
	}
	if value, ok := epu.mutation.AttendedAt(); ok {
		_spec.SetField(eventparticipant.FieldAttendedAt, field.TypeTime, value)
	}
	if epu.mutation.AttendedAtCleared() {
		_spec.ClearField(eventparticipant.FieldAttendedAt, field.TypeTime)
	}
	if epu.mutation.EventCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   eventparticipant.EventTable,
			Columns: []string{eventparticipant.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := epu.mutation.EventIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   eventparticipant.EventTable,
			Columns: []string{eventparticipant.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if epu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   eventparticipant.UserTable,
			Columns: []string{eventparticipant.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := epu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   eventparticipant.UserTable,
			Columns: []string{eventparticipant.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, epu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{eventparticipant.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	epu.mutation.done = true
	return n, nil
}

// EventParticipantUpdateOne is the builder for updating a single EventParticipant entity.
type EventParticipantUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *EventParticipantMutation
}

// SetDeletedAt sets the "deleted_at" field.
func (epuo *EventParticipantUpdateOne) SetDeletedAt(t time.Time) *EventParticipantUpdateOne {
	epuo.mutation.SetDeletedAt(t)
	return epuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (epuo *EventParticipantUpdateOne) SetNillableDeletedAt(t *time.Time) *EventParticipantUpdateOne {
	if t != nil {
		epuo.SetDeletedAt(*t)
	}
	return epuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (epuo *EventParticipantUpdateOne) ClearDeletedAt() *EventParticipantUpdateOne {
	epuo.mutation.ClearDeletedAt()
	return epuo
}

// SetUpdatedAt sets the "updated_at" field.
func (epuo *EventParticipantUpdateOne) SetUpdatedAt(t time.Time) *EventParticipantUpdateOne {
	epuo.mutation.SetUpdatedAt(t)
	return epuo
}

// SetEventID sets the "event_id" field.
func (epuo *EventParticipantUpdateOne) SetEventID(u uuid.UUID) *EventParticipantUpdateOne {
	epuo.mutation.SetEventID(u)
	return epuo
}

// SetNillableEventID sets the "event_id" field if the given value is not nil.
func (epuo *EventParticipantUpdateOne) SetNillableEventID(u *uuid.UUID) *EventParticipantUpdateOne {
	if u != nil {
		epuo.SetEventID(*u)
	}
	return epuo
}

// SetUserID sets the "user_id" field.
func (epuo *EventParticipantUpdateOne) SetUserID(u uuid.UUID) *EventParticipantUpdateOne {
	epuo.mutation.SetUserID(u)
	return epuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (epuo *EventParticipantUpdateOne) SetNillableUserID(u *uuid.UUID) *EventParticipantUpdateOne {
	if u != nil {
		epuo.SetUserID(*u)
	}
	return epuo
}

// SetAttendanceMethod sets the "attendance_method" field.
func (epuo *EventParticipantUpdateOne) SetAttendanceMethod(em eventparticipant.AttendanceMethod) *EventParticipantUpdateOne {
	epuo.mutation.SetAttendanceMethod(em)
	return epuo
}

// SetNillableAttendanceMethod sets the "attendance_method" field if the given value is not nil.
func (epuo *EventParticipantUpdateOne) SetNillableAttendanceMethod(em *eventparticipant.AttendanceMethod) *EventParticipantUpdateOne {
	if em != nil {
		epuo.SetAttendanceMethod(*em)
	}
	return epuo
}

// SetAttendedAt sets the "attended_at" field.
func (epuo *EventParticipantUpdateOne) SetAttendedAt(t time.Time) *EventParticipantUpdateOne {
	epuo.mutation.SetAttendedAt(t)
	return epuo
}

// SetNillableAttendedAt sets the "attended_at" field if the given value is not nil.
func (epuo *EventParticipantUpdateOne) SetNillableAttendedAt(t *time.Time) *EventParticipantUpdateOne {
	if t != nil {
		epuo.SetAttendedAt(*t)
	}
	return epuo
}

// ClearAttendedAt clears the value of the "attended_at" field.
func (epuo *EventParticipantUpdateOne) ClearAttendedAt() *EventParticipantUpdateOne {
	epuo.mutation.ClearAttendedAt()
	return epuo
}

// SetEvent sets the "event" edge to the Event entity.
func (epuo *EventParticipantUpdateOne) SetEvent(e *Event) *EventParticipantUpdateOne {
	return epuo.SetEventID(e.ID)
}

// SetUser sets the "user" edge to the User entity.
func (epuo *EventParticipantUpdateOne) SetUser(u *User) *EventParticipantUpdateOne {
	return epuo.SetUserID(u.ID)
}

// Mutation returns the EventParticipantMutation object of the builder.
func (epuo *EventParticipantUpdateOne) Mutation() *EventParticipantMutation {
	return epuo.mutation
}

// ClearEvent clears the "event" edge to the Event entity.
func (epuo *EventParticipantUpdateOne) ClearEvent() *EventParticipantUpdateOne {
	epuo.mutation.ClearEvent()
	return epuo
}

// ClearUser clears the "user" edge to the User entity.
func (epuo *EventParticipantUpdateOne) ClearUser() *EventParticipantUpdateOne {
	epuo.mutation.ClearUser()
	return epuo
}

// Where appends a list predicates to the EventParticipantUpdate builder.
func (epuo *EventParticipantUpdateOne) Where(ps ...predicate.EventParticipant) *EventParticipantUpdateOne {
	epuo.mutation.Where(ps...)
	return epuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (epuo *EventParticipantUpdateOne) Select(field string, fields ...string) *EventParticipantUpdateOne {
	epuo.fields = append([]string{field}, fields...)
	return epuo
}

// Save executes the query and returns the updated EventParticipant entity.
func (epuo *EventParticipantUpdateOne) Save(ctx context.Context) (*EventParticipant, error) {
	if err := epuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, epuo.sqlSave, epuo.mutation, epuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (epuo *EventParticipantUpdateOne) SaveX(ctx context.Context) *EventParticipant {
	node, err := epuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (epuo *EventParticipantUpdateOne) Exec(ctx context.Context) error {
	_, err := epuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (epuo *EventParticipantUpdateOne) ExecX(ctx context.Context) {
	if err := epuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (epuo *EventParticipantUpdateOne) defaults() error {
	if _, ok := epuo.mutation.UpdatedAt(); !ok {
		if eventparticipant.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized eventparticipant.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := eventparticipant.UpdateDefaultUpdatedAt()
		epuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (epuo *EventParticipantUpdateOne) check() error {
	if v, ok := epuo.mutation.AttendanceMethod(); ok {
		if err := eventparticipant.AttendanceMethodValidator(v); err != nil {
			return &ValidationError{Name: "attendance_method", err: fmt.Errorf(`ent: validator failed for field "EventParticipant.attendance_method": %w`, err)}
		}
	}
	if epuo.mutation.EventCleared() && len(epuo.mutation.EventIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "EventParticipant.event"`)
	}
	if epuo.mutation.UserCleared() && len(epuo.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "EventParticipant.user"`)
	}
	return nil
}

func (epuo *EventParticipantUpdateOne) sqlSave(ctx context.Context) (_node *EventParticipant, err error) {
	if err := epuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(eventparticipant.Table, eventparticipant.Columns, sqlgraph.NewFieldSpec(eventparticipant.FieldID, field.TypeUUID))
	id, ok := epuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "EventParticipant.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := epuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, eventparticipant.FieldID)
		for _, f := range fields {
			if !eventparticipant.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != eventparticipant.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := epuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := epuo.mutation.DeletedAt(); ok {
		_spec.SetField(eventparticipant.FieldDeletedAt, field.TypeTime, value)
	}
	if epuo.mutation.DeletedAtCleared() {
		_spec.ClearField(eventparticipant.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := epuo.mutation.UpdatedAt(); ok {
		_spec.SetField(eventparticipant.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := epuo.mutation.AttendanceMethod(); ok {
		_spec.SetField(eventparticipant.FieldAttendanceMethod, field.TypeEnum, value)
	}
	if value, ok := epuo.mutation.AttendedAt(); ok {
		_spec.SetField(eventparticipant.FieldAttendedAt, field.TypeTime, value)
	}
	if epuo.mutation.AttendedAtCleared() {
		_spec.ClearField(eventparticipant.FieldAttendedAt, field.TypeTime)
	}
	if epuo.mutation.EventCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   eventparticipant.EventTable,
			Columns: []string{eventparticipant.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := epuo.mutation.EventIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   eventparticipant.EventTable,
			Columns: []string{eventparticipant.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if epuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   eventparticipant.UserTable,
			Columns: []string{eventparticipant.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := epuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   eventparticipant.UserTable,
			Columns: []string{eventparticipant.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &EventParticipant{config: epuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, epuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{eventparticipant.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	epuo.mutation.done = true
	return _node, nil
}
