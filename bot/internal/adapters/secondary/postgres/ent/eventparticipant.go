// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"

	"github.com/Badsnus/cu-clubs-bot/bot/internal/adapters/secondary/postgres/ent/event"
	"github.com/Badsnus/cu-clubs-bot/bot/internal/adapters/secondary/postgres/ent/eventparticipant"
	"github.com/Badsnus/cu-clubs-bot/bot/internal/adapters/secondary/postgres/ent/user"
)

// EventParticipant is the model entity for the EventParticipant schema.
type EventParticipant struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// EventID holds the value of the "event_id" field.
	EventID uuid.UUID `json:"event_id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID uuid.UUID `json:"user_id,omitempty"`
	// Посещено ли мероприятие и с помощью чего оно было посещено
	AttendanceMethod eventparticipant.AttendanceMethod `json:"attendance_method,omitempty"`
	// Время посещения мероприятия
	AttendedAt time.Time `json:"attended_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the EventParticipantQuery when eager-loading is set.
	Edges        EventParticipantEdges `json:"edges"`
	selectValues sql.SelectValues
}

// EventParticipantEdges holds the relations/edges for other nodes in the graph.
type EventParticipantEdges struct {
	// Event holds the value of the event edge.
	Event *Event `json:"event,omitempty"`
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// EventOrErr returns the Event value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EventParticipantEdges) EventOrErr() (*Event, error) {
	if e.Event != nil {
		return e.Event, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: event.Label}
	}
	return nil, &NotLoadedError{edge: "event"}
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EventParticipantEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*EventParticipant) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case eventparticipant.FieldAttendanceMethod:
			values[i] = new(sql.NullString)
		case eventparticipant.FieldDeletedAt, eventparticipant.FieldCreatedAt, eventparticipant.FieldUpdatedAt, eventparticipant.FieldAttendedAt:
			values[i] = new(sql.NullTime)
		case eventparticipant.FieldID, eventparticipant.FieldEventID, eventparticipant.FieldUserID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the EventParticipant fields.
func (ep *EventParticipant) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case eventparticipant.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				ep.ID = *value
			}
		case eventparticipant.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				ep.DeletedAt = value.Time
			}
		case eventparticipant.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ep.CreatedAt = value.Time
			}
		case eventparticipant.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ep.UpdatedAt = value.Time
			}
		case eventparticipant.FieldEventID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field event_id", values[i])
			} else if value != nil {
				ep.EventID = *value
			}
		case eventparticipant.FieldUserID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value != nil {
				ep.UserID = *value
			}
		case eventparticipant.FieldAttendanceMethod:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field attendance_method", values[i])
			} else if value.Valid {
				ep.AttendanceMethod = eventparticipant.AttendanceMethod(value.String)
			}
		case eventparticipant.FieldAttendedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field attended_at", values[i])
			} else if value.Valid {
				ep.AttendedAt = value.Time
			}
		default:
			ep.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the EventParticipant.
// This includes values selected through modifiers, order, etc.
func (ep *EventParticipant) Value(name string) (ent.Value, error) {
	return ep.selectValues.Get(name)
}

// QueryEvent queries the "event" edge of the EventParticipant entity.
func (ep *EventParticipant) QueryEvent() *EventQuery {
	return NewEventParticipantClient(ep.config).QueryEvent(ep)
}

// QueryUser queries the "user" edge of the EventParticipant entity.
func (ep *EventParticipant) QueryUser() *UserQuery {
	return NewEventParticipantClient(ep.config).QueryUser(ep)
}

// Update returns a builder for updating this EventParticipant.
// Note that you need to call EventParticipant.Unwrap() before calling this method if this EventParticipant
// was returned from a transaction, and the transaction was committed or rolled back.
func (ep *EventParticipant) Update() *EventParticipantUpdateOne {
	return NewEventParticipantClient(ep.config).UpdateOne(ep)
}

// Unwrap unwraps the EventParticipant entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ep *EventParticipant) Unwrap() *EventParticipant {
	_tx, ok := ep.config.driver.(*txDriver)
	if !ok {
		panic("ent: EventParticipant is not a transactional entity")
	}
	ep.config.driver = _tx.drv
	return ep
}

// String implements the fmt.Stringer.
func (ep *EventParticipant) String() string {
	var builder strings.Builder
	builder.WriteString("EventParticipant(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ep.ID))
	builder.WriteString("deleted_at=")
	builder.WriteString(ep.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(ep.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(ep.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("event_id=")
	builder.WriteString(fmt.Sprintf("%v", ep.EventID))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", ep.UserID))
	builder.WriteString(", ")
	builder.WriteString("attendance_method=")
	builder.WriteString(fmt.Sprintf("%v", ep.AttendanceMethod))
	builder.WriteString(", ")
	builder.WriteString("attended_at=")
	builder.WriteString(ep.AttendedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// EventParticipants is a parsable slice of EventParticipant.
type EventParticipants []*EventParticipant
