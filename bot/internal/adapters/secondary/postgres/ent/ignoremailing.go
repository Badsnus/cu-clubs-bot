// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"

	"github.com/Badsnus/cu-clubs-bot/bot/internal/adapters/secondary/postgres/ent/club"
	"github.com/Badsnus/cu-clubs-bot/bot/internal/adapters/secondary/postgres/ent/ignoremailing"
	"github.com/Badsnus/cu-clubs-bot/bot/internal/adapters/secondary/postgres/ent/user"
)

// IgnoreMailing is the model entity for the IgnoreMailing schema.
type IgnoreMailing struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID uuid.UUID `json:"user_id,omitempty"`
	// ClubID holds the value of the "club_id" field.
	ClubID uuid.UUID `json:"club_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the IgnoreMailingQuery when eager-loading is set.
	Edges        IgnoreMailingEdges `json:"edges"`
	selectValues sql.SelectValues
}

// IgnoreMailingEdges holds the relations/edges for other nodes in the graph.
type IgnoreMailingEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// Club holds the value of the club edge.
	Club *Club `json:"club,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e IgnoreMailingEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// ClubOrErr returns the Club value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e IgnoreMailingEdges) ClubOrErr() (*Club, error) {
	if e.Club != nil {
		return e.Club, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: club.Label}
	}
	return nil, &NotLoadedError{edge: "club"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*IgnoreMailing) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case ignoremailing.FieldDeletedAt, ignoremailing.FieldCreatedAt, ignoremailing.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case ignoremailing.FieldID, ignoremailing.FieldUserID, ignoremailing.FieldClubID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the IgnoreMailing fields.
func (im *IgnoreMailing) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case ignoremailing.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				im.ID = *value
			}
		case ignoremailing.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				im.DeletedAt = value.Time
			}
		case ignoremailing.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				im.CreatedAt = value.Time
			}
		case ignoremailing.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				im.UpdatedAt = value.Time
			}
		case ignoremailing.FieldUserID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value != nil {
				im.UserID = *value
			}
		case ignoremailing.FieldClubID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field club_id", values[i])
			} else if value != nil {
				im.ClubID = *value
			}
		default:
			im.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the IgnoreMailing.
// This includes values selected through modifiers, order, etc.
func (im *IgnoreMailing) Value(name string) (ent.Value, error) {
	return im.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the IgnoreMailing entity.
func (im *IgnoreMailing) QueryUser() *UserQuery {
	return NewIgnoreMailingClient(im.config).QueryUser(im)
}

// QueryClub queries the "club" edge of the IgnoreMailing entity.
func (im *IgnoreMailing) QueryClub() *ClubQuery {
	return NewIgnoreMailingClient(im.config).QueryClub(im)
}

// Update returns a builder for updating this IgnoreMailing.
// Note that you need to call IgnoreMailing.Unwrap() before calling this method if this IgnoreMailing
// was returned from a transaction, and the transaction was committed or rolled back.
func (im *IgnoreMailing) Update() *IgnoreMailingUpdateOne {
	return NewIgnoreMailingClient(im.config).UpdateOne(im)
}

// Unwrap unwraps the IgnoreMailing entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (im *IgnoreMailing) Unwrap() *IgnoreMailing {
	_tx, ok := im.config.driver.(*txDriver)
	if !ok {
		panic("ent: IgnoreMailing is not a transactional entity")
	}
	im.config.driver = _tx.drv
	return im
}

// String implements the fmt.Stringer.
func (im *IgnoreMailing) String() string {
	var builder strings.Builder
	builder.WriteString("IgnoreMailing(")
	builder.WriteString(fmt.Sprintf("id=%v, ", im.ID))
	builder.WriteString("deleted_at=")
	builder.WriteString(im.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(im.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(im.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", im.UserID))
	builder.WriteString(", ")
	builder.WriteString("club_id=")
	builder.WriteString(fmt.Sprintf("%v", im.ClubID))
	builder.WriteByte(')')
	return builder.String()
}

// IgnoreMailings is a parsable slice of IgnoreMailing.
type IgnoreMailings []*IgnoreMailing
