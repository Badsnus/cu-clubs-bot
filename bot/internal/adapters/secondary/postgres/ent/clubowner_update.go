// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"

	"github.com/Badsnus/cu-clubs-bot/bot/internal/adapters/secondary/postgres/ent/club"
	"github.com/Badsnus/cu-clubs-bot/bot/internal/adapters/secondary/postgres/ent/clubowner"
	"github.com/Badsnus/cu-clubs-bot/bot/internal/adapters/secondary/postgres/ent/predicate"
	"github.com/Badsnus/cu-clubs-bot/bot/internal/adapters/secondary/postgres/ent/user"
)

// ClubOwnerUpdate is the builder for updating ClubOwner entities.
type ClubOwnerUpdate struct {
	config
	hooks    []Hook
	mutation *ClubOwnerMutation
}

// Where appends a list predicates to the ClubOwnerUpdate builder.
func (cou *ClubOwnerUpdate) Where(ps ...predicate.ClubOwner) *ClubOwnerUpdate {
	cou.mutation.Where(ps...)
	return cou
}

// SetDeletedAt sets the "deleted_at" field.
func (cou *ClubOwnerUpdate) SetDeletedAt(t time.Time) *ClubOwnerUpdate {
	cou.mutation.SetDeletedAt(t)
	return cou
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (cou *ClubOwnerUpdate) SetNillableDeletedAt(t *time.Time) *ClubOwnerUpdate {
	if t != nil {
		cou.SetDeletedAt(*t)
	}
	return cou
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (cou *ClubOwnerUpdate) ClearDeletedAt() *ClubOwnerUpdate {
	cou.mutation.ClearDeletedAt()
	return cou
}

// SetUpdatedAt sets the "updated_at" field.
func (cou *ClubOwnerUpdate) SetUpdatedAt(t time.Time) *ClubOwnerUpdate {
	cou.mutation.SetUpdatedAt(t)
	return cou
}

// SetUserID sets the "user_id" field.
func (cou *ClubOwnerUpdate) SetUserID(u uuid.UUID) *ClubOwnerUpdate {
	cou.mutation.SetUserID(u)
	return cou
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (cou *ClubOwnerUpdate) SetNillableUserID(u *uuid.UUID) *ClubOwnerUpdate {
	if u != nil {
		cou.SetUserID(*u)
	}
	return cou
}

// SetClubID sets the "club_id" field.
func (cou *ClubOwnerUpdate) SetClubID(u uuid.UUID) *ClubOwnerUpdate {
	cou.mutation.SetClubID(u)
	return cou
}

// SetNillableClubID sets the "club_id" field if the given value is not nil.
func (cou *ClubOwnerUpdate) SetNillableClubID(u *uuid.UUID) *ClubOwnerUpdate {
	if u != nil {
		cou.SetClubID(*u)
	}
	return cou
}

// SetWarnings sets the "warnings" field.
func (cou *ClubOwnerUpdate) SetWarnings(b bool) *ClubOwnerUpdate {
	cou.mutation.SetWarnings(b)
	return cou
}

// SetNillableWarnings sets the "warnings" field if the given value is not nil.
func (cou *ClubOwnerUpdate) SetNillableWarnings(b *bool) *ClubOwnerUpdate {
	if b != nil {
		cou.SetWarnings(*b)
	}
	return cou
}

// SetUser sets the "user" edge to the User entity.
func (cou *ClubOwnerUpdate) SetUser(u *User) *ClubOwnerUpdate {
	return cou.SetUserID(u.ID)
}

// SetClub sets the "club" edge to the Club entity.
func (cou *ClubOwnerUpdate) SetClub(c *Club) *ClubOwnerUpdate {
	return cou.SetClubID(c.ID)
}

// Mutation returns the ClubOwnerMutation object of the builder.
func (cou *ClubOwnerUpdate) Mutation() *ClubOwnerMutation {
	return cou.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (cou *ClubOwnerUpdate) ClearUser() *ClubOwnerUpdate {
	cou.mutation.ClearUser()
	return cou
}

// ClearClub clears the "club" edge to the Club entity.
func (cou *ClubOwnerUpdate) ClearClub() *ClubOwnerUpdate {
	cou.mutation.ClearClub()
	return cou
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cou *ClubOwnerUpdate) Save(ctx context.Context) (int, error) {
	if err := cou.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, cou.sqlSave, cou.mutation, cou.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cou *ClubOwnerUpdate) SaveX(ctx context.Context) int {
	affected, err := cou.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cou *ClubOwnerUpdate) Exec(ctx context.Context) error {
	_, err := cou.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cou *ClubOwnerUpdate) ExecX(ctx context.Context) {
	if err := cou.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cou *ClubOwnerUpdate) defaults() error {
	if _, ok := cou.mutation.UpdatedAt(); !ok {
		if clubowner.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized clubowner.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := clubowner.UpdateDefaultUpdatedAt()
		cou.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (cou *ClubOwnerUpdate) check() error {
	if cou.mutation.UserCleared() && len(cou.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ClubOwner.user"`)
	}
	if cou.mutation.ClubCleared() && len(cou.mutation.ClubIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ClubOwner.club"`)
	}
	return nil
}

func (cou *ClubOwnerUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cou.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(clubowner.Table, clubowner.Columns, sqlgraph.NewFieldSpec(clubowner.FieldID, field.TypeUUID))
	if ps := cou.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cou.mutation.DeletedAt(); ok {
		_spec.SetField(clubowner.FieldDeletedAt, field.TypeTime, value)
	}
	if cou.mutation.DeletedAtCleared() {
		_spec.ClearField(clubowner.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := cou.mutation.UpdatedAt(); ok {
		_spec.SetField(clubowner.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := cou.mutation.Warnings(); ok {
		_spec.SetField(clubowner.FieldWarnings, field.TypeBool, value)
	}
	if cou.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   clubowner.UserTable,
			Columns: []string{clubowner.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cou.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   clubowner.UserTable,
			Columns: []string{clubowner.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cou.mutation.ClubCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   clubowner.ClubTable,
			Columns: []string{clubowner.ClubColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(club.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cou.mutation.ClubIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   clubowner.ClubTable,
			Columns: []string{clubowner.ClubColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(club.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cou.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{clubowner.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cou.mutation.done = true
	return n, nil
}

// ClubOwnerUpdateOne is the builder for updating a single ClubOwner entity.
type ClubOwnerUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ClubOwnerMutation
}

// SetDeletedAt sets the "deleted_at" field.
func (couo *ClubOwnerUpdateOne) SetDeletedAt(t time.Time) *ClubOwnerUpdateOne {
	couo.mutation.SetDeletedAt(t)
	return couo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (couo *ClubOwnerUpdateOne) SetNillableDeletedAt(t *time.Time) *ClubOwnerUpdateOne {
	if t != nil {
		couo.SetDeletedAt(*t)
	}
	return couo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (couo *ClubOwnerUpdateOne) ClearDeletedAt() *ClubOwnerUpdateOne {
	couo.mutation.ClearDeletedAt()
	return couo
}

// SetUpdatedAt sets the "updated_at" field.
func (couo *ClubOwnerUpdateOne) SetUpdatedAt(t time.Time) *ClubOwnerUpdateOne {
	couo.mutation.SetUpdatedAt(t)
	return couo
}

// SetUserID sets the "user_id" field.
func (couo *ClubOwnerUpdateOne) SetUserID(u uuid.UUID) *ClubOwnerUpdateOne {
	couo.mutation.SetUserID(u)
	return couo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (couo *ClubOwnerUpdateOne) SetNillableUserID(u *uuid.UUID) *ClubOwnerUpdateOne {
	if u != nil {
		couo.SetUserID(*u)
	}
	return couo
}

// SetClubID sets the "club_id" field.
func (couo *ClubOwnerUpdateOne) SetClubID(u uuid.UUID) *ClubOwnerUpdateOne {
	couo.mutation.SetClubID(u)
	return couo
}

// SetNillableClubID sets the "club_id" field if the given value is not nil.
func (couo *ClubOwnerUpdateOne) SetNillableClubID(u *uuid.UUID) *ClubOwnerUpdateOne {
	if u != nil {
		couo.SetClubID(*u)
	}
	return couo
}

// SetWarnings sets the "warnings" field.
func (couo *ClubOwnerUpdateOne) SetWarnings(b bool) *ClubOwnerUpdateOne {
	couo.mutation.SetWarnings(b)
	return couo
}

// SetNillableWarnings sets the "warnings" field if the given value is not nil.
func (couo *ClubOwnerUpdateOne) SetNillableWarnings(b *bool) *ClubOwnerUpdateOne {
	if b != nil {
		couo.SetWarnings(*b)
	}
	return couo
}

// SetUser sets the "user" edge to the User entity.
func (couo *ClubOwnerUpdateOne) SetUser(u *User) *ClubOwnerUpdateOne {
	return couo.SetUserID(u.ID)
}

// SetClub sets the "club" edge to the Club entity.
func (couo *ClubOwnerUpdateOne) SetClub(c *Club) *ClubOwnerUpdateOne {
	return couo.SetClubID(c.ID)
}

// Mutation returns the ClubOwnerMutation object of the builder.
func (couo *ClubOwnerUpdateOne) Mutation() *ClubOwnerMutation {
	return couo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (couo *ClubOwnerUpdateOne) ClearUser() *ClubOwnerUpdateOne {
	couo.mutation.ClearUser()
	return couo
}

// ClearClub clears the "club" edge to the Club entity.
func (couo *ClubOwnerUpdateOne) ClearClub() *ClubOwnerUpdateOne {
	couo.mutation.ClearClub()
	return couo
}

// Where appends a list predicates to the ClubOwnerUpdate builder.
func (couo *ClubOwnerUpdateOne) Where(ps ...predicate.ClubOwner) *ClubOwnerUpdateOne {
	couo.mutation.Where(ps...)
	return couo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (couo *ClubOwnerUpdateOne) Select(field string, fields ...string) *ClubOwnerUpdateOne {
	couo.fields = append([]string{field}, fields...)
	return couo
}

// Save executes the query and returns the updated ClubOwner entity.
func (couo *ClubOwnerUpdateOne) Save(ctx context.Context) (*ClubOwner, error) {
	if err := couo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, couo.sqlSave, couo.mutation, couo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (couo *ClubOwnerUpdateOne) SaveX(ctx context.Context) *ClubOwner {
	node, err := couo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (couo *ClubOwnerUpdateOne) Exec(ctx context.Context) error {
	_, err := couo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (couo *ClubOwnerUpdateOne) ExecX(ctx context.Context) {
	if err := couo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (couo *ClubOwnerUpdateOne) defaults() error {
	if _, ok := couo.mutation.UpdatedAt(); !ok {
		if clubowner.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized clubowner.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := clubowner.UpdateDefaultUpdatedAt()
		couo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (couo *ClubOwnerUpdateOne) check() error {
	if couo.mutation.UserCleared() && len(couo.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ClubOwner.user"`)
	}
	if couo.mutation.ClubCleared() && len(couo.mutation.ClubIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ClubOwner.club"`)
	}
	return nil
}

func (couo *ClubOwnerUpdateOne) sqlSave(ctx context.Context) (_node *ClubOwner, err error) {
	if err := couo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(clubowner.Table, clubowner.Columns, sqlgraph.NewFieldSpec(clubowner.FieldID, field.TypeUUID))
	id, ok := couo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ClubOwner.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := couo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, clubowner.FieldID)
		for _, f := range fields {
			if !clubowner.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != clubowner.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := couo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := couo.mutation.DeletedAt(); ok {
		_spec.SetField(clubowner.FieldDeletedAt, field.TypeTime, value)
	}
	if couo.mutation.DeletedAtCleared() {
		_spec.ClearField(clubowner.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := couo.mutation.UpdatedAt(); ok {
		_spec.SetField(clubowner.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := couo.mutation.Warnings(); ok {
		_spec.SetField(clubowner.FieldWarnings, field.TypeBool, value)
	}
	if couo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   clubowner.UserTable,
			Columns: []string{clubowner.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := couo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   clubowner.UserTable,
			Columns: []string{clubowner.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if couo.mutation.ClubCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   clubowner.ClubTable,
			Columns: []string{clubowner.ClubColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(club.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := couo.mutation.ClubIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   clubowner.ClubTable,
			Columns: []string{clubowner.ClubColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(club.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ClubOwner{config: couo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, couo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{clubowner.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	couo.mutation.done = true
	return _node, nil
}
