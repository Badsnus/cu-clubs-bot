// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"

	"github.com/Badsnus/cu-clubs-bot/bot/internal/adapters/secondary/postgres/ent/club"
	"github.com/Badsnus/cu-clubs-bot/bot/internal/adapters/secondary/postgres/ent/clubowner"
	"github.com/Badsnus/cu-clubs-bot/bot/internal/adapters/secondary/postgres/ent/predicate"
	"github.com/Badsnus/cu-clubs-bot/bot/internal/adapters/secondary/postgres/ent/user"
)

// ClubOwnerQuery is the builder for querying ClubOwner entities.
type ClubOwnerQuery struct {
	config
	ctx        *QueryContext
	order      []clubowner.OrderOption
	inters     []Interceptor
	predicates []predicate.ClubOwner
	withUser   *UserQuery
	withClub   *ClubQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the ClubOwnerQuery builder.
func (coq *ClubOwnerQuery) Where(ps ...predicate.ClubOwner) *ClubOwnerQuery {
	coq.predicates = append(coq.predicates, ps...)
	return coq
}

// Limit the number of records to be returned by this query.
func (coq *ClubOwnerQuery) Limit(limit int) *ClubOwnerQuery {
	coq.ctx.Limit = &limit
	return coq
}

// Offset to start from.
func (coq *ClubOwnerQuery) Offset(offset int) *ClubOwnerQuery {
	coq.ctx.Offset = &offset
	return coq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (coq *ClubOwnerQuery) Unique(unique bool) *ClubOwnerQuery {
	coq.ctx.Unique = &unique
	return coq
}

// Order specifies how the records should be ordered.
func (coq *ClubOwnerQuery) Order(o ...clubowner.OrderOption) *ClubOwnerQuery {
	coq.order = append(coq.order, o...)
	return coq
}

// QueryUser chains the current query on the "user" edge.
func (coq *ClubOwnerQuery) QueryUser() *UserQuery {
	query := (&UserClient{config: coq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := coq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := coq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(clubowner.Table, clubowner.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, clubowner.UserTable, clubowner.UserColumn),
		)
		fromU = sqlgraph.SetNeighbors(coq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryClub chains the current query on the "club" edge.
func (coq *ClubOwnerQuery) QueryClub() *ClubQuery {
	query := (&ClubClient{config: coq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := coq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := coq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(clubowner.Table, clubowner.FieldID, selector),
			sqlgraph.To(club.Table, club.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, clubowner.ClubTable, clubowner.ClubColumn),
		)
		fromU = sqlgraph.SetNeighbors(coq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first ClubOwner entity from the query.
// Returns a *NotFoundError when no ClubOwner was found.
func (coq *ClubOwnerQuery) First(ctx context.Context) (*ClubOwner, error) {
	nodes, err := coq.Limit(1).All(setContextOp(ctx, coq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{clubowner.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (coq *ClubOwnerQuery) FirstX(ctx context.Context) *ClubOwner {
	node, err := coq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first ClubOwner ID from the query.
// Returns a *NotFoundError when no ClubOwner ID was found.
func (coq *ClubOwnerQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = coq.Limit(1).IDs(setContextOp(ctx, coq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{clubowner.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (coq *ClubOwnerQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := coq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single ClubOwner entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one ClubOwner entity is found.
// Returns a *NotFoundError when no ClubOwner entities are found.
func (coq *ClubOwnerQuery) Only(ctx context.Context) (*ClubOwner, error) {
	nodes, err := coq.Limit(2).All(setContextOp(ctx, coq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{clubowner.Label}
	default:
		return nil, &NotSingularError{clubowner.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (coq *ClubOwnerQuery) OnlyX(ctx context.Context) *ClubOwner {
	node, err := coq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only ClubOwner ID in the query.
// Returns a *NotSingularError when more than one ClubOwner ID is found.
// Returns a *NotFoundError when no entities are found.
func (coq *ClubOwnerQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = coq.Limit(2).IDs(setContextOp(ctx, coq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{clubowner.Label}
	default:
		err = &NotSingularError{clubowner.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (coq *ClubOwnerQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := coq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of ClubOwners.
func (coq *ClubOwnerQuery) All(ctx context.Context) ([]*ClubOwner, error) {
	ctx = setContextOp(ctx, coq.ctx, ent.OpQueryAll)
	if err := coq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*ClubOwner, *ClubOwnerQuery]()
	return withInterceptors[[]*ClubOwner](ctx, coq, qr, coq.inters)
}

// AllX is like All, but panics if an error occurs.
func (coq *ClubOwnerQuery) AllX(ctx context.Context) []*ClubOwner {
	nodes, err := coq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of ClubOwner IDs.
func (coq *ClubOwnerQuery) IDs(ctx context.Context) (ids []uuid.UUID, err error) {
	if coq.ctx.Unique == nil && coq.path != nil {
		coq.Unique(true)
	}
	ctx = setContextOp(ctx, coq.ctx, ent.OpQueryIDs)
	if err = coq.Select(clubowner.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (coq *ClubOwnerQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := coq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (coq *ClubOwnerQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, coq.ctx, ent.OpQueryCount)
	if err := coq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, coq, querierCount[*ClubOwnerQuery](), coq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (coq *ClubOwnerQuery) CountX(ctx context.Context) int {
	count, err := coq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (coq *ClubOwnerQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, coq.ctx, ent.OpQueryExist)
	switch _, err := coq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (coq *ClubOwnerQuery) ExistX(ctx context.Context) bool {
	exist, err := coq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the ClubOwnerQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (coq *ClubOwnerQuery) Clone() *ClubOwnerQuery {
	if coq == nil {
		return nil
	}
	return &ClubOwnerQuery{
		config:     coq.config,
		ctx:        coq.ctx.Clone(),
		order:      append([]clubowner.OrderOption{}, coq.order...),
		inters:     append([]Interceptor{}, coq.inters...),
		predicates: append([]predicate.ClubOwner{}, coq.predicates...),
		withUser:   coq.withUser.Clone(),
		withClub:   coq.withClub.Clone(),
		// clone intermediate query.
		sql:  coq.sql.Clone(),
		path: coq.path,
	}
}

// WithUser tells the query-builder to eager-load the nodes that are connected to
// the "user" edge. The optional arguments are used to configure the query builder of the edge.
func (coq *ClubOwnerQuery) WithUser(opts ...func(*UserQuery)) *ClubOwnerQuery {
	query := (&UserClient{config: coq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	coq.withUser = query
	return coq
}

// WithClub tells the query-builder to eager-load the nodes that are connected to
// the "club" edge. The optional arguments are used to configure the query builder of the edge.
func (coq *ClubOwnerQuery) WithClub(opts ...func(*ClubQuery)) *ClubOwnerQuery {
	query := (&ClubClient{config: coq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	coq.withClub = query
	return coq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		DeletedAt time.Time `json:"deleted_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.ClubOwner.Query().
//		GroupBy(clubowner.FieldDeletedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (coq *ClubOwnerQuery) GroupBy(field string, fields ...string) *ClubOwnerGroupBy {
	coq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &ClubOwnerGroupBy{build: coq}
	grbuild.flds = &coq.ctx.Fields
	grbuild.label = clubowner.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		DeletedAt time.Time `json:"deleted_at,omitempty"`
//	}
//
//	client.ClubOwner.Query().
//		Select(clubowner.FieldDeletedAt).
//		Scan(ctx, &v)
func (coq *ClubOwnerQuery) Select(fields ...string) *ClubOwnerSelect {
	coq.ctx.Fields = append(coq.ctx.Fields, fields...)
	sbuild := &ClubOwnerSelect{ClubOwnerQuery: coq}
	sbuild.label = clubowner.Label
	sbuild.flds, sbuild.scan = &coq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a ClubOwnerSelect configured with the given aggregations.
func (coq *ClubOwnerQuery) Aggregate(fns ...AggregateFunc) *ClubOwnerSelect {
	return coq.Select().Aggregate(fns...)
}

func (coq *ClubOwnerQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range coq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, coq); err != nil {
				return err
			}
		}
	}
	for _, f := range coq.ctx.Fields {
		if !clubowner.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if coq.path != nil {
		prev, err := coq.path(ctx)
		if err != nil {
			return err
		}
		coq.sql = prev
	}
	return nil
}

func (coq *ClubOwnerQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*ClubOwner, error) {
	var (
		nodes       = []*ClubOwner{}
		_spec       = coq.querySpec()
		loadedTypes = [2]bool{
			coq.withUser != nil,
			coq.withClub != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*ClubOwner).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &ClubOwner{config: coq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, coq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := coq.withUser; query != nil {
		if err := coq.loadUser(ctx, query, nodes, nil,
			func(n *ClubOwner, e *User) { n.Edges.User = e }); err != nil {
			return nil, err
		}
	}
	if query := coq.withClub; query != nil {
		if err := coq.loadClub(ctx, query, nodes, nil,
			func(n *ClubOwner, e *Club) { n.Edges.Club = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (coq *ClubOwnerQuery) loadUser(ctx context.Context, query *UserQuery, nodes []*ClubOwner, init func(*ClubOwner), assign func(*ClubOwner, *User)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*ClubOwner)
	for i := range nodes {
		fk := nodes[i].UserID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(user.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "user_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (coq *ClubOwnerQuery) loadClub(ctx context.Context, query *ClubQuery, nodes []*ClubOwner, init func(*ClubOwner), assign func(*ClubOwner, *Club)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*ClubOwner)
	for i := range nodes {
		fk := nodes[i].ClubID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(club.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "club_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (coq *ClubOwnerQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := coq.querySpec()
	_spec.Node.Columns = coq.ctx.Fields
	if len(coq.ctx.Fields) > 0 {
		_spec.Unique = coq.ctx.Unique != nil && *coq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, coq.driver, _spec)
}

func (coq *ClubOwnerQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(clubowner.Table, clubowner.Columns, sqlgraph.NewFieldSpec(clubowner.FieldID, field.TypeUUID))
	_spec.From = coq.sql
	if unique := coq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if coq.path != nil {
		_spec.Unique = true
	}
	if fields := coq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, clubowner.FieldID)
		for i := range fields {
			if fields[i] != clubowner.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if coq.withUser != nil {
			_spec.Node.AddColumnOnce(clubowner.FieldUserID)
		}
		if coq.withClub != nil {
			_spec.Node.AddColumnOnce(clubowner.FieldClubID)
		}
	}
	if ps := coq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := coq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := coq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := coq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (coq *ClubOwnerQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(coq.driver.Dialect())
	t1 := builder.Table(clubowner.Table)
	columns := coq.ctx.Fields
	if len(columns) == 0 {
		columns = clubowner.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if coq.sql != nil {
		selector = coq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if coq.ctx.Unique != nil && *coq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range coq.predicates {
		p(selector)
	}
	for _, p := range coq.order {
		p(selector)
	}
	if offset := coq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := coq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ClubOwnerGroupBy is the group-by builder for ClubOwner entities.
type ClubOwnerGroupBy struct {
	selector
	build *ClubOwnerQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (cogb *ClubOwnerGroupBy) Aggregate(fns ...AggregateFunc) *ClubOwnerGroupBy {
	cogb.fns = append(cogb.fns, fns...)
	return cogb
}

// Scan applies the selector query and scans the result into the given value.
func (cogb *ClubOwnerGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, cogb.build.ctx, ent.OpQueryGroupBy)
	if err := cogb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ClubOwnerQuery, *ClubOwnerGroupBy](ctx, cogb.build, cogb, cogb.build.inters, v)
}

func (cogb *ClubOwnerGroupBy) sqlScan(ctx context.Context, root *ClubOwnerQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(cogb.fns))
	for _, fn := range cogb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*cogb.flds)+len(cogb.fns))
		for _, f := range *cogb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*cogb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := cogb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// ClubOwnerSelect is the builder for selecting fields of ClubOwner entities.
type ClubOwnerSelect struct {
	*ClubOwnerQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (cos *ClubOwnerSelect) Aggregate(fns ...AggregateFunc) *ClubOwnerSelect {
	cos.fns = append(cos.fns, fns...)
	return cos
}

// Scan applies the selector query and scans the result into the given value.
func (cos *ClubOwnerSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, cos.ctx, ent.OpQuerySelect)
	if err := cos.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ClubOwnerQuery, *ClubOwnerSelect](ctx, cos.ClubOwnerQuery, cos, cos.inters, v)
}

func (cos *ClubOwnerSelect) sqlScan(ctx context.Context, root *ClubOwnerQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(cos.fns))
	for _, fn := range cos.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*cos.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := cos.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
