// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"

	"github.com/Badsnus/cu-clubs-bot/bot/internal/adapters/secondary/postgres/ent/club"
	"github.com/Badsnus/cu-clubs-bot/bot/internal/adapters/secondary/postgres/ent/event"
	"github.com/Badsnus/cu-clubs-bot/bot/internal/domain/valueobject"
)

// Event is the model entity for the Event schema.
type Event struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// ClubID holds the value of the "club_id" field.
	ClubID uuid.UUID `json:"club_id,omitempty"`
	// Название мероприятия
	Name string `json:"name,omitempty"`
	// Описание мероприятия
	Description string `json:"description,omitempty"`
	// Текст который отображается после регистрации пользователя на мероприятие
	AfterRegistrationText string `json:"after_registration_text,omitempty"`
	// Локация мероприятия
	Location string `json:"location,omitempty"`
	// Время начала мероприятия
	StartTime time.Time `json:"start_time,omitempty"`
	// Время завершения мероприятия
	EndTime time.Time `json:"end_time,omitempty"`
	// Время завершения регистрации на мероприятие
	RegistrationEndTime time.Time `json:"registration_end_time,omitempty"`
	// Максимальное количество участников на мероприятии
	MaxParticipants int `json:"max_participants,omitempty"`
	// Ожидаемое количество участников мероприятия (по достижении отпраялется варнинг)
	ExpectedParticipants int `json:"expected_participants,omitempty"`
	// Payload QR-кода
	QrPayload uuid.UUID `json:"qr_payload,omitempty"`
	// File ID сгенерированного qr-кода
	QrFileID string `json:"qr_file_id,omitempty"`
	// Роли которым доступно мероприятие
	AllowedRoles valueobject.Roles `json:"allowed_roles,omitempty"`
	// Нужен ли пропуск для посещения мероприятия
	PassRequired bool `json:"pass_required,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the EventQuery when eager-loading is set.
	Edges        EventEdges `json:"edges"`
	selectValues sql.SelectValues
}

// EventEdges holds the relations/edges for other nodes in the graph.
type EventEdges struct {
	// Club holds the value of the club edge.
	Club *Club `json:"club,omitempty"`
	// Participants holds the value of the participants edge.
	Participants []*User `json:"participants,omitempty"`
	// Notifications holds the value of the notifications edge.
	Notifications []*Notification `json:"notifications,omitempty"`
	// Passes holds the value of the passes edge.
	Passes []*Pass `json:"passes,omitempty"`
	// EventParticipants holds the value of the event_participants edge.
	EventParticipants []*EventParticipant `json:"event_participants,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [5]bool
}

// ClubOrErr returns the Club value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EventEdges) ClubOrErr() (*Club, error) {
	if e.Club != nil {
		return e.Club, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: club.Label}
	}
	return nil, &NotLoadedError{edge: "club"}
}

// ParticipantsOrErr returns the Participants value or an error if the edge
// was not loaded in eager-loading.
func (e EventEdges) ParticipantsOrErr() ([]*User, error) {
	if e.loadedTypes[1] {
		return e.Participants, nil
	}
	return nil, &NotLoadedError{edge: "participants"}
}

// NotificationsOrErr returns the Notifications value or an error if the edge
// was not loaded in eager-loading.
func (e EventEdges) NotificationsOrErr() ([]*Notification, error) {
	if e.loadedTypes[2] {
		return e.Notifications, nil
	}
	return nil, &NotLoadedError{edge: "notifications"}
}

// PassesOrErr returns the Passes value or an error if the edge
// was not loaded in eager-loading.
func (e EventEdges) PassesOrErr() ([]*Pass, error) {
	if e.loadedTypes[3] {
		return e.Passes, nil
	}
	return nil, &NotLoadedError{edge: "passes"}
}

// EventParticipantsOrErr returns the EventParticipants value or an error if the edge
// was not loaded in eager-loading.
func (e EventEdges) EventParticipantsOrErr() ([]*EventParticipant, error) {
	if e.loadedTypes[4] {
		return e.EventParticipants, nil
	}
	return nil, &NotLoadedError{edge: "event_participants"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Event) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case event.FieldAllowedRoles:
			values[i] = new([]byte)
		case event.FieldPassRequired:
			values[i] = new(sql.NullBool)
		case event.FieldMaxParticipants, event.FieldExpectedParticipants:
			values[i] = new(sql.NullInt64)
		case event.FieldName, event.FieldDescription, event.FieldAfterRegistrationText, event.FieldLocation, event.FieldQrFileID:
			values[i] = new(sql.NullString)
		case event.FieldDeletedAt, event.FieldCreatedAt, event.FieldUpdatedAt, event.FieldStartTime, event.FieldEndTime, event.FieldRegistrationEndTime:
			values[i] = new(sql.NullTime)
		case event.FieldID, event.FieldClubID, event.FieldQrPayload:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Event fields.
func (e *Event) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case event.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				e.ID = *value
			}
		case event.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				e.DeletedAt = value.Time
			}
		case event.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				e.CreatedAt = value.Time
			}
		case event.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				e.UpdatedAt = value.Time
			}
		case event.FieldClubID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field club_id", values[i])
			} else if value != nil {
				e.ClubID = *value
			}
		case event.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				e.Name = value.String
			}
		case event.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				e.Description = value.String
			}
		case event.FieldAfterRegistrationText:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field after_registration_text", values[i])
			} else if value.Valid {
				e.AfterRegistrationText = value.String
			}
		case event.FieldLocation:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field location", values[i])
			} else if value.Valid {
				e.Location = value.String
			}
		case event.FieldStartTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field start_time", values[i])
			} else if value.Valid {
				e.StartTime = value.Time
			}
		case event.FieldEndTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field end_time", values[i])
			} else if value.Valid {
				e.EndTime = value.Time
			}
		case event.FieldRegistrationEndTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field registration_end_time", values[i])
			} else if value.Valid {
				e.RegistrationEndTime = value.Time
			}
		case event.FieldMaxParticipants:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field max_participants", values[i])
			} else if value.Valid {
				e.MaxParticipants = int(value.Int64)
			}
		case event.FieldExpectedParticipants:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field expected_participants", values[i])
			} else if value.Valid {
				e.ExpectedParticipants = int(value.Int64)
			}
		case event.FieldQrPayload:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field qr_payload", values[i])
			} else if value != nil {
				e.QrPayload = *value
			}
		case event.FieldQrFileID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field qr_file_id", values[i])
			} else if value.Valid {
				e.QrFileID = value.String
			}
		case event.FieldAllowedRoles:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field allowed_roles", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &e.AllowedRoles); err != nil {
					return fmt.Errorf("unmarshal field allowed_roles: %w", err)
				}
			}
		case event.FieldPassRequired:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field pass_required", values[i])
			} else if value.Valid {
				e.PassRequired = value.Bool
			}
		default:
			e.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Event.
// This includes values selected through modifiers, order, etc.
func (e *Event) Value(name string) (ent.Value, error) {
	return e.selectValues.Get(name)
}

// QueryClub queries the "club" edge of the Event entity.
func (e *Event) QueryClub() *ClubQuery {
	return NewEventClient(e.config).QueryClub(e)
}

// QueryParticipants queries the "participants" edge of the Event entity.
func (e *Event) QueryParticipants() *UserQuery {
	return NewEventClient(e.config).QueryParticipants(e)
}

// QueryNotifications queries the "notifications" edge of the Event entity.
func (e *Event) QueryNotifications() *NotificationQuery {
	return NewEventClient(e.config).QueryNotifications(e)
}

// QueryPasses queries the "passes" edge of the Event entity.
func (e *Event) QueryPasses() *PassQuery {
	return NewEventClient(e.config).QueryPasses(e)
}

// QueryEventParticipants queries the "event_participants" edge of the Event entity.
func (e *Event) QueryEventParticipants() *EventParticipantQuery {
	return NewEventClient(e.config).QueryEventParticipants(e)
}

// Update returns a builder for updating this Event.
// Note that you need to call Event.Unwrap() before calling this method if this Event
// was returned from a transaction, and the transaction was committed or rolled back.
func (e *Event) Update() *EventUpdateOne {
	return NewEventClient(e.config).UpdateOne(e)
}

// Unwrap unwraps the Event entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (e *Event) Unwrap() *Event {
	_tx, ok := e.config.driver.(*txDriver)
	if !ok {
		panic("ent: Event is not a transactional entity")
	}
	e.config.driver = _tx.drv
	return e
}

// String implements the fmt.Stringer.
func (e *Event) String() string {
	var builder strings.Builder
	builder.WriteString("Event(")
	builder.WriteString(fmt.Sprintf("id=%v, ", e.ID))
	builder.WriteString("deleted_at=")
	builder.WriteString(e.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(e.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(e.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("club_id=")
	builder.WriteString(fmt.Sprintf("%v", e.ClubID))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(e.Name)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(e.Description)
	builder.WriteString(", ")
	builder.WriteString("after_registration_text=")
	builder.WriteString(e.AfterRegistrationText)
	builder.WriteString(", ")
	builder.WriteString("location=")
	builder.WriteString(e.Location)
	builder.WriteString(", ")
	builder.WriteString("start_time=")
	builder.WriteString(e.StartTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("end_time=")
	builder.WriteString(e.EndTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("registration_end_time=")
	builder.WriteString(e.RegistrationEndTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("max_participants=")
	builder.WriteString(fmt.Sprintf("%v", e.MaxParticipants))
	builder.WriteString(", ")
	builder.WriteString("expected_participants=")
	builder.WriteString(fmt.Sprintf("%v", e.ExpectedParticipants))
	builder.WriteString(", ")
	builder.WriteString("qr_payload=")
	builder.WriteString(fmt.Sprintf("%v", e.QrPayload))
	builder.WriteString(", ")
	builder.WriteString("qr_file_id=")
	builder.WriteString(e.QrFileID)
	builder.WriteString(", ")
	builder.WriteString("allowed_roles=")
	builder.WriteString(fmt.Sprintf("%v", e.AllowedRoles))
	builder.WriteString(", ")
	builder.WriteString("pass_required=")
	builder.WriteString(fmt.Sprintf("%v", e.PassRequired))
	builder.WriteByte(')')
	return builder.String()
}

// Events is a parsable slice of Event.
type Events []*Event
