// Code generated by ent, DO NOT EDIT.

package pass

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"

	"github.com/Badsnus/cu-clubs-bot/bot/internal/adapters/secondary/postgres/ent/predicate"
	"github.com/Badsnus/cu-clubs-bot/bot/internal/domain/valueobject"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Pass {
	return predicate.Pass(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Pass {
	return predicate.Pass(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Pass {
	return predicate.Pass(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Pass {
	return predicate.Pass(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Pass {
	return predicate.Pass(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Pass {
	return predicate.Pass(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Pass {
	return predicate.Pass(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Pass {
	return predicate.Pass(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Pass {
	return predicate.Pass(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Pass {
	return predicate.Pass(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Pass {
	return predicate.Pass(sql.FieldEQ(FieldUpdatedAt, v))
}

// EventID applies equality check predicate on the "event_id" field. It's identical to EventIDEQ.
func EventID(v uuid.UUID) predicate.Pass {
	return predicate.Pass(sql.FieldEQ(FieldEventID, v))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v uuid.UUID) predicate.Pass {
	return predicate.Pass(sql.FieldEQ(FieldUserID, v))
}

// RequesterID applies equality check predicate on the "requester_id" field. It's identical to RequesterIDEQ.
func RequesterID(v uuid.UUID) predicate.Pass {
	return predicate.Pass(sql.FieldEQ(FieldRequesterID, v))
}

// ScheduledAt applies equality check predicate on the "scheduled_at" field. It's identical to ScheduledAtEQ.
func ScheduledAt(v time.Time) predicate.Pass {
	return predicate.Pass(sql.FieldEQ(FieldScheduledAt, v))
}

// SentAt applies equality check predicate on the "sent_at" field. It's identical to SentAtEQ.
func SentAt(v time.Time) predicate.Pass {
	return predicate.Pass(sql.FieldEQ(FieldSentAt, v))
}

// Notes applies equality check predicate on the "notes" field. It's identical to NotesEQ.
func Notes(v string) predicate.Pass {
	return predicate.Pass(sql.FieldEQ(FieldNotes, v))
}

// EmailSent applies equality check predicate on the "email_sent" field. It's identical to EmailSentEQ.
func EmailSent(v bool) predicate.Pass {
	return predicate.Pass(sql.FieldEQ(FieldEmailSent, v))
}

// TelegramSent applies equality check predicate on the "telegram_sent" field. It's identical to TelegramSentEQ.
func TelegramSent(v bool) predicate.Pass {
	return predicate.Pass(sql.FieldEQ(FieldTelegramSent, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Pass {
	return predicate.Pass(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Pass {
	return predicate.Pass(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Pass {
	return predicate.Pass(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Pass {
	return predicate.Pass(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Pass {
	return predicate.Pass(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Pass {
	return predicate.Pass(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Pass {
	return predicate.Pass(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Pass {
	return predicate.Pass(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Pass {
	return predicate.Pass(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Pass {
	return predicate.Pass(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Pass {
	return predicate.Pass(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Pass {
	return predicate.Pass(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Pass {
	return predicate.Pass(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Pass {
	return predicate.Pass(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Pass {
	return predicate.Pass(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Pass {
	return predicate.Pass(sql.FieldLTE(FieldUpdatedAt, v))
}

// EventIDEQ applies the EQ predicate on the "event_id" field.
func EventIDEQ(v uuid.UUID) predicate.Pass {
	return predicate.Pass(sql.FieldEQ(FieldEventID, v))
}

// EventIDNEQ applies the NEQ predicate on the "event_id" field.
func EventIDNEQ(v uuid.UUID) predicate.Pass {
	return predicate.Pass(sql.FieldNEQ(FieldEventID, v))
}

// EventIDIn applies the In predicate on the "event_id" field.
func EventIDIn(vs ...uuid.UUID) predicate.Pass {
	return predicate.Pass(sql.FieldIn(FieldEventID, vs...))
}

// EventIDNotIn applies the NotIn predicate on the "event_id" field.
func EventIDNotIn(vs ...uuid.UUID) predicate.Pass {
	return predicate.Pass(sql.FieldNotIn(FieldEventID, vs...))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v uuid.UUID) predicate.Pass {
	return predicate.Pass(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v uuid.UUID) predicate.Pass {
	return predicate.Pass(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...uuid.UUID) predicate.Pass {
	return predicate.Pass(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...uuid.UUID) predicate.Pass {
	return predicate.Pass(sql.FieldNotIn(FieldUserID, vs...))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v valueobject.PassType) predicate.Pass {
	return predicate.Pass(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v valueobject.PassType) predicate.Pass {
	return predicate.Pass(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...valueobject.PassType) predicate.Pass {
	return predicate.Pass(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...valueobject.PassType) predicate.Pass {
	return predicate.Pass(sql.FieldNotIn(FieldType, vs...))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v valueobject.PassStatus) predicate.Pass {
	return predicate.Pass(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v valueobject.PassStatus) predicate.Pass {
	return predicate.Pass(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...valueobject.PassStatus) predicate.Pass {
	return predicate.Pass(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...valueobject.PassStatus) predicate.Pass {
	return predicate.Pass(sql.FieldNotIn(FieldStatus, vs...))
}

// RequesterTypeEQ applies the EQ predicate on the "requester_type" field.
func RequesterTypeEQ(v valueobject.RequesterType) predicate.Pass {
	return predicate.Pass(sql.FieldEQ(FieldRequesterType, v))
}

// RequesterTypeNEQ applies the NEQ predicate on the "requester_type" field.
func RequesterTypeNEQ(v valueobject.RequesterType) predicate.Pass {
	return predicate.Pass(sql.FieldNEQ(FieldRequesterType, v))
}

// RequesterTypeIn applies the In predicate on the "requester_type" field.
func RequesterTypeIn(vs ...valueobject.RequesterType) predicate.Pass {
	return predicate.Pass(sql.FieldIn(FieldRequesterType, vs...))
}

// RequesterTypeNotIn applies the NotIn predicate on the "requester_type" field.
func RequesterTypeNotIn(vs ...valueobject.RequesterType) predicate.Pass {
	return predicate.Pass(sql.FieldNotIn(FieldRequesterType, vs...))
}

// RequesterIDEQ applies the EQ predicate on the "requester_id" field.
func RequesterIDEQ(v uuid.UUID) predicate.Pass {
	return predicate.Pass(sql.FieldEQ(FieldRequesterID, v))
}

// RequesterIDNEQ applies the NEQ predicate on the "requester_id" field.
func RequesterIDNEQ(v uuid.UUID) predicate.Pass {
	return predicate.Pass(sql.FieldNEQ(FieldRequesterID, v))
}

// RequesterIDIn applies the In predicate on the "requester_id" field.
func RequesterIDIn(vs ...uuid.UUID) predicate.Pass {
	return predicate.Pass(sql.FieldIn(FieldRequesterID, vs...))
}

// RequesterIDNotIn applies the NotIn predicate on the "requester_id" field.
func RequesterIDNotIn(vs ...uuid.UUID) predicate.Pass {
	return predicate.Pass(sql.FieldNotIn(FieldRequesterID, vs...))
}

// RequesterIDGT applies the GT predicate on the "requester_id" field.
func RequesterIDGT(v uuid.UUID) predicate.Pass {
	return predicate.Pass(sql.FieldGT(FieldRequesterID, v))
}

// RequesterIDGTE applies the GTE predicate on the "requester_id" field.
func RequesterIDGTE(v uuid.UUID) predicate.Pass {
	return predicate.Pass(sql.FieldGTE(FieldRequesterID, v))
}

// RequesterIDLT applies the LT predicate on the "requester_id" field.
func RequesterIDLT(v uuid.UUID) predicate.Pass {
	return predicate.Pass(sql.FieldLT(FieldRequesterID, v))
}

// RequesterIDLTE applies the LTE predicate on the "requester_id" field.
func RequesterIDLTE(v uuid.UUID) predicate.Pass {
	return predicate.Pass(sql.FieldLTE(FieldRequesterID, v))
}

// RequesterIDIsNil applies the IsNil predicate on the "requester_id" field.
func RequesterIDIsNil() predicate.Pass {
	return predicate.Pass(sql.FieldIsNull(FieldRequesterID))
}

// RequesterIDNotNil applies the NotNil predicate on the "requester_id" field.
func RequesterIDNotNil() predicate.Pass {
	return predicate.Pass(sql.FieldNotNull(FieldRequesterID))
}

// ScheduledAtEQ applies the EQ predicate on the "scheduled_at" field.
func ScheduledAtEQ(v time.Time) predicate.Pass {
	return predicate.Pass(sql.FieldEQ(FieldScheduledAt, v))
}

// ScheduledAtNEQ applies the NEQ predicate on the "scheduled_at" field.
func ScheduledAtNEQ(v time.Time) predicate.Pass {
	return predicate.Pass(sql.FieldNEQ(FieldScheduledAt, v))
}

// ScheduledAtIn applies the In predicate on the "scheduled_at" field.
func ScheduledAtIn(vs ...time.Time) predicate.Pass {
	return predicate.Pass(sql.FieldIn(FieldScheduledAt, vs...))
}

// ScheduledAtNotIn applies the NotIn predicate on the "scheduled_at" field.
func ScheduledAtNotIn(vs ...time.Time) predicate.Pass {
	return predicate.Pass(sql.FieldNotIn(FieldScheduledAt, vs...))
}

// ScheduledAtGT applies the GT predicate on the "scheduled_at" field.
func ScheduledAtGT(v time.Time) predicate.Pass {
	return predicate.Pass(sql.FieldGT(FieldScheduledAt, v))
}

// ScheduledAtGTE applies the GTE predicate on the "scheduled_at" field.
func ScheduledAtGTE(v time.Time) predicate.Pass {
	return predicate.Pass(sql.FieldGTE(FieldScheduledAt, v))
}

// ScheduledAtLT applies the LT predicate on the "scheduled_at" field.
func ScheduledAtLT(v time.Time) predicate.Pass {
	return predicate.Pass(sql.FieldLT(FieldScheduledAt, v))
}

// ScheduledAtLTE applies the LTE predicate on the "scheduled_at" field.
func ScheduledAtLTE(v time.Time) predicate.Pass {
	return predicate.Pass(sql.FieldLTE(FieldScheduledAt, v))
}

// SentAtEQ applies the EQ predicate on the "sent_at" field.
func SentAtEQ(v time.Time) predicate.Pass {
	return predicate.Pass(sql.FieldEQ(FieldSentAt, v))
}

// SentAtNEQ applies the NEQ predicate on the "sent_at" field.
func SentAtNEQ(v time.Time) predicate.Pass {
	return predicate.Pass(sql.FieldNEQ(FieldSentAt, v))
}

// SentAtIn applies the In predicate on the "sent_at" field.
func SentAtIn(vs ...time.Time) predicate.Pass {
	return predicate.Pass(sql.FieldIn(FieldSentAt, vs...))
}

// SentAtNotIn applies the NotIn predicate on the "sent_at" field.
func SentAtNotIn(vs ...time.Time) predicate.Pass {
	return predicate.Pass(sql.FieldNotIn(FieldSentAt, vs...))
}

// SentAtGT applies the GT predicate on the "sent_at" field.
func SentAtGT(v time.Time) predicate.Pass {
	return predicate.Pass(sql.FieldGT(FieldSentAt, v))
}

// SentAtGTE applies the GTE predicate on the "sent_at" field.
func SentAtGTE(v time.Time) predicate.Pass {
	return predicate.Pass(sql.FieldGTE(FieldSentAt, v))
}

// SentAtLT applies the LT predicate on the "sent_at" field.
func SentAtLT(v time.Time) predicate.Pass {
	return predicate.Pass(sql.FieldLT(FieldSentAt, v))
}

// SentAtLTE applies the LTE predicate on the "sent_at" field.
func SentAtLTE(v time.Time) predicate.Pass {
	return predicate.Pass(sql.FieldLTE(FieldSentAt, v))
}

// SentAtIsNil applies the IsNil predicate on the "sent_at" field.
func SentAtIsNil() predicate.Pass {
	return predicate.Pass(sql.FieldIsNull(FieldSentAt))
}

// SentAtNotNil applies the NotNil predicate on the "sent_at" field.
func SentAtNotNil() predicate.Pass {
	return predicate.Pass(sql.FieldNotNull(FieldSentAt))
}

// NotesEQ applies the EQ predicate on the "notes" field.
func NotesEQ(v string) predicate.Pass {
	return predicate.Pass(sql.FieldEQ(FieldNotes, v))
}

// NotesNEQ applies the NEQ predicate on the "notes" field.
func NotesNEQ(v string) predicate.Pass {
	return predicate.Pass(sql.FieldNEQ(FieldNotes, v))
}

// NotesIn applies the In predicate on the "notes" field.
func NotesIn(vs ...string) predicate.Pass {
	return predicate.Pass(sql.FieldIn(FieldNotes, vs...))
}

// NotesNotIn applies the NotIn predicate on the "notes" field.
func NotesNotIn(vs ...string) predicate.Pass {
	return predicate.Pass(sql.FieldNotIn(FieldNotes, vs...))
}

// NotesGT applies the GT predicate on the "notes" field.
func NotesGT(v string) predicate.Pass {
	return predicate.Pass(sql.FieldGT(FieldNotes, v))
}

// NotesGTE applies the GTE predicate on the "notes" field.
func NotesGTE(v string) predicate.Pass {
	return predicate.Pass(sql.FieldGTE(FieldNotes, v))
}

// NotesLT applies the LT predicate on the "notes" field.
func NotesLT(v string) predicate.Pass {
	return predicate.Pass(sql.FieldLT(FieldNotes, v))
}

// NotesLTE applies the LTE predicate on the "notes" field.
func NotesLTE(v string) predicate.Pass {
	return predicate.Pass(sql.FieldLTE(FieldNotes, v))
}

// NotesContains applies the Contains predicate on the "notes" field.
func NotesContains(v string) predicate.Pass {
	return predicate.Pass(sql.FieldContains(FieldNotes, v))
}

// NotesHasPrefix applies the HasPrefix predicate on the "notes" field.
func NotesHasPrefix(v string) predicate.Pass {
	return predicate.Pass(sql.FieldHasPrefix(FieldNotes, v))
}

// NotesHasSuffix applies the HasSuffix predicate on the "notes" field.
func NotesHasSuffix(v string) predicate.Pass {
	return predicate.Pass(sql.FieldHasSuffix(FieldNotes, v))
}

// NotesIsNil applies the IsNil predicate on the "notes" field.
func NotesIsNil() predicate.Pass {
	return predicate.Pass(sql.FieldIsNull(FieldNotes))
}

// NotesNotNil applies the NotNil predicate on the "notes" field.
func NotesNotNil() predicate.Pass {
	return predicate.Pass(sql.FieldNotNull(FieldNotes))
}

// NotesEqualFold applies the EqualFold predicate on the "notes" field.
func NotesEqualFold(v string) predicate.Pass {
	return predicate.Pass(sql.FieldEqualFold(FieldNotes, v))
}

// NotesContainsFold applies the ContainsFold predicate on the "notes" field.
func NotesContainsFold(v string) predicate.Pass {
	return predicate.Pass(sql.FieldContainsFold(FieldNotes, v))
}

// EmailSentEQ applies the EQ predicate on the "email_sent" field.
func EmailSentEQ(v bool) predicate.Pass {
	return predicate.Pass(sql.FieldEQ(FieldEmailSent, v))
}

// EmailSentNEQ applies the NEQ predicate on the "email_sent" field.
func EmailSentNEQ(v bool) predicate.Pass {
	return predicate.Pass(sql.FieldNEQ(FieldEmailSent, v))
}

// TelegramSentEQ applies the EQ predicate on the "telegram_sent" field.
func TelegramSentEQ(v bool) predicate.Pass {
	return predicate.Pass(sql.FieldEQ(FieldTelegramSent, v))
}

// TelegramSentNEQ applies the NEQ predicate on the "telegram_sent" field.
func TelegramSentNEQ(v bool) predicate.Pass {
	return predicate.Pass(sql.FieldNEQ(FieldTelegramSent, v))
}

// HasEvent applies the HasEdge predicate on the "event" edge.
func HasEvent() predicate.Pass {
	return predicate.Pass(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, EventTable, EventColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEventWith applies the HasEdge predicate on the "event" edge with a given conditions (other predicates).
func HasEventWith(preds ...predicate.Event) predicate.Pass {
	return predicate.Pass(func(s *sql.Selector) {
		step := newEventStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.Pass {
	return predicate.Pass(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.Pass {
	return predicate.Pass(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Pass) predicate.Pass {
	return predicate.Pass(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Pass) predicate.Pass {
	return predicate.Pass(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Pass) predicate.Pass {
	return predicate.Pass(sql.NotPredicates(p))
}
