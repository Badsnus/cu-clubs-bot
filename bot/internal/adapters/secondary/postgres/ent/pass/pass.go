// Code generated by ent, DO NOT EDIT.

package pass

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"

	"github.com/Badsnus/cu-clubs-bot/bot/internal/domain/valueobject"
)

const (
	// Label holds the string label denoting the pass type in the database.
	Label = "pass"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldEventID holds the string denoting the event_id field in the database.
	FieldEventID = "event_id"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldRequesterType holds the string denoting the requester_type field in the database.
	FieldRequesterType = "requester_type"
	// FieldRequesterID holds the string denoting the requester_id field in the database.
	FieldRequesterID = "requester_id"
	// FieldScheduledAt holds the string denoting the scheduled_at field in the database.
	FieldScheduledAt = "scheduled_at"
	// FieldSentAt holds the string denoting the sent_at field in the database.
	FieldSentAt = "sent_at"
	// FieldNotes holds the string denoting the notes field in the database.
	FieldNotes = "notes"
	// FieldEmailSent holds the string denoting the email_sent field in the database.
	FieldEmailSent = "email_sent"
	// FieldTelegramSent holds the string denoting the telegram_sent field in the database.
	FieldTelegramSent = "telegram_sent"
	// EdgeEvent holds the string denoting the event edge name in mutations.
	EdgeEvent = "event"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// Table holds the table name of the pass in the database.
	Table = "passes"
	// EventTable is the table that holds the event relation/edge.
	EventTable = "passes"
	// EventInverseTable is the table name for the Event entity.
	// It exists in this package in order to avoid circular dependency with the "event" package.
	EventInverseTable = "events"
	// EventColumn is the table column denoting the event relation/edge.
	EventColumn = "event_id"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "passes"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_id"
)

// Columns holds all SQL columns for pass fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldEventID,
	FieldUserID,
	FieldType,
	FieldStatus,
	FieldRequesterType,
	FieldRequesterID,
	FieldScheduledAt,
	FieldSentAt,
	FieldNotes,
	FieldEmailSent,
	FieldTelegramSent,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultEmailSent holds the default value on creation for the "email_sent" field.
	DefaultEmailSent bool
	// DefaultTelegramSent holds the default value on creation for the "telegram_sent" field.
	DefaultTelegramSent bool
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

const DefaultType valueobject.PassType = "event"

// TypeValidator is a validator for the "type" field enum values. It is called by the builders before save.
func TypeValidator(_type valueobject.PassType) error {
	switch _type.String() {
	case "event", "manual", "api":
		return nil
	default:
		return fmt.Errorf("pass: invalid enum value for type field: %q", _type)
	}
}

const DefaultStatus valueobject.PassStatus = "pending"

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s valueobject.PassStatus) error {
	switch s.String() {
	case "pending", "sent", "cancelled":
		return nil
	default:
		return fmt.Errorf("pass: invalid enum value for status field: %q", s)
	}
}

const DefaultRequesterType valueobject.RequesterType = "user"

// RequesterTypeValidator is a validator for the "requester_type" field enum values. It is called by the builders before save.
func RequesterTypeValidator(rt valueobject.RequesterType) error {
	switch rt.String() {
	case "user", "admin", "club":
		return nil
	default:
		return fmt.Errorf("pass: invalid enum value for requester_type field: %q", rt)
	}
}

// OrderOption defines the ordering options for the Pass queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByEventID orders the results by the event_id field.
func ByEventID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEventID, opts...).ToFunc()
}

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByRequesterType orders the results by the requester_type field.
func ByRequesterType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRequesterType, opts...).ToFunc()
}

// ByRequesterID orders the results by the requester_id field.
func ByRequesterID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRequesterID, opts...).ToFunc()
}

// ByScheduledAt orders the results by the scheduled_at field.
func ByScheduledAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldScheduledAt, opts...).ToFunc()
}

// BySentAt orders the results by the sent_at field.
func BySentAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSentAt, opts...).ToFunc()
}

// ByNotes orders the results by the notes field.
func ByNotes(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNotes, opts...).ToFunc()
}

// ByEmailSent orders the results by the email_sent field.
func ByEmailSent(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmailSent, opts...).ToFunc()
}

// ByTelegramSent orders the results by the telegram_sent field.
func ByTelegramSent(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTelegramSent, opts...).ToFunc()
}

// ByEventField orders the results by event field.
func ByEventField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEventStep(), sql.OrderByField(field, opts...))
	}
}

// ByUserField orders the results by user field.
func ByUserField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserStep(), sql.OrderByField(field, opts...))
	}
}
func newEventStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EventInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, EventTable, EventColumn),
	)
}
func newUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, UserTable, UserColumn),
	)
}
