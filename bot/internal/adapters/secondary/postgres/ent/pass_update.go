// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"

	"github.com/Badsnus/cu-clubs-bot/bot/internal/adapters/secondary/postgres/ent/event"
	"github.com/Badsnus/cu-clubs-bot/bot/internal/adapters/secondary/postgres/ent/pass"
	"github.com/Badsnus/cu-clubs-bot/bot/internal/adapters/secondary/postgres/ent/predicate"
	"github.com/Badsnus/cu-clubs-bot/bot/internal/adapters/secondary/postgres/ent/user"
	"github.com/Badsnus/cu-clubs-bot/bot/internal/domain/valueobject"
)

// PassUpdate is the builder for updating Pass entities.
type PassUpdate struct {
	config
	hooks    []Hook
	mutation *PassMutation
}

// Where appends a list predicates to the PassUpdate builder.
func (pu *PassUpdate) Where(ps ...predicate.Pass) *PassUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetUpdatedAt sets the "updated_at" field.
func (pu *PassUpdate) SetUpdatedAt(t time.Time) *PassUpdate {
	pu.mutation.SetUpdatedAt(t)
	return pu
}

// SetEventID sets the "event_id" field.
func (pu *PassUpdate) SetEventID(u uuid.UUID) *PassUpdate {
	pu.mutation.SetEventID(u)
	return pu
}

// SetNillableEventID sets the "event_id" field if the given value is not nil.
func (pu *PassUpdate) SetNillableEventID(u *uuid.UUID) *PassUpdate {
	if u != nil {
		pu.SetEventID(*u)
	}
	return pu
}

// SetUserID sets the "user_id" field.
func (pu *PassUpdate) SetUserID(u uuid.UUID) *PassUpdate {
	pu.mutation.SetUserID(u)
	return pu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (pu *PassUpdate) SetNillableUserID(u *uuid.UUID) *PassUpdate {
	if u != nil {
		pu.SetUserID(*u)
	}
	return pu
}

// SetType sets the "type" field.
func (pu *PassUpdate) SetType(vt valueobject.PassType) *PassUpdate {
	pu.mutation.SetType(vt)
	return pu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (pu *PassUpdate) SetNillableType(vt *valueobject.PassType) *PassUpdate {
	if vt != nil {
		pu.SetType(*vt)
	}
	return pu
}

// SetStatus sets the "status" field.
func (pu *PassUpdate) SetStatus(vs valueobject.PassStatus) *PassUpdate {
	pu.mutation.SetStatus(vs)
	return pu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (pu *PassUpdate) SetNillableStatus(vs *valueobject.PassStatus) *PassUpdate {
	if vs != nil {
		pu.SetStatus(*vs)
	}
	return pu
}

// SetRequesterType sets the "requester_type" field.
func (pu *PassUpdate) SetRequesterType(vt valueobject.RequesterType) *PassUpdate {
	pu.mutation.SetRequesterType(vt)
	return pu
}

// SetNillableRequesterType sets the "requester_type" field if the given value is not nil.
func (pu *PassUpdate) SetNillableRequesterType(vt *valueobject.RequesterType) *PassUpdate {
	if vt != nil {
		pu.SetRequesterType(*vt)
	}
	return pu
}

// SetRequesterID sets the "requester_id" field.
func (pu *PassUpdate) SetRequesterID(u uuid.UUID) *PassUpdate {
	pu.mutation.SetRequesterID(u)
	return pu
}

// SetNillableRequesterID sets the "requester_id" field if the given value is not nil.
func (pu *PassUpdate) SetNillableRequesterID(u *uuid.UUID) *PassUpdate {
	if u != nil {
		pu.SetRequesterID(*u)
	}
	return pu
}

// ClearRequesterID clears the value of the "requester_id" field.
func (pu *PassUpdate) ClearRequesterID() *PassUpdate {
	pu.mutation.ClearRequesterID()
	return pu
}

// SetScheduledAt sets the "scheduled_at" field.
func (pu *PassUpdate) SetScheduledAt(t time.Time) *PassUpdate {
	pu.mutation.SetScheduledAt(t)
	return pu
}

// SetNillableScheduledAt sets the "scheduled_at" field if the given value is not nil.
func (pu *PassUpdate) SetNillableScheduledAt(t *time.Time) *PassUpdate {
	if t != nil {
		pu.SetScheduledAt(*t)
	}
	return pu
}

// SetSentAt sets the "sent_at" field.
func (pu *PassUpdate) SetSentAt(t time.Time) *PassUpdate {
	pu.mutation.SetSentAt(t)
	return pu
}

// SetNillableSentAt sets the "sent_at" field if the given value is not nil.
func (pu *PassUpdate) SetNillableSentAt(t *time.Time) *PassUpdate {
	if t != nil {
		pu.SetSentAt(*t)
	}
	return pu
}

// ClearSentAt clears the value of the "sent_at" field.
func (pu *PassUpdate) ClearSentAt() *PassUpdate {
	pu.mutation.ClearSentAt()
	return pu
}

// SetNotes sets the "notes" field.
func (pu *PassUpdate) SetNotes(s string) *PassUpdate {
	pu.mutation.SetNotes(s)
	return pu
}

// SetNillableNotes sets the "notes" field if the given value is not nil.
func (pu *PassUpdate) SetNillableNotes(s *string) *PassUpdate {
	if s != nil {
		pu.SetNotes(*s)
	}
	return pu
}

// ClearNotes clears the value of the "notes" field.
func (pu *PassUpdate) ClearNotes() *PassUpdate {
	pu.mutation.ClearNotes()
	return pu
}

// SetEmailSent sets the "email_sent" field.
func (pu *PassUpdate) SetEmailSent(b bool) *PassUpdate {
	pu.mutation.SetEmailSent(b)
	return pu
}

// SetNillableEmailSent sets the "email_sent" field if the given value is not nil.
func (pu *PassUpdate) SetNillableEmailSent(b *bool) *PassUpdate {
	if b != nil {
		pu.SetEmailSent(*b)
	}
	return pu
}

// SetTelegramSent sets the "telegram_sent" field.
func (pu *PassUpdate) SetTelegramSent(b bool) *PassUpdate {
	pu.mutation.SetTelegramSent(b)
	return pu
}

// SetNillableTelegramSent sets the "telegram_sent" field if the given value is not nil.
func (pu *PassUpdate) SetNillableTelegramSent(b *bool) *PassUpdate {
	if b != nil {
		pu.SetTelegramSent(*b)
	}
	return pu
}

// SetEvent sets the "event" edge to the Event entity.
func (pu *PassUpdate) SetEvent(e *Event) *PassUpdate {
	return pu.SetEventID(e.ID)
}

// SetUser sets the "user" edge to the User entity.
func (pu *PassUpdate) SetUser(u *User) *PassUpdate {
	return pu.SetUserID(u.ID)
}

// Mutation returns the PassMutation object of the builder.
func (pu *PassUpdate) Mutation() *PassMutation {
	return pu.mutation
}

// ClearEvent clears the "event" edge to the Event entity.
func (pu *PassUpdate) ClearEvent() *PassUpdate {
	pu.mutation.ClearEvent()
	return pu
}

// ClearUser clears the "user" edge to the User entity.
func (pu *PassUpdate) ClearUser() *PassUpdate {
	pu.mutation.ClearUser()
	return pu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *PassUpdate) Save(ctx context.Context) (int, error) {
	pu.defaults()
	return withHooks(ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PassUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PassUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PassUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pu *PassUpdate) defaults() {
	if _, ok := pu.mutation.UpdatedAt(); !ok {
		v := pass.UpdateDefaultUpdatedAt()
		pu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pu *PassUpdate) check() error {
	if v, ok := pu.mutation.GetType(); ok {
		if err := pass.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Pass.type": %w`, err)}
		}
	}
	if v, ok := pu.mutation.Status(); ok {
		if err := pass.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Pass.status": %w`, err)}
		}
	}
	if v, ok := pu.mutation.RequesterType(); ok {
		if err := pass.RequesterTypeValidator(v); err != nil {
			return &ValidationError{Name: "requester_type", err: fmt.Errorf(`ent: validator failed for field "Pass.requester_type": %w`, err)}
		}
	}
	if pu.mutation.EventCleared() && len(pu.mutation.EventIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Pass.event"`)
	}
	if pu.mutation.UserCleared() && len(pu.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Pass.user"`)
	}
	return nil
}

func (pu *PassUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(pass.Table, pass.Columns, sqlgraph.NewFieldSpec(pass.FieldID, field.TypeUUID))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.UpdatedAt(); ok {
		_spec.SetField(pass.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := pu.mutation.GetType(); ok {
		_spec.SetField(pass.FieldType, field.TypeEnum, value)
	}
	if value, ok := pu.mutation.Status(); ok {
		_spec.SetField(pass.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := pu.mutation.RequesterType(); ok {
		_spec.SetField(pass.FieldRequesterType, field.TypeEnum, value)
	}
	if value, ok := pu.mutation.RequesterID(); ok {
		_spec.SetField(pass.FieldRequesterID, field.TypeUUID, value)
	}
	if pu.mutation.RequesterIDCleared() {
		_spec.ClearField(pass.FieldRequesterID, field.TypeUUID)
	}
	if value, ok := pu.mutation.ScheduledAt(); ok {
		_spec.SetField(pass.FieldScheduledAt, field.TypeTime, value)
	}
	if value, ok := pu.mutation.SentAt(); ok {
		_spec.SetField(pass.FieldSentAt, field.TypeTime, value)
	}
	if pu.mutation.SentAtCleared() {
		_spec.ClearField(pass.FieldSentAt, field.TypeTime)
	}
	if value, ok := pu.mutation.Notes(); ok {
		_spec.SetField(pass.FieldNotes, field.TypeString, value)
	}
	if pu.mutation.NotesCleared() {
		_spec.ClearField(pass.FieldNotes, field.TypeString)
	}
	if value, ok := pu.mutation.EmailSent(); ok {
		_spec.SetField(pass.FieldEmailSent, field.TypeBool, value)
	}
	if value, ok := pu.mutation.TelegramSent(); ok {
		_spec.SetField(pass.FieldTelegramSent, field.TypeBool, value)
	}
	if pu.mutation.EventCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   pass.EventTable,
			Columns: []string{pass.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.EventIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   pass.EventTable,
			Columns: []string{pass.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   pass.UserTable,
			Columns: []string{pass.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   pass.UserTable,
			Columns: []string{pass.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{pass.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// PassUpdateOne is the builder for updating a single Pass entity.
type PassUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PassMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (puo *PassUpdateOne) SetUpdatedAt(t time.Time) *PassUpdateOne {
	puo.mutation.SetUpdatedAt(t)
	return puo
}

// SetEventID sets the "event_id" field.
func (puo *PassUpdateOne) SetEventID(u uuid.UUID) *PassUpdateOne {
	puo.mutation.SetEventID(u)
	return puo
}

// SetNillableEventID sets the "event_id" field if the given value is not nil.
func (puo *PassUpdateOne) SetNillableEventID(u *uuid.UUID) *PassUpdateOne {
	if u != nil {
		puo.SetEventID(*u)
	}
	return puo
}

// SetUserID sets the "user_id" field.
func (puo *PassUpdateOne) SetUserID(u uuid.UUID) *PassUpdateOne {
	puo.mutation.SetUserID(u)
	return puo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (puo *PassUpdateOne) SetNillableUserID(u *uuid.UUID) *PassUpdateOne {
	if u != nil {
		puo.SetUserID(*u)
	}
	return puo
}

// SetType sets the "type" field.
func (puo *PassUpdateOne) SetType(vt valueobject.PassType) *PassUpdateOne {
	puo.mutation.SetType(vt)
	return puo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (puo *PassUpdateOne) SetNillableType(vt *valueobject.PassType) *PassUpdateOne {
	if vt != nil {
		puo.SetType(*vt)
	}
	return puo
}

// SetStatus sets the "status" field.
func (puo *PassUpdateOne) SetStatus(vs valueobject.PassStatus) *PassUpdateOne {
	puo.mutation.SetStatus(vs)
	return puo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (puo *PassUpdateOne) SetNillableStatus(vs *valueobject.PassStatus) *PassUpdateOne {
	if vs != nil {
		puo.SetStatus(*vs)
	}
	return puo
}

// SetRequesterType sets the "requester_type" field.
func (puo *PassUpdateOne) SetRequesterType(vt valueobject.RequesterType) *PassUpdateOne {
	puo.mutation.SetRequesterType(vt)
	return puo
}

// SetNillableRequesterType sets the "requester_type" field if the given value is not nil.
func (puo *PassUpdateOne) SetNillableRequesterType(vt *valueobject.RequesterType) *PassUpdateOne {
	if vt != nil {
		puo.SetRequesterType(*vt)
	}
	return puo
}

// SetRequesterID sets the "requester_id" field.
func (puo *PassUpdateOne) SetRequesterID(u uuid.UUID) *PassUpdateOne {
	puo.mutation.SetRequesterID(u)
	return puo
}

// SetNillableRequesterID sets the "requester_id" field if the given value is not nil.
func (puo *PassUpdateOne) SetNillableRequesterID(u *uuid.UUID) *PassUpdateOne {
	if u != nil {
		puo.SetRequesterID(*u)
	}
	return puo
}

// ClearRequesterID clears the value of the "requester_id" field.
func (puo *PassUpdateOne) ClearRequesterID() *PassUpdateOne {
	puo.mutation.ClearRequesterID()
	return puo
}

// SetScheduledAt sets the "scheduled_at" field.
func (puo *PassUpdateOne) SetScheduledAt(t time.Time) *PassUpdateOne {
	puo.mutation.SetScheduledAt(t)
	return puo
}

// SetNillableScheduledAt sets the "scheduled_at" field if the given value is not nil.
func (puo *PassUpdateOne) SetNillableScheduledAt(t *time.Time) *PassUpdateOne {
	if t != nil {
		puo.SetScheduledAt(*t)
	}
	return puo
}

// SetSentAt sets the "sent_at" field.
func (puo *PassUpdateOne) SetSentAt(t time.Time) *PassUpdateOne {
	puo.mutation.SetSentAt(t)
	return puo
}

// SetNillableSentAt sets the "sent_at" field if the given value is not nil.
func (puo *PassUpdateOne) SetNillableSentAt(t *time.Time) *PassUpdateOne {
	if t != nil {
		puo.SetSentAt(*t)
	}
	return puo
}

// ClearSentAt clears the value of the "sent_at" field.
func (puo *PassUpdateOne) ClearSentAt() *PassUpdateOne {
	puo.mutation.ClearSentAt()
	return puo
}

// SetNotes sets the "notes" field.
func (puo *PassUpdateOne) SetNotes(s string) *PassUpdateOne {
	puo.mutation.SetNotes(s)
	return puo
}

// SetNillableNotes sets the "notes" field if the given value is not nil.
func (puo *PassUpdateOne) SetNillableNotes(s *string) *PassUpdateOne {
	if s != nil {
		puo.SetNotes(*s)
	}
	return puo
}

// ClearNotes clears the value of the "notes" field.
func (puo *PassUpdateOne) ClearNotes() *PassUpdateOne {
	puo.mutation.ClearNotes()
	return puo
}

// SetEmailSent sets the "email_sent" field.
func (puo *PassUpdateOne) SetEmailSent(b bool) *PassUpdateOne {
	puo.mutation.SetEmailSent(b)
	return puo
}

// SetNillableEmailSent sets the "email_sent" field if the given value is not nil.
func (puo *PassUpdateOne) SetNillableEmailSent(b *bool) *PassUpdateOne {
	if b != nil {
		puo.SetEmailSent(*b)
	}
	return puo
}

// SetTelegramSent sets the "telegram_sent" field.
func (puo *PassUpdateOne) SetTelegramSent(b bool) *PassUpdateOne {
	puo.mutation.SetTelegramSent(b)
	return puo
}

// SetNillableTelegramSent sets the "telegram_sent" field if the given value is not nil.
func (puo *PassUpdateOne) SetNillableTelegramSent(b *bool) *PassUpdateOne {
	if b != nil {
		puo.SetTelegramSent(*b)
	}
	return puo
}

// SetEvent sets the "event" edge to the Event entity.
func (puo *PassUpdateOne) SetEvent(e *Event) *PassUpdateOne {
	return puo.SetEventID(e.ID)
}

// SetUser sets the "user" edge to the User entity.
func (puo *PassUpdateOne) SetUser(u *User) *PassUpdateOne {
	return puo.SetUserID(u.ID)
}

// Mutation returns the PassMutation object of the builder.
func (puo *PassUpdateOne) Mutation() *PassMutation {
	return puo.mutation
}

// ClearEvent clears the "event" edge to the Event entity.
func (puo *PassUpdateOne) ClearEvent() *PassUpdateOne {
	puo.mutation.ClearEvent()
	return puo
}

// ClearUser clears the "user" edge to the User entity.
func (puo *PassUpdateOne) ClearUser() *PassUpdateOne {
	puo.mutation.ClearUser()
	return puo
}

// Where appends a list predicates to the PassUpdate builder.
func (puo *PassUpdateOne) Where(ps ...predicate.Pass) *PassUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *PassUpdateOne) Select(field string, fields ...string) *PassUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Pass entity.
func (puo *PassUpdateOne) Save(ctx context.Context) (*Pass, error) {
	puo.defaults()
	return withHooks(ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PassUpdateOne) SaveX(ctx context.Context) *Pass {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PassUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PassUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (puo *PassUpdateOne) defaults() {
	if _, ok := puo.mutation.UpdatedAt(); !ok {
		v := pass.UpdateDefaultUpdatedAt()
		puo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (puo *PassUpdateOne) check() error {
	if v, ok := puo.mutation.GetType(); ok {
		if err := pass.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Pass.type": %w`, err)}
		}
	}
	if v, ok := puo.mutation.Status(); ok {
		if err := pass.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Pass.status": %w`, err)}
		}
	}
	if v, ok := puo.mutation.RequesterType(); ok {
		if err := pass.RequesterTypeValidator(v); err != nil {
			return &ValidationError{Name: "requester_type", err: fmt.Errorf(`ent: validator failed for field "Pass.requester_type": %w`, err)}
		}
	}
	if puo.mutation.EventCleared() && len(puo.mutation.EventIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Pass.event"`)
	}
	if puo.mutation.UserCleared() && len(puo.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Pass.user"`)
	}
	return nil
}

func (puo *PassUpdateOne) sqlSave(ctx context.Context) (_node *Pass, err error) {
	if err := puo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(pass.Table, pass.Columns, sqlgraph.NewFieldSpec(pass.FieldID, field.TypeUUID))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Pass.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, pass.FieldID)
		for _, f := range fields {
			if !pass.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != pass.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.UpdatedAt(); ok {
		_spec.SetField(pass.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := puo.mutation.GetType(); ok {
		_spec.SetField(pass.FieldType, field.TypeEnum, value)
	}
	if value, ok := puo.mutation.Status(); ok {
		_spec.SetField(pass.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := puo.mutation.RequesterType(); ok {
		_spec.SetField(pass.FieldRequesterType, field.TypeEnum, value)
	}
	if value, ok := puo.mutation.RequesterID(); ok {
		_spec.SetField(pass.FieldRequesterID, field.TypeUUID, value)
	}
	if puo.mutation.RequesterIDCleared() {
		_spec.ClearField(pass.FieldRequesterID, field.TypeUUID)
	}
	if value, ok := puo.mutation.ScheduledAt(); ok {
		_spec.SetField(pass.FieldScheduledAt, field.TypeTime, value)
	}
	if value, ok := puo.mutation.SentAt(); ok {
		_spec.SetField(pass.FieldSentAt, field.TypeTime, value)
	}
	if puo.mutation.SentAtCleared() {
		_spec.ClearField(pass.FieldSentAt, field.TypeTime)
	}
	if value, ok := puo.mutation.Notes(); ok {
		_spec.SetField(pass.FieldNotes, field.TypeString, value)
	}
	if puo.mutation.NotesCleared() {
		_spec.ClearField(pass.FieldNotes, field.TypeString)
	}
	if value, ok := puo.mutation.EmailSent(); ok {
		_spec.SetField(pass.FieldEmailSent, field.TypeBool, value)
	}
	if value, ok := puo.mutation.TelegramSent(); ok {
		_spec.SetField(pass.FieldTelegramSent, field.TypeBool, value)
	}
	if puo.mutation.EventCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   pass.EventTable,
			Columns: []string{pass.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.EventIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   pass.EventTable,
			Columns: []string{pass.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   pass.UserTable,
			Columns: []string{pass.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   pass.UserTable,
			Columns: []string{pass.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Pass{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{pass.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
