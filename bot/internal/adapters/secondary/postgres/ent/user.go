// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"

	"github.com/Badsnus/cu-clubs-bot/bot/internal/adapters/secondary/postgres/ent/user"
	"github.com/Badsnus/cu-clubs-bot/bot/internal/domain/valueobject"
)

// User is the model entity for the User schema.
type User struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// TelegramID holds the value of the "telegram_id" field.
	TelegramID int64 `json:"telegram_id,omitempty"`
	// Локализация пользователя
	Localization user.Localization `json:"localization,omitempty"`
	// Telegram username пользователя
	Username string `json:"username,omitempty"`
	// Role holds the value of the "role" field.
	Role valueobject.Role `json:"role,omitempty"`
	// Email holds the value of the "email" field.
	Email valueobject.Email `json:"email,omitempty"`
	// Fio holds the value of the "fio" field.
	Fio valueobject.FIO `json:"fio,omitempty"`
	// Payload QR-кода
	QrPayload uuid.UUID `json:"qr_payload,omitempty"`
	// File ID сгенерированного qr-кода
	QrFileID string `json:"qr_file_id,omitempty"`
	// IsBanned holds the value of the "is_banned" field.
	IsBanned bool `json:"is_banned,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserQuery when eager-loading is set.
	Edges        UserEdges `json:"edges"`
	selectValues sql.SelectValues
}

// UserEdges holds the relations/edges for other nodes in the graph.
type UserEdges struct {
	// OwnedClubs holds the value of the owned_clubs edge.
	OwnedClubs []*Club `json:"owned_clubs,omitempty"`
	// Events holds the value of the events edge.
	Events []*Event `json:"events,omitempty"`
	// IgnoreMailings holds the value of the ignore_mailings edge.
	IgnoreMailings []*IgnoreMailing `json:"ignore_mailings,omitempty"`
	// Notifications holds the value of the notifications edge.
	Notifications []*Notification `json:"notifications,omitempty"`
	// Passes holds the value of the passes edge.
	Passes []*Pass `json:"passes,omitempty"`
	// ClubOwners holds the value of the club_owners edge.
	ClubOwners []*ClubOwner `json:"club_owners,omitempty"`
	// EventParticipants holds the value of the event_participants edge.
	EventParticipants []*EventParticipant `json:"event_participants,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [7]bool
}

// OwnedClubsOrErr returns the OwnedClubs value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) OwnedClubsOrErr() ([]*Club, error) {
	if e.loadedTypes[0] {
		return e.OwnedClubs, nil
	}
	return nil, &NotLoadedError{edge: "owned_clubs"}
}

// EventsOrErr returns the Events value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) EventsOrErr() ([]*Event, error) {
	if e.loadedTypes[1] {
		return e.Events, nil
	}
	return nil, &NotLoadedError{edge: "events"}
}

// IgnoreMailingsOrErr returns the IgnoreMailings value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) IgnoreMailingsOrErr() ([]*IgnoreMailing, error) {
	if e.loadedTypes[2] {
		return e.IgnoreMailings, nil
	}
	return nil, &NotLoadedError{edge: "ignore_mailings"}
}

// NotificationsOrErr returns the Notifications value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) NotificationsOrErr() ([]*Notification, error) {
	if e.loadedTypes[3] {
		return e.Notifications, nil
	}
	return nil, &NotLoadedError{edge: "notifications"}
}

// PassesOrErr returns the Passes value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) PassesOrErr() ([]*Pass, error) {
	if e.loadedTypes[4] {
		return e.Passes, nil
	}
	return nil, &NotLoadedError{edge: "passes"}
}

// ClubOwnersOrErr returns the ClubOwners value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) ClubOwnersOrErr() ([]*ClubOwner, error) {
	if e.loadedTypes[5] {
		return e.ClubOwners, nil
	}
	return nil, &NotLoadedError{edge: "club_owners"}
}

// EventParticipantsOrErr returns the EventParticipants value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) EventParticipantsOrErr() ([]*EventParticipant, error) {
	if e.loadedTypes[6] {
		return e.EventParticipants, nil
	}
	return nil, &NotLoadedError{edge: "event_participants"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*User) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case user.FieldIsBanned:
			values[i] = new(sql.NullBool)
		case user.FieldTelegramID:
			values[i] = new(sql.NullInt64)
		case user.FieldLocalization, user.FieldUsername, user.FieldQrFileID:
			values[i] = new(sql.NullString)
		case user.FieldCreatedAt, user.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case user.FieldID, user.FieldQrPayload:
			values[i] = new(uuid.UUID)
		case user.FieldEmail:
			values[i] = new(valueobject.Email)
		case user.FieldFio:
			values[i] = new(valueobject.FIO)
		case user.FieldRole:
			values[i] = new(valueobject.Role)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the User fields.
func (u *User) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case user.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				u.ID = *value
			}
		case user.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				u.CreatedAt = value.Time
			}
		case user.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				u.UpdatedAt = value.Time
			}
		case user.FieldTelegramID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field telegram_id", values[i])
			} else if value.Valid {
				u.TelegramID = value.Int64
			}
		case user.FieldLocalization:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field localization", values[i])
			} else if value.Valid {
				u.Localization = user.Localization(value.String)
			}
		case user.FieldUsername:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field username", values[i])
			} else if value.Valid {
				u.Username = value.String
			}
		case user.FieldRole:
			if value, ok := values[i].(*valueobject.Role); !ok {
				return fmt.Errorf("unexpected type %T for field role", values[i])
			} else if value != nil {
				u.Role = *value
			}
		case user.FieldEmail:
			if value, ok := values[i].(*valueobject.Email); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value != nil {
				u.Email = *value
			}
		case user.FieldFio:
			if value, ok := values[i].(*valueobject.FIO); !ok {
				return fmt.Errorf("unexpected type %T for field fio", values[i])
			} else if value != nil {
				u.Fio = *value
			}
		case user.FieldQrPayload:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field qr_payload", values[i])
			} else if value != nil {
				u.QrPayload = *value
			}
		case user.FieldQrFileID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field qr_file_id", values[i])
			} else if value.Valid {
				u.QrFileID = value.String
			}
		case user.FieldIsBanned:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_banned", values[i])
			} else if value.Valid {
				u.IsBanned = value.Bool
			}
		default:
			u.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the User.
// This includes values selected through modifiers, order, etc.
func (u *User) Value(name string) (ent.Value, error) {
	return u.selectValues.Get(name)
}

// QueryOwnedClubs queries the "owned_clubs" edge of the User entity.
func (u *User) QueryOwnedClubs() *ClubQuery {
	return NewUserClient(u.config).QueryOwnedClubs(u)
}

// QueryEvents queries the "events" edge of the User entity.
func (u *User) QueryEvents() *EventQuery {
	return NewUserClient(u.config).QueryEvents(u)
}

// QueryIgnoreMailings queries the "ignore_mailings" edge of the User entity.
func (u *User) QueryIgnoreMailings() *IgnoreMailingQuery {
	return NewUserClient(u.config).QueryIgnoreMailings(u)
}

// QueryNotifications queries the "notifications" edge of the User entity.
func (u *User) QueryNotifications() *NotificationQuery {
	return NewUserClient(u.config).QueryNotifications(u)
}

// QueryPasses queries the "passes" edge of the User entity.
func (u *User) QueryPasses() *PassQuery {
	return NewUserClient(u.config).QueryPasses(u)
}

// QueryClubOwners queries the "club_owners" edge of the User entity.
func (u *User) QueryClubOwners() *ClubOwnerQuery {
	return NewUserClient(u.config).QueryClubOwners(u)
}

// QueryEventParticipants queries the "event_participants" edge of the User entity.
func (u *User) QueryEventParticipants() *EventParticipantQuery {
	return NewUserClient(u.config).QueryEventParticipants(u)
}

// Update returns a builder for updating this User.
// Note that you need to call User.Unwrap() before calling this method if this User
// was returned from a transaction, and the transaction was committed or rolled back.
func (u *User) Update() *UserUpdateOne {
	return NewUserClient(u.config).UpdateOne(u)
}

// Unwrap unwraps the User entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (u *User) Unwrap() *User {
	_tx, ok := u.config.driver.(*txDriver)
	if !ok {
		panic("ent: User is not a transactional entity")
	}
	u.config.driver = _tx.drv
	return u
}

// String implements the fmt.Stringer.
func (u *User) String() string {
	var builder strings.Builder
	builder.WriteString("User(")
	builder.WriteString(fmt.Sprintf("id=%v, ", u.ID))
	builder.WriteString("created_at=")
	builder.WriteString(u.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(u.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("telegram_id=")
	builder.WriteString(fmt.Sprintf("%v", u.TelegramID))
	builder.WriteString(", ")
	builder.WriteString("localization=")
	builder.WriteString(fmt.Sprintf("%v", u.Localization))
	builder.WriteString(", ")
	builder.WriteString("username=")
	builder.WriteString(u.Username)
	builder.WriteString(", ")
	builder.WriteString("role=")
	builder.WriteString(fmt.Sprintf("%v", u.Role))
	builder.WriteString(", ")
	builder.WriteString("email=")
	builder.WriteString(fmt.Sprintf("%v", u.Email))
	builder.WriteString(", ")
	builder.WriteString("fio=")
	builder.WriteString(fmt.Sprintf("%v", u.Fio))
	builder.WriteString(", ")
	builder.WriteString("qr_payload=")
	builder.WriteString(fmt.Sprintf("%v", u.QrPayload))
	builder.WriteString(", ")
	builder.WriteString("qr_file_id=")
	builder.WriteString(u.QrFileID)
	builder.WriteString(", ")
	builder.WriteString("is_banned=")
	builder.WriteString(fmt.Sprintf("%v", u.IsBanned))
	builder.WriteByte(')')
	return builder.String()
}

// Users is a parsable slice of User.
type Users []*User
