// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"

	"github.com/Badsnus/cu-clubs-bot/bot/internal/adapters/secondary/postgres/ent/club"
	"github.com/Badsnus/cu-clubs-bot/bot/internal/adapters/secondary/postgres/ent/event"
	"github.com/Badsnus/cu-clubs-bot/bot/internal/adapters/secondary/postgres/ent/eventparticipant"
	"github.com/Badsnus/cu-clubs-bot/bot/internal/adapters/secondary/postgres/ent/notification"
	"github.com/Badsnus/cu-clubs-bot/bot/internal/adapters/secondary/postgres/ent/pass"
	"github.com/Badsnus/cu-clubs-bot/bot/internal/adapters/secondary/postgres/ent/predicate"
	"github.com/Badsnus/cu-clubs-bot/bot/internal/adapters/secondary/postgres/ent/user"
	"github.com/Badsnus/cu-clubs-bot/bot/internal/domain/valueobject"
)

// EventUpdate is the builder for updating Event entities.
type EventUpdate struct {
	config
	hooks    []Hook
	mutation *EventMutation
}

// Where appends a list predicates to the EventUpdate builder.
func (eu *EventUpdate) Where(ps ...predicate.Event) *EventUpdate {
	eu.mutation.Where(ps...)
	return eu
}

// SetDeletedAt sets the "deleted_at" field.
func (eu *EventUpdate) SetDeletedAt(t time.Time) *EventUpdate {
	eu.mutation.SetDeletedAt(t)
	return eu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (eu *EventUpdate) SetNillableDeletedAt(t *time.Time) *EventUpdate {
	if t != nil {
		eu.SetDeletedAt(*t)
	}
	return eu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (eu *EventUpdate) ClearDeletedAt() *EventUpdate {
	eu.mutation.ClearDeletedAt()
	return eu
}

// SetUpdatedAt sets the "updated_at" field.
func (eu *EventUpdate) SetUpdatedAt(t time.Time) *EventUpdate {
	eu.mutation.SetUpdatedAt(t)
	return eu
}

// SetClubID sets the "club_id" field.
func (eu *EventUpdate) SetClubID(u uuid.UUID) *EventUpdate {
	eu.mutation.SetClubID(u)
	return eu
}

// SetNillableClubID sets the "club_id" field if the given value is not nil.
func (eu *EventUpdate) SetNillableClubID(u *uuid.UUID) *EventUpdate {
	if u != nil {
		eu.SetClubID(*u)
	}
	return eu
}

// SetName sets the "name" field.
func (eu *EventUpdate) SetName(s string) *EventUpdate {
	eu.mutation.SetName(s)
	return eu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (eu *EventUpdate) SetNillableName(s *string) *EventUpdate {
	if s != nil {
		eu.SetName(*s)
	}
	return eu
}

// SetDescription sets the "description" field.
func (eu *EventUpdate) SetDescription(s string) *EventUpdate {
	eu.mutation.SetDescription(s)
	return eu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (eu *EventUpdate) SetNillableDescription(s *string) *EventUpdate {
	if s != nil {
		eu.SetDescription(*s)
	}
	return eu
}

// ClearDescription clears the value of the "description" field.
func (eu *EventUpdate) ClearDescription() *EventUpdate {
	eu.mutation.ClearDescription()
	return eu
}

// SetAfterRegistrationText sets the "after_registration_text" field.
func (eu *EventUpdate) SetAfterRegistrationText(s string) *EventUpdate {
	eu.mutation.SetAfterRegistrationText(s)
	return eu
}

// SetNillableAfterRegistrationText sets the "after_registration_text" field if the given value is not nil.
func (eu *EventUpdate) SetNillableAfterRegistrationText(s *string) *EventUpdate {
	if s != nil {
		eu.SetAfterRegistrationText(*s)
	}
	return eu
}

// ClearAfterRegistrationText clears the value of the "after_registration_text" field.
func (eu *EventUpdate) ClearAfterRegistrationText() *EventUpdate {
	eu.mutation.ClearAfterRegistrationText()
	return eu
}

// SetLocation sets the "location" field.
func (eu *EventUpdate) SetLocation(s string) *EventUpdate {
	eu.mutation.SetLocation(s)
	return eu
}

// SetNillableLocation sets the "location" field if the given value is not nil.
func (eu *EventUpdate) SetNillableLocation(s *string) *EventUpdate {
	if s != nil {
		eu.SetLocation(*s)
	}
	return eu
}

// SetStartTime sets the "start_time" field.
func (eu *EventUpdate) SetStartTime(t time.Time) *EventUpdate {
	eu.mutation.SetStartTime(t)
	return eu
}

// SetNillableStartTime sets the "start_time" field if the given value is not nil.
func (eu *EventUpdate) SetNillableStartTime(t *time.Time) *EventUpdate {
	if t != nil {
		eu.SetStartTime(*t)
	}
	return eu
}

// SetEndTime sets the "end_time" field.
func (eu *EventUpdate) SetEndTime(t time.Time) *EventUpdate {
	eu.mutation.SetEndTime(t)
	return eu
}

// SetNillableEndTime sets the "end_time" field if the given value is not nil.
func (eu *EventUpdate) SetNillableEndTime(t *time.Time) *EventUpdate {
	if t != nil {
		eu.SetEndTime(*t)
	}
	return eu
}

// ClearEndTime clears the value of the "end_time" field.
func (eu *EventUpdate) ClearEndTime() *EventUpdate {
	eu.mutation.ClearEndTime()
	return eu
}

// SetRegistrationEndTime sets the "registration_end_time" field.
func (eu *EventUpdate) SetRegistrationEndTime(t time.Time) *EventUpdate {
	eu.mutation.SetRegistrationEndTime(t)
	return eu
}

// SetNillableRegistrationEndTime sets the "registration_end_time" field if the given value is not nil.
func (eu *EventUpdate) SetNillableRegistrationEndTime(t *time.Time) *EventUpdate {
	if t != nil {
		eu.SetRegistrationEndTime(*t)
	}
	return eu
}

// SetMaxParticipants sets the "max_participants" field.
func (eu *EventUpdate) SetMaxParticipants(i int) *EventUpdate {
	eu.mutation.ResetMaxParticipants()
	eu.mutation.SetMaxParticipants(i)
	return eu
}

// SetNillableMaxParticipants sets the "max_participants" field if the given value is not nil.
func (eu *EventUpdate) SetNillableMaxParticipants(i *int) *EventUpdate {
	if i != nil {
		eu.SetMaxParticipants(*i)
	}
	return eu
}

// AddMaxParticipants adds i to the "max_participants" field.
func (eu *EventUpdate) AddMaxParticipants(i int) *EventUpdate {
	eu.mutation.AddMaxParticipants(i)
	return eu
}

// ClearMaxParticipants clears the value of the "max_participants" field.
func (eu *EventUpdate) ClearMaxParticipants() *EventUpdate {
	eu.mutation.ClearMaxParticipants()
	return eu
}

// SetExpectedParticipants sets the "expected_participants" field.
func (eu *EventUpdate) SetExpectedParticipants(i int) *EventUpdate {
	eu.mutation.ResetExpectedParticipants()
	eu.mutation.SetExpectedParticipants(i)
	return eu
}

// SetNillableExpectedParticipants sets the "expected_participants" field if the given value is not nil.
func (eu *EventUpdate) SetNillableExpectedParticipants(i *int) *EventUpdate {
	if i != nil {
		eu.SetExpectedParticipants(*i)
	}
	return eu
}

// AddExpectedParticipants adds i to the "expected_participants" field.
func (eu *EventUpdate) AddExpectedParticipants(i int) *EventUpdate {
	eu.mutation.AddExpectedParticipants(i)
	return eu
}

// ClearExpectedParticipants clears the value of the "expected_participants" field.
func (eu *EventUpdate) ClearExpectedParticipants() *EventUpdate {
	eu.mutation.ClearExpectedParticipants()
	return eu
}

// SetQrPayload sets the "qr_payload" field.
func (eu *EventUpdate) SetQrPayload(u uuid.UUID) *EventUpdate {
	eu.mutation.SetQrPayload(u)
	return eu
}

// SetNillableQrPayload sets the "qr_payload" field if the given value is not nil.
func (eu *EventUpdate) SetNillableQrPayload(u *uuid.UUID) *EventUpdate {
	if u != nil {
		eu.SetQrPayload(*u)
	}
	return eu
}

// ClearQrPayload clears the value of the "qr_payload" field.
func (eu *EventUpdate) ClearQrPayload() *EventUpdate {
	eu.mutation.ClearQrPayload()
	return eu
}

// SetQrFileID sets the "qr_file_id" field.
func (eu *EventUpdate) SetQrFileID(s string) *EventUpdate {
	eu.mutation.SetQrFileID(s)
	return eu
}

// SetNillableQrFileID sets the "qr_file_id" field if the given value is not nil.
func (eu *EventUpdate) SetNillableQrFileID(s *string) *EventUpdate {
	if s != nil {
		eu.SetQrFileID(*s)
	}
	return eu
}

// ClearQrFileID clears the value of the "qr_file_id" field.
func (eu *EventUpdate) ClearQrFileID() *EventUpdate {
	eu.mutation.ClearQrFileID()
	return eu
}

// SetAllowedRoles sets the "allowed_roles" field.
func (eu *EventUpdate) SetAllowedRoles(v valueobject.Roles) *EventUpdate {
	eu.mutation.SetAllowedRoles(v)
	return eu
}

// AppendAllowedRoles appends v to the "allowed_roles" field.
func (eu *EventUpdate) AppendAllowedRoles(v valueobject.Roles) *EventUpdate {
	eu.mutation.AppendAllowedRoles(v)
	return eu
}

// ClearAllowedRoles clears the value of the "allowed_roles" field.
func (eu *EventUpdate) ClearAllowedRoles() *EventUpdate {
	eu.mutation.ClearAllowedRoles()
	return eu
}

// SetPassRequired sets the "pass_required" field.
func (eu *EventUpdate) SetPassRequired(b bool) *EventUpdate {
	eu.mutation.SetPassRequired(b)
	return eu
}

// SetNillablePassRequired sets the "pass_required" field if the given value is not nil.
func (eu *EventUpdate) SetNillablePassRequired(b *bool) *EventUpdate {
	if b != nil {
		eu.SetPassRequired(*b)
	}
	return eu
}

// SetClub sets the "club" edge to the Club entity.
func (eu *EventUpdate) SetClub(c *Club) *EventUpdate {
	return eu.SetClubID(c.ID)
}

// AddParticipantIDs adds the "participants" edge to the User entity by IDs.
func (eu *EventUpdate) AddParticipantIDs(ids ...uuid.UUID) *EventUpdate {
	eu.mutation.AddParticipantIDs(ids...)
	return eu
}

// AddParticipants adds the "participants" edges to the User entity.
func (eu *EventUpdate) AddParticipants(u ...*User) *EventUpdate {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return eu.AddParticipantIDs(ids...)
}

// AddNotificationIDs adds the "notifications" edge to the Notification entity by IDs.
func (eu *EventUpdate) AddNotificationIDs(ids ...uuid.UUID) *EventUpdate {
	eu.mutation.AddNotificationIDs(ids...)
	return eu
}

// AddNotifications adds the "notifications" edges to the Notification entity.
func (eu *EventUpdate) AddNotifications(n ...*Notification) *EventUpdate {
	ids := make([]uuid.UUID, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return eu.AddNotificationIDs(ids...)
}

// AddPassIDs adds the "passes" edge to the Pass entity by IDs.
func (eu *EventUpdate) AddPassIDs(ids ...uuid.UUID) *EventUpdate {
	eu.mutation.AddPassIDs(ids...)
	return eu
}

// AddPasses adds the "passes" edges to the Pass entity.
func (eu *EventUpdate) AddPasses(p ...*Pass) *EventUpdate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return eu.AddPassIDs(ids...)
}

// AddEventParticipantIDs adds the "event_participants" edge to the EventParticipant entity by IDs.
func (eu *EventUpdate) AddEventParticipantIDs(ids ...uuid.UUID) *EventUpdate {
	eu.mutation.AddEventParticipantIDs(ids...)
	return eu
}

// AddEventParticipants adds the "event_participants" edges to the EventParticipant entity.
func (eu *EventUpdate) AddEventParticipants(e ...*EventParticipant) *EventUpdate {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return eu.AddEventParticipantIDs(ids...)
}

// Mutation returns the EventMutation object of the builder.
func (eu *EventUpdate) Mutation() *EventMutation {
	return eu.mutation
}

// ClearClub clears the "club" edge to the Club entity.
func (eu *EventUpdate) ClearClub() *EventUpdate {
	eu.mutation.ClearClub()
	return eu
}

// ClearParticipants clears all "participants" edges to the User entity.
func (eu *EventUpdate) ClearParticipants() *EventUpdate {
	eu.mutation.ClearParticipants()
	return eu
}

// RemoveParticipantIDs removes the "participants" edge to User entities by IDs.
func (eu *EventUpdate) RemoveParticipantIDs(ids ...uuid.UUID) *EventUpdate {
	eu.mutation.RemoveParticipantIDs(ids...)
	return eu
}

// RemoveParticipants removes "participants" edges to User entities.
func (eu *EventUpdate) RemoveParticipants(u ...*User) *EventUpdate {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return eu.RemoveParticipantIDs(ids...)
}

// ClearNotifications clears all "notifications" edges to the Notification entity.
func (eu *EventUpdate) ClearNotifications() *EventUpdate {
	eu.mutation.ClearNotifications()
	return eu
}

// RemoveNotificationIDs removes the "notifications" edge to Notification entities by IDs.
func (eu *EventUpdate) RemoveNotificationIDs(ids ...uuid.UUID) *EventUpdate {
	eu.mutation.RemoveNotificationIDs(ids...)
	return eu
}

// RemoveNotifications removes "notifications" edges to Notification entities.
func (eu *EventUpdate) RemoveNotifications(n ...*Notification) *EventUpdate {
	ids := make([]uuid.UUID, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return eu.RemoveNotificationIDs(ids...)
}

// ClearPasses clears all "passes" edges to the Pass entity.
func (eu *EventUpdate) ClearPasses() *EventUpdate {
	eu.mutation.ClearPasses()
	return eu
}

// RemovePassIDs removes the "passes" edge to Pass entities by IDs.
func (eu *EventUpdate) RemovePassIDs(ids ...uuid.UUID) *EventUpdate {
	eu.mutation.RemovePassIDs(ids...)
	return eu
}

// RemovePasses removes "passes" edges to Pass entities.
func (eu *EventUpdate) RemovePasses(p ...*Pass) *EventUpdate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return eu.RemovePassIDs(ids...)
}

// ClearEventParticipants clears all "event_participants" edges to the EventParticipant entity.
func (eu *EventUpdate) ClearEventParticipants() *EventUpdate {
	eu.mutation.ClearEventParticipants()
	return eu
}

// RemoveEventParticipantIDs removes the "event_participants" edge to EventParticipant entities by IDs.
func (eu *EventUpdate) RemoveEventParticipantIDs(ids ...uuid.UUID) *EventUpdate {
	eu.mutation.RemoveEventParticipantIDs(ids...)
	return eu
}

// RemoveEventParticipants removes "event_participants" edges to EventParticipant entities.
func (eu *EventUpdate) RemoveEventParticipants(e ...*EventParticipant) *EventUpdate {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return eu.RemoveEventParticipantIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (eu *EventUpdate) Save(ctx context.Context) (int, error) {
	if err := eu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, eu.sqlSave, eu.mutation, eu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (eu *EventUpdate) SaveX(ctx context.Context) int {
	affected, err := eu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (eu *EventUpdate) Exec(ctx context.Context) error {
	_, err := eu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eu *EventUpdate) ExecX(ctx context.Context) {
	if err := eu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (eu *EventUpdate) defaults() error {
	if _, ok := eu.mutation.UpdatedAt(); !ok {
		if event.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized event.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := event.UpdateDefaultUpdatedAt()
		eu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (eu *EventUpdate) check() error {
	if v, ok := eu.mutation.MaxParticipants(); ok {
		if err := event.MaxParticipantsValidator(v); err != nil {
			return &ValidationError{Name: "max_participants", err: fmt.Errorf(`ent: validator failed for field "Event.max_participants": %w`, err)}
		}
	}
	if v, ok := eu.mutation.ExpectedParticipants(); ok {
		if err := event.ExpectedParticipantsValidator(v); err != nil {
			return &ValidationError{Name: "expected_participants", err: fmt.Errorf(`ent: validator failed for field "Event.expected_participants": %w`, err)}
		}
	}
	if eu.mutation.ClubCleared() && len(eu.mutation.ClubIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Event.club"`)
	}
	return nil
}

func (eu *EventUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := eu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(event.Table, event.Columns, sqlgraph.NewFieldSpec(event.FieldID, field.TypeUUID))
	if ps := eu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eu.mutation.DeletedAt(); ok {
		_spec.SetField(event.FieldDeletedAt, field.TypeTime, value)
	}
	if eu.mutation.DeletedAtCleared() {
		_spec.ClearField(event.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := eu.mutation.UpdatedAt(); ok {
		_spec.SetField(event.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := eu.mutation.Name(); ok {
		_spec.SetField(event.FieldName, field.TypeString, value)
	}
	if value, ok := eu.mutation.Description(); ok {
		_spec.SetField(event.FieldDescription, field.TypeString, value)
	}
	if eu.mutation.DescriptionCleared() {
		_spec.ClearField(event.FieldDescription, field.TypeString)
	}
	if value, ok := eu.mutation.AfterRegistrationText(); ok {
		_spec.SetField(event.FieldAfterRegistrationText, field.TypeString, value)
	}
	if eu.mutation.AfterRegistrationTextCleared() {
		_spec.ClearField(event.FieldAfterRegistrationText, field.TypeString)
	}
	if value, ok := eu.mutation.Location(); ok {
		_spec.SetField(event.FieldLocation, field.TypeString, value)
	}
	if value, ok := eu.mutation.StartTime(); ok {
		_spec.SetField(event.FieldStartTime, field.TypeTime, value)
	}
	if value, ok := eu.mutation.EndTime(); ok {
		_spec.SetField(event.FieldEndTime, field.TypeTime, value)
	}
	if eu.mutation.EndTimeCleared() {
		_spec.ClearField(event.FieldEndTime, field.TypeTime)
	}
	if value, ok := eu.mutation.RegistrationEndTime(); ok {
		_spec.SetField(event.FieldRegistrationEndTime, field.TypeTime, value)
	}
	if value, ok := eu.mutation.MaxParticipants(); ok {
		_spec.SetField(event.FieldMaxParticipants, field.TypeInt, value)
	}
	if value, ok := eu.mutation.AddedMaxParticipants(); ok {
		_spec.AddField(event.FieldMaxParticipants, field.TypeInt, value)
	}
	if eu.mutation.MaxParticipantsCleared() {
		_spec.ClearField(event.FieldMaxParticipants, field.TypeInt)
	}
	if value, ok := eu.mutation.ExpectedParticipants(); ok {
		_spec.SetField(event.FieldExpectedParticipants, field.TypeInt, value)
	}
	if value, ok := eu.mutation.AddedExpectedParticipants(); ok {
		_spec.AddField(event.FieldExpectedParticipants, field.TypeInt, value)
	}
	if eu.mutation.ExpectedParticipantsCleared() {
		_spec.ClearField(event.FieldExpectedParticipants, field.TypeInt)
	}
	if value, ok := eu.mutation.QrPayload(); ok {
		_spec.SetField(event.FieldQrPayload, field.TypeUUID, value)
	}
	if eu.mutation.QrPayloadCleared() {
		_spec.ClearField(event.FieldQrPayload, field.TypeUUID)
	}
	if value, ok := eu.mutation.QrFileID(); ok {
		_spec.SetField(event.FieldQrFileID, field.TypeString, value)
	}
	if eu.mutation.QrFileIDCleared() {
		_spec.ClearField(event.FieldQrFileID, field.TypeString)
	}
	if value, ok := eu.mutation.AllowedRoles(); ok {
		_spec.SetField(event.FieldAllowedRoles, field.TypeJSON, value)
	}
	if value, ok := eu.mutation.AppendedAllowedRoles(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, event.FieldAllowedRoles, value)
		})
	}
	if eu.mutation.AllowedRolesCleared() {
		_spec.ClearField(event.FieldAllowedRoles, field.TypeJSON)
	}
	if value, ok := eu.mutation.PassRequired(); ok {
		_spec.SetField(event.FieldPassRequired, field.TypeBool, value)
	}
	if eu.mutation.ClubCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   event.ClubTable,
			Columns: []string{event.ClubColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(club.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.ClubIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   event.ClubTable,
			Columns: []string{event.ClubColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(club.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.ParticipantsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.ParticipantsTable,
			Columns: event.ParticipantsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		createE := &EventParticipantCreate{config: eu.config, mutation: newEventParticipantMutation(eu.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedParticipantsIDs(); len(nodes) > 0 && !eu.mutation.ParticipantsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.ParticipantsTable,
			Columns: event.ParticipantsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &EventParticipantCreate{config: eu.config, mutation: newEventParticipantMutation(eu.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.ParticipantsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.ParticipantsTable,
			Columns: event.ParticipantsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &EventParticipantCreate{config: eu.config, mutation: newEventParticipantMutation(eu.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.NotificationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   event.NotificationsTable,
			Columns: []string{event.NotificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedNotificationsIDs(); len(nodes) > 0 && !eu.mutation.NotificationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   event.NotificationsTable,
			Columns: []string{event.NotificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.NotificationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   event.NotificationsTable,
			Columns: []string{event.NotificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.PassesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   event.PassesTable,
			Columns: []string{event.PassesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pass.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedPassesIDs(); len(nodes) > 0 && !eu.mutation.PassesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   event.PassesTable,
			Columns: []string{event.PassesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pass.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.PassesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   event.PassesTable,
			Columns: []string{event.PassesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pass.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.EventParticipantsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   event.EventParticipantsTable,
			Columns: []string{event.EventParticipantsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eventparticipant.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedEventParticipantsIDs(); len(nodes) > 0 && !eu.mutation.EventParticipantsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   event.EventParticipantsTable,
			Columns: []string{event.EventParticipantsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eventparticipant.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.EventParticipantsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   event.EventParticipantsTable,
			Columns: []string{event.EventParticipantsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eventparticipant.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, eu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{event.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	eu.mutation.done = true
	return n, nil
}

// EventUpdateOne is the builder for updating a single Event entity.
type EventUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *EventMutation
}

// SetDeletedAt sets the "deleted_at" field.
func (euo *EventUpdateOne) SetDeletedAt(t time.Time) *EventUpdateOne {
	euo.mutation.SetDeletedAt(t)
	return euo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (euo *EventUpdateOne) SetNillableDeletedAt(t *time.Time) *EventUpdateOne {
	if t != nil {
		euo.SetDeletedAt(*t)
	}
	return euo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (euo *EventUpdateOne) ClearDeletedAt() *EventUpdateOne {
	euo.mutation.ClearDeletedAt()
	return euo
}

// SetUpdatedAt sets the "updated_at" field.
func (euo *EventUpdateOne) SetUpdatedAt(t time.Time) *EventUpdateOne {
	euo.mutation.SetUpdatedAt(t)
	return euo
}

// SetClubID sets the "club_id" field.
func (euo *EventUpdateOne) SetClubID(u uuid.UUID) *EventUpdateOne {
	euo.mutation.SetClubID(u)
	return euo
}

// SetNillableClubID sets the "club_id" field if the given value is not nil.
func (euo *EventUpdateOne) SetNillableClubID(u *uuid.UUID) *EventUpdateOne {
	if u != nil {
		euo.SetClubID(*u)
	}
	return euo
}

// SetName sets the "name" field.
func (euo *EventUpdateOne) SetName(s string) *EventUpdateOne {
	euo.mutation.SetName(s)
	return euo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (euo *EventUpdateOne) SetNillableName(s *string) *EventUpdateOne {
	if s != nil {
		euo.SetName(*s)
	}
	return euo
}

// SetDescription sets the "description" field.
func (euo *EventUpdateOne) SetDescription(s string) *EventUpdateOne {
	euo.mutation.SetDescription(s)
	return euo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (euo *EventUpdateOne) SetNillableDescription(s *string) *EventUpdateOne {
	if s != nil {
		euo.SetDescription(*s)
	}
	return euo
}

// ClearDescription clears the value of the "description" field.
func (euo *EventUpdateOne) ClearDescription() *EventUpdateOne {
	euo.mutation.ClearDescription()
	return euo
}

// SetAfterRegistrationText sets the "after_registration_text" field.
func (euo *EventUpdateOne) SetAfterRegistrationText(s string) *EventUpdateOne {
	euo.mutation.SetAfterRegistrationText(s)
	return euo
}

// SetNillableAfterRegistrationText sets the "after_registration_text" field if the given value is not nil.
func (euo *EventUpdateOne) SetNillableAfterRegistrationText(s *string) *EventUpdateOne {
	if s != nil {
		euo.SetAfterRegistrationText(*s)
	}
	return euo
}

// ClearAfterRegistrationText clears the value of the "after_registration_text" field.
func (euo *EventUpdateOne) ClearAfterRegistrationText() *EventUpdateOne {
	euo.mutation.ClearAfterRegistrationText()
	return euo
}

// SetLocation sets the "location" field.
func (euo *EventUpdateOne) SetLocation(s string) *EventUpdateOne {
	euo.mutation.SetLocation(s)
	return euo
}

// SetNillableLocation sets the "location" field if the given value is not nil.
func (euo *EventUpdateOne) SetNillableLocation(s *string) *EventUpdateOne {
	if s != nil {
		euo.SetLocation(*s)
	}
	return euo
}

// SetStartTime sets the "start_time" field.
func (euo *EventUpdateOne) SetStartTime(t time.Time) *EventUpdateOne {
	euo.mutation.SetStartTime(t)
	return euo
}

// SetNillableStartTime sets the "start_time" field if the given value is not nil.
func (euo *EventUpdateOne) SetNillableStartTime(t *time.Time) *EventUpdateOne {
	if t != nil {
		euo.SetStartTime(*t)
	}
	return euo
}

// SetEndTime sets the "end_time" field.
func (euo *EventUpdateOne) SetEndTime(t time.Time) *EventUpdateOne {
	euo.mutation.SetEndTime(t)
	return euo
}

// SetNillableEndTime sets the "end_time" field if the given value is not nil.
func (euo *EventUpdateOne) SetNillableEndTime(t *time.Time) *EventUpdateOne {
	if t != nil {
		euo.SetEndTime(*t)
	}
	return euo
}

// ClearEndTime clears the value of the "end_time" field.
func (euo *EventUpdateOne) ClearEndTime() *EventUpdateOne {
	euo.mutation.ClearEndTime()
	return euo
}

// SetRegistrationEndTime sets the "registration_end_time" field.
func (euo *EventUpdateOne) SetRegistrationEndTime(t time.Time) *EventUpdateOne {
	euo.mutation.SetRegistrationEndTime(t)
	return euo
}

// SetNillableRegistrationEndTime sets the "registration_end_time" field if the given value is not nil.
func (euo *EventUpdateOne) SetNillableRegistrationEndTime(t *time.Time) *EventUpdateOne {
	if t != nil {
		euo.SetRegistrationEndTime(*t)
	}
	return euo
}

// SetMaxParticipants sets the "max_participants" field.
func (euo *EventUpdateOne) SetMaxParticipants(i int) *EventUpdateOne {
	euo.mutation.ResetMaxParticipants()
	euo.mutation.SetMaxParticipants(i)
	return euo
}

// SetNillableMaxParticipants sets the "max_participants" field if the given value is not nil.
func (euo *EventUpdateOne) SetNillableMaxParticipants(i *int) *EventUpdateOne {
	if i != nil {
		euo.SetMaxParticipants(*i)
	}
	return euo
}

// AddMaxParticipants adds i to the "max_participants" field.
func (euo *EventUpdateOne) AddMaxParticipants(i int) *EventUpdateOne {
	euo.mutation.AddMaxParticipants(i)
	return euo
}

// ClearMaxParticipants clears the value of the "max_participants" field.
func (euo *EventUpdateOne) ClearMaxParticipants() *EventUpdateOne {
	euo.mutation.ClearMaxParticipants()
	return euo
}

// SetExpectedParticipants sets the "expected_participants" field.
func (euo *EventUpdateOne) SetExpectedParticipants(i int) *EventUpdateOne {
	euo.mutation.ResetExpectedParticipants()
	euo.mutation.SetExpectedParticipants(i)
	return euo
}

// SetNillableExpectedParticipants sets the "expected_participants" field if the given value is not nil.
func (euo *EventUpdateOne) SetNillableExpectedParticipants(i *int) *EventUpdateOne {
	if i != nil {
		euo.SetExpectedParticipants(*i)
	}
	return euo
}

// AddExpectedParticipants adds i to the "expected_participants" field.
func (euo *EventUpdateOne) AddExpectedParticipants(i int) *EventUpdateOne {
	euo.mutation.AddExpectedParticipants(i)
	return euo
}

// ClearExpectedParticipants clears the value of the "expected_participants" field.
func (euo *EventUpdateOne) ClearExpectedParticipants() *EventUpdateOne {
	euo.mutation.ClearExpectedParticipants()
	return euo
}

// SetQrPayload sets the "qr_payload" field.
func (euo *EventUpdateOne) SetQrPayload(u uuid.UUID) *EventUpdateOne {
	euo.mutation.SetQrPayload(u)
	return euo
}

// SetNillableQrPayload sets the "qr_payload" field if the given value is not nil.
func (euo *EventUpdateOne) SetNillableQrPayload(u *uuid.UUID) *EventUpdateOne {
	if u != nil {
		euo.SetQrPayload(*u)
	}
	return euo
}

// ClearQrPayload clears the value of the "qr_payload" field.
func (euo *EventUpdateOne) ClearQrPayload() *EventUpdateOne {
	euo.mutation.ClearQrPayload()
	return euo
}

// SetQrFileID sets the "qr_file_id" field.
func (euo *EventUpdateOne) SetQrFileID(s string) *EventUpdateOne {
	euo.mutation.SetQrFileID(s)
	return euo
}

// SetNillableQrFileID sets the "qr_file_id" field if the given value is not nil.
func (euo *EventUpdateOne) SetNillableQrFileID(s *string) *EventUpdateOne {
	if s != nil {
		euo.SetQrFileID(*s)
	}
	return euo
}

// ClearQrFileID clears the value of the "qr_file_id" field.
func (euo *EventUpdateOne) ClearQrFileID() *EventUpdateOne {
	euo.mutation.ClearQrFileID()
	return euo
}

// SetAllowedRoles sets the "allowed_roles" field.
func (euo *EventUpdateOne) SetAllowedRoles(v valueobject.Roles) *EventUpdateOne {
	euo.mutation.SetAllowedRoles(v)
	return euo
}

// AppendAllowedRoles appends v to the "allowed_roles" field.
func (euo *EventUpdateOne) AppendAllowedRoles(v valueobject.Roles) *EventUpdateOne {
	euo.mutation.AppendAllowedRoles(v)
	return euo
}

// ClearAllowedRoles clears the value of the "allowed_roles" field.
func (euo *EventUpdateOne) ClearAllowedRoles() *EventUpdateOne {
	euo.mutation.ClearAllowedRoles()
	return euo
}

// SetPassRequired sets the "pass_required" field.
func (euo *EventUpdateOne) SetPassRequired(b bool) *EventUpdateOne {
	euo.mutation.SetPassRequired(b)
	return euo
}

// SetNillablePassRequired sets the "pass_required" field if the given value is not nil.
func (euo *EventUpdateOne) SetNillablePassRequired(b *bool) *EventUpdateOne {
	if b != nil {
		euo.SetPassRequired(*b)
	}
	return euo
}

// SetClub sets the "club" edge to the Club entity.
func (euo *EventUpdateOne) SetClub(c *Club) *EventUpdateOne {
	return euo.SetClubID(c.ID)
}

// AddParticipantIDs adds the "participants" edge to the User entity by IDs.
func (euo *EventUpdateOne) AddParticipantIDs(ids ...uuid.UUID) *EventUpdateOne {
	euo.mutation.AddParticipantIDs(ids...)
	return euo
}

// AddParticipants adds the "participants" edges to the User entity.
func (euo *EventUpdateOne) AddParticipants(u ...*User) *EventUpdateOne {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return euo.AddParticipantIDs(ids...)
}

// AddNotificationIDs adds the "notifications" edge to the Notification entity by IDs.
func (euo *EventUpdateOne) AddNotificationIDs(ids ...uuid.UUID) *EventUpdateOne {
	euo.mutation.AddNotificationIDs(ids...)
	return euo
}

// AddNotifications adds the "notifications" edges to the Notification entity.
func (euo *EventUpdateOne) AddNotifications(n ...*Notification) *EventUpdateOne {
	ids := make([]uuid.UUID, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return euo.AddNotificationIDs(ids...)
}

// AddPassIDs adds the "passes" edge to the Pass entity by IDs.
func (euo *EventUpdateOne) AddPassIDs(ids ...uuid.UUID) *EventUpdateOne {
	euo.mutation.AddPassIDs(ids...)
	return euo
}

// AddPasses adds the "passes" edges to the Pass entity.
func (euo *EventUpdateOne) AddPasses(p ...*Pass) *EventUpdateOne {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return euo.AddPassIDs(ids...)
}

// AddEventParticipantIDs adds the "event_participants" edge to the EventParticipant entity by IDs.
func (euo *EventUpdateOne) AddEventParticipantIDs(ids ...uuid.UUID) *EventUpdateOne {
	euo.mutation.AddEventParticipantIDs(ids...)
	return euo
}

// AddEventParticipants adds the "event_participants" edges to the EventParticipant entity.
func (euo *EventUpdateOne) AddEventParticipants(e ...*EventParticipant) *EventUpdateOne {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return euo.AddEventParticipantIDs(ids...)
}

// Mutation returns the EventMutation object of the builder.
func (euo *EventUpdateOne) Mutation() *EventMutation {
	return euo.mutation
}

// ClearClub clears the "club" edge to the Club entity.
func (euo *EventUpdateOne) ClearClub() *EventUpdateOne {
	euo.mutation.ClearClub()
	return euo
}

// ClearParticipants clears all "participants" edges to the User entity.
func (euo *EventUpdateOne) ClearParticipants() *EventUpdateOne {
	euo.mutation.ClearParticipants()
	return euo
}

// RemoveParticipantIDs removes the "participants" edge to User entities by IDs.
func (euo *EventUpdateOne) RemoveParticipantIDs(ids ...uuid.UUID) *EventUpdateOne {
	euo.mutation.RemoveParticipantIDs(ids...)
	return euo
}

// RemoveParticipants removes "participants" edges to User entities.
func (euo *EventUpdateOne) RemoveParticipants(u ...*User) *EventUpdateOne {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return euo.RemoveParticipantIDs(ids...)
}

// ClearNotifications clears all "notifications" edges to the Notification entity.
func (euo *EventUpdateOne) ClearNotifications() *EventUpdateOne {
	euo.mutation.ClearNotifications()
	return euo
}

// RemoveNotificationIDs removes the "notifications" edge to Notification entities by IDs.
func (euo *EventUpdateOne) RemoveNotificationIDs(ids ...uuid.UUID) *EventUpdateOne {
	euo.mutation.RemoveNotificationIDs(ids...)
	return euo
}

// RemoveNotifications removes "notifications" edges to Notification entities.
func (euo *EventUpdateOne) RemoveNotifications(n ...*Notification) *EventUpdateOne {
	ids := make([]uuid.UUID, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return euo.RemoveNotificationIDs(ids...)
}

// ClearPasses clears all "passes" edges to the Pass entity.
func (euo *EventUpdateOne) ClearPasses() *EventUpdateOne {
	euo.mutation.ClearPasses()
	return euo
}

// RemovePassIDs removes the "passes" edge to Pass entities by IDs.
func (euo *EventUpdateOne) RemovePassIDs(ids ...uuid.UUID) *EventUpdateOne {
	euo.mutation.RemovePassIDs(ids...)
	return euo
}

// RemovePasses removes "passes" edges to Pass entities.
func (euo *EventUpdateOne) RemovePasses(p ...*Pass) *EventUpdateOne {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return euo.RemovePassIDs(ids...)
}

// ClearEventParticipants clears all "event_participants" edges to the EventParticipant entity.
func (euo *EventUpdateOne) ClearEventParticipants() *EventUpdateOne {
	euo.mutation.ClearEventParticipants()
	return euo
}

// RemoveEventParticipantIDs removes the "event_participants" edge to EventParticipant entities by IDs.
func (euo *EventUpdateOne) RemoveEventParticipantIDs(ids ...uuid.UUID) *EventUpdateOne {
	euo.mutation.RemoveEventParticipantIDs(ids...)
	return euo
}

// RemoveEventParticipants removes "event_participants" edges to EventParticipant entities.
func (euo *EventUpdateOne) RemoveEventParticipants(e ...*EventParticipant) *EventUpdateOne {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return euo.RemoveEventParticipantIDs(ids...)
}

// Where appends a list predicates to the EventUpdate builder.
func (euo *EventUpdateOne) Where(ps ...predicate.Event) *EventUpdateOne {
	euo.mutation.Where(ps...)
	return euo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (euo *EventUpdateOne) Select(field string, fields ...string) *EventUpdateOne {
	euo.fields = append([]string{field}, fields...)
	return euo
}

// Save executes the query and returns the updated Event entity.
func (euo *EventUpdateOne) Save(ctx context.Context) (*Event, error) {
	if err := euo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, euo.sqlSave, euo.mutation, euo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (euo *EventUpdateOne) SaveX(ctx context.Context) *Event {
	node, err := euo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (euo *EventUpdateOne) Exec(ctx context.Context) error {
	_, err := euo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (euo *EventUpdateOne) ExecX(ctx context.Context) {
	if err := euo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (euo *EventUpdateOne) defaults() error {
	if _, ok := euo.mutation.UpdatedAt(); !ok {
		if event.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized event.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := event.UpdateDefaultUpdatedAt()
		euo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (euo *EventUpdateOne) check() error {
	if v, ok := euo.mutation.MaxParticipants(); ok {
		if err := event.MaxParticipantsValidator(v); err != nil {
			return &ValidationError{Name: "max_participants", err: fmt.Errorf(`ent: validator failed for field "Event.max_participants": %w`, err)}
		}
	}
	if v, ok := euo.mutation.ExpectedParticipants(); ok {
		if err := event.ExpectedParticipantsValidator(v); err != nil {
			return &ValidationError{Name: "expected_participants", err: fmt.Errorf(`ent: validator failed for field "Event.expected_participants": %w`, err)}
		}
	}
	if euo.mutation.ClubCleared() && len(euo.mutation.ClubIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Event.club"`)
	}
	return nil
}

func (euo *EventUpdateOne) sqlSave(ctx context.Context) (_node *Event, err error) {
	if err := euo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(event.Table, event.Columns, sqlgraph.NewFieldSpec(event.FieldID, field.TypeUUID))
	id, ok := euo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Event.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := euo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, event.FieldID)
		for _, f := range fields {
			if !event.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != event.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := euo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := euo.mutation.DeletedAt(); ok {
		_spec.SetField(event.FieldDeletedAt, field.TypeTime, value)
	}
	if euo.mutation.DeletedAtCleared() {
		_spec.ClearField(event.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := euo.mutation.UpdatedAt(); ok {
		_spec.SetField(event.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := euo.mutation.Name(); ok {
		_spec.SetField(event.FieldName, field.TypeString, value)
	}
	if value, ok := euo.mutation.Description(); ok {
		_spec.SetField(event.FieldDescription, field.TypeString, value)
	}
	if euo.mutation.DescriptionCleared() {
		_spec.ClearField(event.FieldDescription, field.TypeString)
	}
	if value, ok := euo.mutation.AfterRegistrationText(); ok {
		_spec.SetField(event.FieldAfterRegistrationText, field.TypeString, value)
	}
	if euo.mutation.AfterRegistrationTextCleared() {
		_spec.ClearField(event.FieldAfterRegistrationText, field.TypeString)
	}
	if value, ok := euo.mutation.Location(); ok {
		_spec.SetField(event.FieldLocation, field.TypeString, value)
	}
	if value, ok := euo.mutation.StartTime(); ok {
		_spec.SetField(event.FieldStartTime, field.TypeTime, value)
	}
	if value, ok := euo.mutation.EndTime(); ok {
		_spec.SetField(event.FieldEndTime, field.TypeTime, value)
	}
	if euo.mutation.EndTimeCleared() {
		_spec.ClearField(event.FieldEndTime, field.TypeTime)
	}
	if value, ok := euo.mutation.RegistrationEndTime(); ok {
		_spec.SetField(event.FieldRegistrationEndTime, field.TypeTime, value)
	}
	if value, ok := euo.mutation.MaxParticipants(); ok {
		_spec.SetField(event.FieldMaxParticipants, field.TypeInt, value)
	}
	if value, ok := euo.mutation.AddedMaxParticipants(); ok {
		_spec.AddField(event.FieldMaxParticipants, field.TypeInt, value)
	}
	if euo.mutation.MaxParticipantsCleared() {
		_spec.ClearField(event.FieldMaxParticipants, field.TypeInt)
	}
	if value, ok := euo.mutation.ExpectedParticipants(); ok {
		_spec.SetField(event.FieldExpectedParticipants, field.TypeInt, value)
	}
	if value, ok := euo.mutation.AddedExpectedParticipants(); ok {
		_spec.AddField(event.FieldExpectedParticipants, field.TypeInt, value)
	}
	if euo.mutation.ExpectedParticipantsCleared() {
		_spec.ClearField(event.FieldExpectedParticipants, field.TypeInt)
	}
	if value, ok := euo.mutation.QrPayload(); ok {
		_spec.SetField(event.FieldQrPayload, field.TypeUUID, value)
	}
	if euo.mutation.QrPayloadCleared() {
		_spec.ClearField(event.FieldQrPayload, field.TypeUUID)
	}
	if value, ok := euo.mutation.QrFileID(); ok {
		_spec.SetField(event.FieldQrFileID, field.TypeString, value)
	}
	if euo.mutation.QrFileIDCleared() {
		_spec.ClearField(event.FieldQrFileID, field.TypeString)
	}
	if value, ok := euo.mutation.AllowedRoles(); ok {
		_spec.SetField(event.FieldAllowedRoles, field.TypeJSON, value)
	}
	if value, ok := euo.mutation.AppendedAllowedRoles(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, event.FieldAllowedRoles, value)
		})
	}
	if euo.mutation.AllowedRolesCleared() {
		_spec.ClearField(event.FieldAllowedRoles, field.TypeJSON)
	}
	if value, ok := euo.mutation.PassRequired(); ok {
		_spec.SetField(event.FieldPassRequired, field.TypeBool, value)
	}
	if euo.mutation.ClubCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   event.ClubTable,
			Columns: []string{event.ClubColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(club.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.ClubIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   event.ClubTable,
			Columns: []string{event.ClubColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(club.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.ParticipantsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.ParticipantsTable,
			Columns: event.ParticipantsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		createE := &EventParticipantCreate{config: euo.config, mutation: newEventParticipantMutation(euo.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedParticipantsIDs(); len(nodes) > 0 && !euo.mutation.ParticipantsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.ParticipantsTable,
			Columns: event.ParticipantsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &EventParticipantCreate{config: euo.config, mutation: newEventParticipantMutation(euo.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.ParticipantsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.ParticipantsTable,
			Columns: event.ParticipantsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &EventParticipantCreate{config: euo.config, mutation: newEventParticipantMutation(euo.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.NotificationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   event.NotificationsTable,
			Columns: []string{event.NotificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedNotificationsIDs(); len(nodes) > 0 && !euo.mutation.NotificationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   event.NotificationsTable,
			Columns: []string{event.NotificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.NotificationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   event.NotificationsTable,
			Columns: []string{event.NotificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.PassesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   event.PassesTable,
			Columns: []string{event.PassesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pass.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedPassesIDs(); len(nodes) > 0 && !euo.mutation.PassesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   event.PassesTable,
			Columns: []string{event.PassesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pass.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.PassesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   event.PassesTable,
			Columns: []string{event.PassesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pass.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.EventParticipantsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   event.EventParticipantsTable,
			Columns: []string{event.EventParticipantsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eventparticipant.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedEventParticipantsIDs(); len(nodes) > 0 && !euo.mutation.EventParticipantsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   event.EventParticipantsTable,
			Columns: []string{event.EventParticipantsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eventparticipant.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.EventParticipantsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   event.EventParticipantsTable,
			Columns: []string{event.EventParticipantsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eventparticipant.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Event{config: euo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, euo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{event.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	euo.mutation.done = true
	return _node, nil
}
