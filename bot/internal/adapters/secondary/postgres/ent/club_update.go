// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"

	"github.com/Badsnus/cu-clubs-bot/bot/internal/adapters/secondary/postgres/ent/club"
	"github.com/Badsnus/cu-clubs-bot/bot/internal/adapters/secondary/postgres/ent/clubowner"
	"github.com/Badsnus/cu-clubs-bot/bot/internal/adapters/secondary/postgres/ent/event"
	"github.com/Badsnus/cu-clubs-bot/bot/internal/adapters/secondary/postgres/ent/ignoremailing"
	"github.com/Badsnus/cu-clubs-bot/bot/internal/adapters/secondary/postgres/ent/predicate"
	"github.com/Badsnus/cu-clubs-bot/bot/internal/adapters/secondary/postgres/ent/user"
	"github.com/Badsnus/cu-clubs-bot/bot/internal/domain/valueobject"
)

// ClubUpdate is the builder for updating Club entities.
type ClubUpdate struct {
	config
	hooks    []Hook
	mutation *ClubMutation
}

// Where appends a list predicates to the ClubUpdate builder.
func (cu *ClubUpdate) Where(ps ...predicate.Club) *ClubUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetDeletedAt sets the "deleted_at" field.
func (cu *ClubUpdate) SetDeletedAt(t time.Time) *ClubUpdate {
	cu.mutation.SetDeletedAt(t)
	return cu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (cu *ClubUpdate) SetNillableDeletedAt(t *time.Time) *ClubUpdate {
	if t != nil {
		cu.SetDeletedAt(*t)
	}
	return cu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (cu *ClubUpdate) ClearDeletedAt() *ClubUpdate {
	cu.mutation.ClearDeletedAt()
	return cu
}

// SetUpdatedAt sets the "updated_at" field.
func (cu *ClubUpdate) SetUpdatedAt(t time.Time) *ClubUpdate {
	cu.mutation.SetUpdatedAt(t)
	return cu
}

// SetName sets the "name" field.
func (cu *ClubUpdate) SetName(s string) *ClubUpdate {
	cu.mutation.SetName(s)
	return cu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cu *ClubUpdate) SetNillableName(s *string) *ClubUpdate {
	if s != nil {
		cu.SetName(*s)
	}
	return cu
}

// SetDescription sets the "description" field.
func (cu *ClubUpdate) SetDescription(s string) *ClubUpdate {
	cu.mutation.SetDescription(s)
	return cu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (cu *ClubUpdate) SetNillableDescription(s *string) *ClubUpdate {
	if s != nil {
		cu.SetDescription(*s)
	}
	return cu
}

// ClearDescription clears the value of the "description" field.
func (cu *ClubUpdate) ClearDescription() *ClubUpdate {
	cu.mutation.ClearDescription()
	return cu
}

// SetLink sets the "link" field.
func (cu *ClubUpdate) SetLink(s string) *ClubUpdate {
	cu.mutation.SetLink(s)
	return cu
}

// SetNillableLink sets the "link" field if the given value is not nil.
func (cu *ClubUpdate) SetNillableLink(s *string) *ClubUpdate {
	if s != nil {
		cu.SetLink(*s)
	}
	return cu
}

// ClearLink clears the value of the "link" field.
func (cu *ClubUpdate) ClearLink() *ClubUpdate {
	cu.mutation.ClearLink()
	return cu
}

// SetAvatarID sets the "avatar_id" field.
func (cu *ClubUpdate) SetAvatarID(s string) *ClubUpdate {
	cu.mutation.SetAvatarID(s)
	return cu
}

// SetNillableAvatarID sets the "avatar_id" field if the given value is not nil.
func (cu *ClubUpdate) SetNillableAvatarID(s *string) *ClubUpdate {
	if s != nil {
		cu.SetAvatarID(*s)
	}
	return cu
}

// ClearAvatarID clears the value of the "avatar_id" field.
func (cu *ClubUpdate) ClearAvatarID() *ClubUpdate {
	cu.mutation.ClearAvatarID()
	return cu
}

// SetIntroID sets the "intro_id" field.
func (cu *ClubUpdate) SetIntroID(s string) *ClubUpdate {
	cu.mutation.SetIntroID(s)
	return cu
}

// SetNillableIntroID sets the "intro_id" field if the given value is not nil.
func (cu *ClubUpdate) SetNillableIntroID(s *string) *ClubUpdate {
	if s != nil {
		cu.SetIntroID(*s)
	}
	return cu
}

// ClearIntroID clears the value of the "intro_id" field.
func (cu *ClubUpdate) ClearIntroID() *ClubUpdate {
	cu.mutation.ClearIntroID()
	return cu
}

// SetVisibleInTour sets the "visible_in_tour" field.
func (cu *ClubUpdate) SetVisibleInTour(b bool) *ClubUpdate {
	cu.mutation.SetVisibleInTour(b)
	return cu
}

// SetNillableVisibleInTour sets the "visible_in_tour" field if the given value is not nil.
func (cu *ClubUpdate) SetNillableVisibleInTour(b *bool) *ClubUpdate {
	if b != nil {
		cu.SetVisibleInTour(*b)
	}
	return cu
}

// SetAllowedRoles sets the "allowed_roles" field.
func (cu *ClubUpdate) SetAllowedRoles(v valueobject.Roles) *ClubUpdate {
	cu.mutation.SetAllowedRoles(v)
	return cu
}

// AppendAllowedRoles appends v to the "allowed_roles" field.
func (cu *ClubUpdate) AppendAllowedRoles(v valueobject.Roles) *ClubUpdate {
	cu.mutation.AppendAllowedRoles(v)
	return cu
}

// ClearAllowedRoles clears the value of the "allowed_roles" field.
func (cu *ClubUpdate) ClearAllowedRoles() *ClubUpdate {
	cu.mutation.ClearAllowedRoles()
	return cu
}

// SetQrAllowed sets the "qr_allowed" field.
func (cu *ClubUpdate) SetQrAllowed(b bool) *ClubUpdate {
	cu.mutation.SetQrAllowed(b)
	return cu
}

// SetNillableQrAllowed sets the "qr_allowed" field if the given value is not nil.
func (cu *ClubUpdate) SetNillableQrAllowed(b *bool) *ClubUpdate {
	if b != nil {
		cu.SetQrAllowed(*b)
	}
	return cu
}

// AddEventIDs adds the "events" edge to the Event entity by IDs.
func (cu *ClubUpdate) AddEventIDs(ids ...uuid.UUID) *ClubUpdate {
	cu.mutation.AddEventIDs(ids...)
	return cu
}

// AddEvents adds the "events" edges to the Event entity.
func (cu *ClubUpdate) AddEvents(e ...*Event) *ClubUpdate {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return cu.AddEventIDs(ids...)
}

// AddOwnerIDs adds the "owners" edge to the User entity by IDs.
func (cu *ClubUpdate) AddOwnerIDs(ids ...uuid.UUID) *ClubUpdate {
	cu.mutation.AddOwnerIDs(ids...)
	return cu
}

// AddOwners adds the "owners" edges to the User entity.
func (cu *ClubUpdate) AddOwners(u ...*User) *ClubUpdate {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return cu.AddOwnerIDs(ids...)
}

// AddIgnoreMailingIDs adds the "ignore_mailings" edge to the IgnoreMailing entity by IDs.
func (cu *ClubUpdate) AddIgnoreMailingIDs(ids ...uuid.UUID) *ClubUpdate {
	cu.mutation.AddIgnoreMailingIDs(ids...)
	return cu
}

// AddIgnoreMailings adds the "ignore_mailings" edges to the IgnoreMailing entity.
func (cu *ClubUpdate) AddIgnoreMailings(i ...*IgnoreMailing) *ClubUpdate {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return cu.AddIgnoreMailingIDs(ids...)
}

// AddClubOwnerIDs adds the "club_owners" edge to the ClubOwner entity by IDs.
func (cu *ClubUpdate) AddClubOwnerIDs(ids ...uuid.UUID) *ClubUpdate {
	cu.mutation.AddClubOwnerIDs(ids...)
	return cu
}

// AddClubOwners adds the "club_owners" edges to the ClubOwner entity.
func (cu *ClubUpdate) AddClubOwners(c ...*ClubOwner) *ClubUpdate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.AddClubOwnerIDs(ids...)
}

// Mutation returns the ClubMutation object of the builder.
func (cu *ClubUpdate) Mutation() *ClubMutation {
	return cu.mutation
}

// ClearEvents clears all "events" edges to the Event entity.
func (cu *ClubUpdate) ClearEvents() *ClubUpdate {
	cu.mutation.ClearEvents()
	return cu
}

// RemoveEventIDs removes the "events" edge to Event entities by IDs.
func (cu *ClubUpdate) RemoveEventIDs(ids ...uuid.UUID) *ClubUpdate {
	cu.mutation.RemoveEventIDs(ids...)
	return cu
}

// RemoveEvents removes "events" edges to Event entities.
func (cu *ClubUpdate) RemoveEvents(e ...*Event) *ClubUpdate {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return cu.RemoveEventIDs(ids...)
}

// ClearOwners clears all "owners" edges to the User entity.
func (cu *ClubUpdate) ClearOwners() *ClubUpdate {
	cu.mutation.ClearOwners()
	return cu
}

// RemoveOwnerIDs removes the "owners" edge to User entities by IDs.
func (cu *ClubUpdate) RemoveOwnerIDs(ids ...uuid.UUID) *ClubUpdate {
	cu.mutation.RemoveOwnerIDs(ids...)
	return cu
}

// RemoveOwners removes "owners" edges to User entities.
func (cu *ClubUpdate) RemoveOwners(u ...*User) *ClubUpdate {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return cu.RemoveOwnerIDs(ids...)
}

// ClearIgnoreMailings clears all "ignore_mailings" edges to the IgnoreMailing entity.
func (cu *ClubUpdate) ClearIgnoreMailings() *ClubUpdate {
	cu.mutation.ClearIgnoreMailings()
	return cu
}

// RemoveIgnoreMailingIDs removes the "ignore_mailings" edge to IgnoreMailing entities by IDs.
func (cu *ClubUpdate) RemoveIgnoreMailingIDs(ids ...uuid.UUID) *ClubUpdate {
	cu.mutation.RemoveIgnoreMailingIDs(ids...)
	return cu
}

// RemoveIgnoreMailings removes "ignore_mailings" edges to IgnoreMailing entities.
func (cu *ClubUpdate) RemoveIgnoreMailings(i ...*IgnoreMailing) *ClubUpdate {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return cu.RemoveIgnoreMailingIDs(ids...)
}

// ClearClubOwners clears all "club_owners" edges to the ClubOwner entity.
func (cu *ClubUpdate) ClearClubOwners() *ClubUpdate {
	cu.mutation.ClearClubOwners()
	return cu
}

// RemoveClubOwnerIDs removes the "club_owners" edge to ClubOwner entities by IDs.
func (cu *ClubUpdate) RemoveClubOwnerIDs(ids ...uuid.UUID) *ClubUpdate {
	cu.mutation.RemoveClubOwnerIDs(ids...)
	return cu
}

// RemoveClubOwners removes "club_owners" edges to ClubOwner entities.
func (cu *ClubUpdate) RemoveClubOwners(c ...*ClubOwner) *ClubUpdate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.RemoveClubOwnerIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *ClubUpdate) Save(ctx context.Context) (int, error) {
	if err := cu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *ClubUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *ClubUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *ClubUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cu *ClubUpdate) defaults() error {
	if _, ok := cu.mutation.UpdatedAt(); !ok {
		if club.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized club.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := club.UpdateDefaultUpdatedAt()
		cu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (cu *ClubUpdate) check() error {
	if v, ok := cu.mutation.Link(); ok {
		if err := club.LinkValidator(v); err != nil {
			return &ValidationError{Name: "link", err: fmt.Errorf(`ent: validator failed for field "Club.link": %w`, err)}
		}
	}
	return nil
}

func (cu *ClubUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(club.Table, club.Columns, sqlgraph.NewFieldSpec(club.FieldID, field.TypeUUID))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.DeletedAt(); ok {
		_spec.SetField(club.FieldDeletedAt, field.TypeTime, value)
	}
	if cu.mutation.DeletedAtCleared() {
		_spec.ClearField(club.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := cu.mutation.UpdatedAt(); ok {
		_spec.SetField(club.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := cu.mutation.Name(); ok {
		_spec.SetField(club.FieldName, field.TypeString, value)
	}
	if value, ok := cu.mutation.Description(); ok {
		_spec.SetField(club.FieldDescription, field.TypeString, value)
	}
	if cu.mutation.DescriptionCleared() {
		_spec.ClearField(club.FieldDescription, field.TypeString)
	}
	if value, ok := cu.mutation.Link(); ok {
		_spec.SetField(club.FieldLink, field.TypeString, value)
	}
	if cu.mutation.LinkCleared() {
		_spec.ClearField(club.FieldLink, field.TypeString)
	}
	if value, ok := cu.mutation.AvatarID(); ok {
		_spec.SetField(club.FieldAvatarID, field.TypeString, value)
	}
	if cu.mutation.AvatarIDCleared() {
		_spec.ClearField(club.FieldAvatarID, field.TypeString)
	}
	if value, ok := cu.mutation.IntroID(); ok {
		_spec.SetField(club.FieldIntroID, field.TypeString, value)
	}
	if cu.mutation.IntroIDCleared() {
		_spec.ClearField(club.FieldIntroID, field.TypeString)
	}
	if value, ok := cu.mutation.VisibleInTour(); ok {
		_spec.SetField(club.FieldVisibleInTour, field.TypeBool, value)
	}
	if value, ok := cu.mutation.AllowedRoles(); ok {
		_spec.SetField(club.FieldAllowedRoles, field.TypeJSON, value)
	}
	if value, ok := cu.mutation.AppendedAllowedRoles(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, club.FieldAllowedRoles, value)
		})
	}
	if cu.mutation.AllowedRolesCleared() {
		_spec.ClearField(club.FieldAllowedRoles, field.TypeJSON)
	}
	if value, ok := cu.mutation.QrAllowed(); ok {
		_spec.SetField(club.FieldQrAllowed, field.TypeBool, value)
	}
	if cu.mutation.EventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   club.EventsTable,
			Columns: []string{club.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedEventsIDs(); len(nodes) > 0 && !cu.mutation.EventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   club.EventsTable,
			Columns: []string{club.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.EventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   club.EventsTable,
			Columns: []string{club.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.OwnersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   club.OwnersTable,
			Columns: club.OwnersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		createE := &ClubOwnerCreate{config: cu.config, mutation: newClubOwnerMutation(cu.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedOwnersIDs(); len(nodes) > 0 && !cu.mutation.OwnersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   club.OwnersTable,
			Columns: club.OwnersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &ClubOwnerCreate{config: cu.config, mutation: newClubOwnerMutation(cu.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.OwnersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   club.OwnersTable,
			Columns: club.OwnersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &ClubOwnerCreate{config: cu.config, mutation: newClubOwnerMutation(cu.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.IgnoreMailingsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   club.IgnoreMailingsTable,
			Columns: []string{club.IgnoreMailingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ignoremailing.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedIgnoreMailingsIDs(); len(nodes) > 0 && !cu.mutation.IgnoreMailingsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   club.IgnoreMailingsTable,
			Columns: []string{club.IgnoreMailingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ignoremailing.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.IgnoreMailingsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   club.IgnoreMailingsTable,
			Columns: []string{club.IgnoreMailingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ignoremailing.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.ClubOwnersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   club.ClubOwnersTable,
			Columns: []string{club.ClubOwnersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(clubowner.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedClubOwnersIDs(); len(nodes) > 0 && !cu.mutation.ClubOwnersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   club.ClubOwnersTable,
			Columns: []string{club.ClubOwnersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(clubowner.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.ClubOwnersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   club.ClubOwnersTable,
			Columns: []string{club.ClubOwnersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(clubowner.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{club.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// ClubUpdateOne is the builder for updating a single Club entity.
type ClubUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ClubMutation
}

// SetDeletedAt sets the "deleted_at" field.
func (cuo *ClubUpdateOne) SetDeletedAt(t time.Time) *ClubUpdateOne {
	cuo.mutation.SetDeletedAt(t)
	return cuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (cuo *ClubUpdateOne) SetNillableDeletedAt(t *time.Time) *ClubUpdateOne {
	if t != nil {
		cuo.SetDeletedAt(*t)
	}
	return cuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (cuo *ClubUpdateOne) ClearDeletedAt() *ClubUpdateOne {
	cuo.mutation.ClearDeletedAt()
	return cuo
}

// SetUpdatedAt sets the "updated_at" field.
func (cuo *ClubUpdateOne) SetUpdatedAt(t time.Time) *ClubUpdateOne {
	cuo.mutation.SetUpdatedAt(t)
	return cuo
}

// SetName sets the "name" field.
func (cuo *ClubUpdateOne) SetName(s string) *ClubUpdateOne {
	cuo.mutation.SetName(s)
	return cuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cuo *ClubUpdateOne) SetNillableName(s *string) *ClubUpdateOne {
	if s != nil {
		cuo.SetName(*s)
	}
	return cuo
}

// SetDescription sets the "description" field.
func (cuo *ClubUpdateOne) SetDescription(s string) *ClubUpdateOne {
	cuo.mutation.SetDescription(s)
	return cuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (cuo *ClubUpdateOne) SetNillableDescription(s *string) *ClubUpdateOne {
	if s != nil {
		cuo.SetDescription(*s)
	}
	return cuo
}

// ClearDescription clears the value of the "description" field.
func (cuo *ClubUpdateOne) ClearDescription() *ClubUpdateOne {
	cuo.mutation.ClearDescription()
	return cuo
}

// SetLink sets the "link" field.
func (cuo *ClubUpdateOne) SetLink(s string) *ClubUpdateOne {
	cuo.mutation.SetLink(s)
	return cuo
}

// SetNillableLink sets the "link" field if the given value is not nil.
func (cuo *ClubUpdateOne) SetNillableLink(s *string) *ClubUpdateOne {
	if s != nil {
		cuo.SetLink(*s)
	}
	return cuo
}

// ClearLink clears the value of the "link" field.
func (cuo *ClubUpdateOne) ClearLink() *ClubUpdateOne {
	cuo.mutation.ClearLink()
	return cuo
}

// SetAvatarID sets the "avatar_id" field.
func (cuo *ClubUpdateOne) SetAvatarID(s string) *ClubUpdateOne {
	cuo.mutation.SetAvatarID(s)
	return cuo
}

// SetNillableAvatarID sets the "avatar_id" field if the given value is not nil.
func (cuo *ClubUpdateOne) SetNillableAvatarID(s *string) *ClubUpdateOne {
	if s != nil {
		cuo.SetAvatarID(*s)
	}
	return cuo
}

// ClearAvatarID clears the value of the "avatar_id" field.
func (cuo *ClubUpdateOne) ClearAvatarID() *ClubUpdateOne {
	cuo.mutation.ClearAvatarID()
	return cuo
}

// SetIntroID sets the "intro_id" field.
func (cuo *ClubUpdateOne) SetIntroID(s string) *ClubUpdateOne {
	cuo.mutation.SetIntroID(s)
	return cuo
}

// SetNillableIntroID sets the "intro_id" field if the given value is not nil.
func (cuo *ClubUpdateOne) SetNillableIntroID(s *string) *ClubUpdateOne {
	if s != nil {
		cuo.SetIntroID(*s)
	}
	return cuo
}

// ClearIntroID clears the value of the "intro_id" field.
func (cuo *ClubUpdateOne) ClearIntroID() *ClubUpdateOne {
	cuo.mutation.ClearIntroID()
	return cuo
}

// SetVisibleInTour sets the "visible_in_tour" field.
func (cuo *ClubUpdateOne) SetVisibleInTour(b bool) *ClubUpdateOne {
	cuo.mutation.SetVisibleInTour(b)
	return cuo
}

// SetNillableVisibleInTour sets the "visible_in_tour" field if the given value is not nil.
func (cuo *ClubUpdateOne) SetNillableVisibleInTour(b *bool) *ClubUpdateOne {
	if b != nil {
		cuo.SetVisibleInTour(*b)
	}
	return cuo
}

// SetAllowedRoles sets the "allowed_roles" field.
func (cuo *ClubUpdateOne) SetAllowedRoles(v valueobject.Roles) *ClubUpdateOne {
	cuo.mutation.SetAllowedRoles(v)
	return cuo
}

// AppendAllowedRoles appends v to the "allowed_roles" field.
func (cuo *ClubUpdateOne) AppendAllowedRoles(v valueobject.Roles) *ClubUpdateOne {
	cuo.mutation.AppendAllowedRoles(v)
	return cuo
}

// ClearAllowedRoles clears the value of the "allowed_roles" field.
func (cuo *ClubUpdateOne) ClearAllowedRoles() *ClubUpdateOne {
	cuo.mutation.ClearAllowedRoles()
	return cuo
}

// SetQrAllowed sets the "qr_allowed" field.
func (cuo *ClubUpdateOne) SetQrAllowed(b bool) *ClubUpdateOne {
	cuo.mutation.SetQrAllowed(b)
	return cuo
}

// SetNillableQrAllowed sets the "qr_allowed" field if the given value is not nil.
func (cuo *ClubUpdateOne) SetNillableQrAllowed(b *bool) *ClubUpdateOne {
	if b != nil {
		cuo.SetQrAllowed(*b)
	}
	return cuo
}

// AddEventIDs adds the "events" edge to the Event entity by IDs.
func (cuo *ClubUpdateOne) AddEventIDs(ids ...uuid.UUID) *ClubUpdateOne {
	cuo.mutation.AddEventIDs(ids...)
	return cuo
}

// AddEvents adds the "events" edges to the Event entity.
func (cuo *ClubUpdateOne) AddEvents(e ...*Event) *ClubUpdateOne {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return cuo.AddEventIDs(ids...)
}

// AddOwnerIDs adds the "owners" edge to the User entity by IDs.
func (cuo *ClubUpdateOne) AddOwnerIDs(ids ...uuid.UUID) *ClubUpdateOne {
	cuo.mutation.AddOwnerIDs(ids...)
	return cuo
}

// AddOwners adds the "owners" edges to the User entity.
func (cuo *ClubUpdateOne) AddOwners(u ...*User) *ClubUpdateOne {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return cuo.AddOwnerIDs(ids...)
}

// AddIgnoreMailingIDs adds the "ignore_mailings" edge to the IgnoreMailing entity by IDs.
func (cuo *ClubUpdateOne) AddIgnoreMailingIDs(ids ...uuid.UUID) *ClubUpdateOne {
	cuo.mutation.AddIgnoreMailingIDs(ids...)
	return cuo
}

// AddIgnoreMailings adds the "ignore_mailings" edges to the IgnoreMailing entity.
func (cuo *ClubUpdateOne) AddIgnoreMailings(i ...*IgnoreMailing) *ClubUpdateOne {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return cuo.AddIgnoreMailingIDs(ids...)
}

// AddClubOwnerIDs adds the "club_owners" edge to the ClubOwner entity by IDs.
func (cuo *ClubUpdateOne) AddClubOwnerIDs(ids ...uuid.UUID) *ClubUpdateOne {
	cuo.mutation.AddClubOwnerIDs(ids...)
	return cuo
}

// AddClubOwners adds the "club_owners" edges to the ClubOwner entity.
func (cuo *ClubUpdateOne) AddClubOwners(c ...*ClubOwner) *ClubUpdateOne {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.AddClubOwnerIDs(ids...)
}

// Mutation returns the ClubMutation object of the builder.
func (cuo *ClubUpdateOne) Mutation() *ClubMutation {
	return cuo.mutation
}

// ClearEvents clears all "events" edges to the Event entity.
func (cuo *ClubUpdateOne) ClearEvents() *ClubUpdateOne {
	cuo.mutation.ClearEvents()
	return cuo
}

// RemoveEventIDs removes the "events" edge to Event entities by IDs.
func (cuo *ClubUpdateOne) RemoveEventIDs(ids ...uuid.UUID) *ClubUpdateOne {
	cuo.mutation.RemoveEventIDs(ids...)
	return cuo
}

// RemoveEvents removes "events" edges to Event entities.
func (cuo *ClubUpdateOne) RemoveEvents(e ...*Event) *ClubUpdateOne {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return cuo.RemoveEventIDs(ids...)
}

// ClearOwners clears all "owners" edges to the User entity.
func (cuo *ClubUpdateOne) ClearOwners() *ClubUpdateOne {
	cuo.mutation.ClearOwners()
	return cuo
}

// RemoveOwnerIDs removes the "owners" edge to User entities by IDs.
func (cuo *ClubUpdateOne) RemoveOwnerIDs(ids ...uuid.UUID) *ClubUpdateOne {
	cuo.mutation.RemoveOwnerIDs(ids...)
	return cuo
}

// RemoveOwners removes "owners" edges to User entities.
func (cuo *ClubUpdateOne) RemoveOwners(u ...*User) *ClubUpdateOne {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return cuo.RemoveOwnerIDs(ids...)
}

// ClearIgnoreMailings clears all "ignore_mailings" edges to the IgnoreMailing entity.
func (cuo *ClubUpdateOne) ClearIgnoreMailings() *ClubUpdateOne {
	cuo.mutation.ClearIgnoreMailings()
	return cuo
}

// RemoveIgnoreMailingIDs removes the "ignore_mailings" edge to IgnoreMailing entities by IDs.
func (cuo *ClubUpdateOne) RemoveIgnoreMailingIDs(ids ...uuid.UUID) *ClubUpdateOne {
	cuo.mutation.RemoveIgnoreMailingIDs(ids...)
	return cuo
}

// RemoveIgnoreMailings removes "ignore_mailings" edges to IgnoreMailing entities.
func (cuo *ClubUpdateOne) RemoveIgnoreMailings(i ...*IgnoreMailing) *ClubUpdateOne {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return cuo.RemoveIgnoreMailingIDs(ids...)
}

// ClearClubOwners clears all "club_owners" edges to the ClubOwner entity.
func (cuo *ClubUpdateOne) ClearClubOwners() *ClubUpdateOne {
	cuo.mutation.ClearClubOwners()
	return cuo
}

// RemoveClubOwnerIDs removes the "club_owners" edge to ClubOwner entities by IDs.
func (cuo *ClubUpdateOne) RemoveClubOwnerIDs(ids ...uuid.UUID) *ClubUpdateOne {
	cuo.mutation.RemoveClubOwnerIDs(ids...)
	return cuo
}

// RemoveClubOwners removes "club_owners" edges to ClubOwner entities.
func (cuo *ClubUpdateOne) RemoveClubOwners(c ...*ClubOwner) *ClubUpdateOne {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.RemoveClubOwnerIDs(ids...)
}

// Where appends a list predicates to the ClubUpdate builder.
func (cuo *ClubUpdateOne) Where(ps ...predicate.Club) *ClubUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *ClubUpdateOne) Select(field string, fields ...string) *ClubUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Club entity.
func (cuo *ClubUpdateOne) Save(ctx context.Context) (*Club, error) {
	if err := cuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *ClubUpdateOne) SaveX(ctx context.Context) *Club {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *ClubUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *ClubUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cuo *ClubUpdateOne) defaults() error {
	if _, ok := cuo.mutation.UpdatedAt(); !ok {
		if club.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized club.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := club.UpdateDefaultUpdatedAt()
		cuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (cuo *ClubUpdateOne) check() error {
	if v, ok := cuo.mutation.Link(); ok {
		if err := club.LinkValidator(v); err != nil {
			return &ValidationError{Name: "link", err: fmt.Errorf(`ent: validator failed for field "Club.link": %w`, err)}
		}
	}
	return nil
}

func (cuo *ClubUpdateOne) sqlSave(ctx context.Context) (_node *Club, err error) {
	if err := cuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(club.Table, club.Columns, sqlgraph.NewFieldSpec(club.FieldID, field.TypeUUID))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Club.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, club.FieldID)
		for _, f := range fields {
			if !club.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != club.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.DeletedAt(); ok {
		_spec.SetField(club.FieldDeletedAt, field.TypeTime, value)
	}
	if cuo.mutation.DeletedAtCleared() {
		_spec.ClearField(club.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := cuo.mutation.UpdatedAt(); ok {
		_spec.SetField(club.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := cuo.mutation.Name(); ok {
		_spec.SetField(club.FieldName, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Description(); ok {
		_spec.SetField(club.FieldDescription, field.TypeString, value)
	}
	if cuo.mutation.DescriptionCleared() {
		_spec.ClearField(club.FieldDescription, field.TypeString)
	}
	if value, ok := cuo.mutation.Link(); ok {
		_spec.SetField(club.FieldLink, field.TypeString, value)
	}
	if cuo.mutation.LinkCleared() {
		_spec.ClearField(club.FieldLink, field.TypeString)
	}
	if value, ok := cuo.mutation.AvatarID(); ok {
		_spec.SetField(club.FieldAvatarID, field.TypeString, value)
	}
	if cuo.mutation.AvatarIDCleared() {
		_spec.ClearField(club.FieldAvatarID, field.TypeString)
	}
	if value, ok := cuo.mutation.IntroID(); ok {
		_spec.SetField(club.FieldIntroID, field.TypeString, value)
	}
	if cuo.mutation.IntroIDCleared() {
		_spec.ClearField(club.FieldIntroID, field.TypeString)
	}
	if value, ok := cuo.mutation.VisibleInTour(); ok {
		_spec.SetField(club.FieldVisibleInTour, field.TypeBool, value)
	}
	if value, ok := cuo.mutation.AllowedRoles(); ok {
		_spec.SetField(club.FieldAllowedRoles, field.TypeJSON, value)
	}
	if value, ok := cuo.mutation.AppendedAllowedRoles(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, club.FieldAllowedRoles, value)
		})
	}
	if cuo.mutation.AllowedRolesCleared() {
		_spec.ClearField(club.FieldAllowedRoles, field.TypeJSON)
	}
	if value, ok := cuo.mutation.QrAllowed(); ok {
		_spec.SetField(club.FieldQrAllowed, field.TypeBool, value)
	}
	if cuo.mutation.EventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   club.EventsTable,
			Columns: []string{club.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedEventsIDs(); len(nodes) > 0 && !cuo.mutation.EventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   club.EventsTable,
			Columns: []string{club.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.EventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   club.EventsTable,
			Columns: []string{club.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.OwnersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   club.OwnersTable,
			Columns: club.OwnersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		createE := &ClubOwnerCreate{config: cuo.config, mutation: newClubOwnerMutation(cuo.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedOwnersIDs(); len(nodes) > 0 && !cuo.mutation.OwnersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   club.OwnersTable,
			Columns: club.OwnersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &ClubOwnerCreate{config: cuo.config, mutation: newClubOwnerMutation(cuo.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.OwnersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   club.OwnersTable,
			Columns: club.OwnersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &ClubOwnerCreate{config: cuo.config, mutation: newClubOwnerMutation(cuo.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.IgnoreMailingsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   club.IgnoreMailingsTable,
			Columns: []string{club.IgnoreMailingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ignoremailing.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedIgnoreMailingsIDs(); len(nodes) > 0 && !cuo.mutation.IgnoreMailingsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   club.IgnoreMailingsTable,
			Columns: []string{club.IgnoreMailingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ignoremailing.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.IgnoreMailingsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   club.IgnoreMailingsTable,
			Columns: []string{club.IgnoreMailingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ignoremailing.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.ClubOwnersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   club.ClubOwnersTable,
			Columns: []string{club.ClubOwnersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(clubowner.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedClubOwnersIDs(); len(nodes) > 0 && !cuo.mutation.ClubOwnersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   club.ClubOwnersTable,
			Columns: []string{club.ClubOwnersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(clubowner.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.ClubOwnersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   club.ClubOwnersTable,
			Columns: []string{club.ClubOwnersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(clubowner.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Club{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{club.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}
