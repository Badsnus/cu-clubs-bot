// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"github.com/google/uuid"

	"github.com/Badsnus/cu-clubs-bot/bot/internal/adapters/secondary/postgres/ent/migrate"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"

	"github.com/Badsnus/cu-clubs-bot/bot/internal/adapters/secondary/postgres/ent/club"
	"github.com/Badsnus/cu-clubs-bot/bot/internal/adapters/secondary/postgres/ent/clubowner"
	"github.com/Badsnus/cu-clubs-bot/bot/internal/adapters/secondary/postgres/ent/event"
	"github.com/Badsnus/cu-clubs-bot/bot/internal/adapters/secondary/postgres/ent/eventparticipant"
	"github.com/Badsnus/cu-clubs-bot/bot/internal/adapters/secondary/postgres/ent/ignoremailing"
	"github.com/Badsnus/cu-clubs-bot/bot/internal/adapters/secondary/postgres/ent/notification"
	"github.com/Badsnus/cu-clubs-bot/bot/internal/adapters/secondary/postgres/ent/pass"
	"github.com/Badsnus/cu-clubs-bot/bot/internal/adapters/secondary/postgres/ent/user"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Club is the client for interacting with the Club builders.
	Club *ClubClient
	// ClubOwner is the client for interacting with the ClubOwner builders.
	ClubOwner *ClubOwnerClient
	// Event is the client for interacting with the Event builders.
	Event *EventClient
	// EventParticipant is the client for interacting with the EventParticipant builders.
	EventParticipant *EventParticipantClient
	// IgnoreMailing is the client for interacting with the IgnoreMailing builders.
	IgnoreMailing *IgnoreMailingClient
	// Notification is the client for interacting with the Notification builders.
	Notification *NotificationClient
	// Pass is the client for interacting with the Pass builders.
	Pass *PassClient
	// User is the client for interacting with the User builders.
	User *UserClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Club = NewClubClient(c.config)
	c.ClubOwner = NewClubOwnerClient(c.config)
	c.Event = NewEventClient(c.config)
	c.EventParticipant = NewEventParticipantClient(c.config)
	c.IgnoreMailing = NewIgnoreMailingClient(c.config)
	c.Notification = NewNotificationClient(c.config)
	c.Pass = NewPassClient(c.config)
	c.User = NewUserClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("ent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:              ctx,
		config:           cfg,
		Club:             NewClubClient(cfg),
		ClubOwner:        NewClubOwnerClient(cfg),
		Event:            NewEventClient(cfg),
		EventParticipant: NewEventParticipantClient(cfg),
		IgnoreMailing:    NewIgnoreMailingClient(cfg),
		Notification:     NewNotificationClient(cfg),
		Pass:             NewPassClient(cfg),
		User:             NewUserClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:              ctx,
		config:           cfg,
		Club:             NewClubClient(cfg),
		ClubOwner:        NewClubOwnerClient(cfg),
		Event:            NewEventClient(cfg),
		EventParticipant: NewEventParticipantClient(cfg),
		IgnoreMailing:    NewIgnoreMailingClient(cfg),
		Notification:     NewNotificationClient(cfg),
		Pass:             NewPassClient(cfg),
		User:             NewUserClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Club.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	for _, n := range []interface{ Use(...Hook) }{
		c.Club, c.ClubOwner, c.Event, c.EventParticipant, c.IgnoreMailing,
		c.Notification, c.Pass, c.User,
	} {
		n.Use(hooks...)
	}
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	for _, n := range []interface{ Intercept(...Interceptor) }{
		c.Club, c.ClubOwner, c.Event, c.EventParticipant, c.IgnoreMailing,
		c.Notification, c.Pass, c.User,
	} {
		n.Intercept(interceptors...)
	}
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *ClubMutation:
		return c.Club.mutate(ctx, m)
	case *ClubOwnerMutation:
		return c.ClubOwner.mutate(ctx, m)
	case *EventMutation:
		return c.Event.mutate(ctx, m)
	case *EventParticipantMutation:
		return c.EventParticipant.mutate(ctx, m)
	case *IgnoreMailingMutation:
		return c.IgnoreMailing.mutate(ctx, m)
	case *NotificationMutation:
		return c.Notification.mutate(ctx, m)
	case *PassMutation:
		return c.Pass.mutate(ctx, m)
	case *UserMutation:
		return c.User.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// ClubClient is a client for the Club schema.
type ClubClient struct {
	config
}

// NewClubClient returns a client for the Club from the given config.
func NewClubClient(c config) *ClubClient {
	return &ClubClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `club.Hooks(f(g(h())))`.
func (c *ClubClient) Use(hooks ...Hook) {
	c.hooks.Club = append(c.hooks.Club, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `club.Intercept(f(g(h())))`.
func (c *ClubClient) Intercept(interceptors ...Interceptor) {
	c.inters.Club = append(c.inters.Club, interceptors...)
}

// Create returns a builder for creating a Club entity.
func (c *ClubClient) Create() *ClubCreate {
	mutation := newClubMutation(c.config, OpCreate)
	return &ClubCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Club entities.
func (c *ClubClient) CreateBulk(builders ...*ClubCreate) *ClubCreateBulk {
	return &ClubCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ClubClient) MapCreateBulk(slice any, setFunc func(*ClubCreate, int)) *ClubCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ClubCreateBulk{err: fmt.Errorf("calling to ClubClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ClubCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ClubCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Club.
func (c *ClubClient) Update() *ClubUpdate {
	mutation := newClubMutation(c.config, OpUpdate)
	return &ClubUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ClubClient) UpdateOne(cl *Club) *ClubUpdateOne {
	mutation := newClubMutation(c.config, OpUpdateOne, withClub(cl))
	return &ClubUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ClubClient) UpdateOneID(id uuid.UUID) *ClubUpdateOne {
	mutation := newClubMutation(c.config, OpUpdateOne, withClubID(id))
	return &ClubUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Club.
func (c *ClubClient) Delete() *ClubDelete {
	mutation := newClubMutation(c.config, OpDelete)
	return &ClubDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ClubClient) DeleteOne(cl *Club) *ClubDeleteOne {
	return c.DeleteOneID(cl.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ClubClient) DeleteOneID(id uuid.UUID) *ClubDeleteOne {
	builder := c.Delete().Where(club.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ClubDeleteOne{builder}
}

// Query returns a query builder for Club.
func (c *ClubClient) Query() *ClubQuery {
	return &ClubQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeClub},
		inters: c.Interceptors(),
	}
}

// Get returns a Club entity by its id.
func (c *ClubClient) Get(ctx context.Context, id uuid.UUID) (*Club, error) {
	return c.Query().Where(club.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ClubClient) GetX(ctx context.Context, id uuid.UUID) *Club {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryEvents queries the events edge of a Club.
func (c *ClubClient) QueryEvents(cl *Club) *EventQuery {
	query := (&EventClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cl.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(club.Table, club.FieldID, id),
			sqlgraph.To(event.Table, event.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, club.EventsTable, club.EventsColumn),
		)
		fromV = sqlgraph.Neighbors(cl.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOwners queries the owners edge of a Club.
func (c *ClubClient) QueryOwners(cl *Club) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cl.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(club.Table, club.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, club.OwnersTable, club.OwnersPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(cl.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryIgnoreMailings queries the ignore_mailings edge of a Club.
func (c *ClubClient) QueryIgnoreMailings(cl *Club) *IgnoreMailingQuery {
	query := (&IgnoreMailingClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cl.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(club.Table, club.FieldID, id),
			sqlgraph.To(ignoremailing.Table, ignoremailing.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, club.IgnoreMailingsTable, club.IgnoreMailingsColumn),
		)
		fromV = sqlgraph.Neighbors(cl.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryClubOwners queries the club_owners edge of a Club.
func (c *ClubClient) QueryClubOwners(cl *Club) *ClubOwnerQuery {
	query := (&ClubOwnerClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cl.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(club.Table, club.FieldID, id),
			sqlgraph.To(clubowner.Table, clubowner.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, club.ClubOwnersTable, club.ClubOwnersColumn),
		)
		fromV = sqlgraph.Neighbors(cl.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ClubClient) Hooks() []Hook {
	hooks := c.hooks.Club
	return append(hooks[:len(hooks):len(hooks)], club.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *ClubClient) Interceptors() []Interceptor {
	inters := c.inters.Club
	return append(inters[:len(inters):len(inters)], club.Interceptors[:]...)
}

func (c *ClubClient) mutate(ctx context.Context, m *ClubMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ClubCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ClubUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ClubUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ClubDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Club mutation op: %q", m.Op())
	}
}

// ClubOwnerClient is a client for the ClubOwner schema.
type ClubOwnerClient struct {
	config
}

// NewClubOwnerClient returns a client for the ClubOwner from the given config.
func NewClubOwnerClient(c config) *ClubOwnerClient {
	return &ClubOwnerClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `clubowner.Hooks(f(g(h())))`.
func (c *ClubOwnerClient) Use(hooks ...Hook) {
	c.hooks.ClubOwner = append(c.hooks.ClubOwner, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `clubowner.Intercept(f(g(h())))`.
func (c *ClubOwnerClient) Intercept(interceptors ...Interceptor) {
	c.inters.ClubOwner = append(c.inters.ClubOwner, interceptors...)
}

// Create returns a builder for creating a ClubOwner entity.
func (c *ClubOwnerClient) Create() *ClubOwnerCreate {
	mutation := newClubOwnerMutation(c.config, OpCreate)
	return &ClubOwnerCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ClubOwner entities.
func (c *ClubOwnerClient) CreateBulk(builders ...*ClubOwnerCreate) *ClubOwnerCreateBulk {
	return &ClubOwnerCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ClubOwnerClient) MapCreateBulk(slice any, setFunc func(*ClubOwnerCreate, int)) *ClubOwnerCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ClubOwnerCreateBulk{err: fmt.Errorf("calling to ClubOwnerClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ClubOwnerCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ClubOwnerCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ClubOwner.
func (c *ClubOwnerClient) Update() *ClubOwnerUpdate {
	mutation := newClubOwnerMutation(c.config, OpUpdate)
	return &ClubOwnerUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ClubOwnerClient) UpdateOne(co *ClubOwner) *ClubOwnerUpdateOne {
	mutation := newClubOwnerMutation(c.config, OpUpdateOne, withClubOwner(co))
	return &ClubOwnerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ClubOwnerClient) UpdateOneID(id uuid.UUID) *ClubOwnerUpdateOne {
	mutation := newClubOwnerMutation(c.config, OpUpdateOne, withClubOwnerID(id))
	return &ClubOwnerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ClubOwner.
func (c *ClubOwnerClient) Delete() *ClubOwnerDelete {
	mutation := newClubOwnerMutation(c.config, OpDelete)
	return &ClubOwnerDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ClubOwnerClient) DeleteOne(co *ClubOwner) *ClubOwnerDeleteOne {
	return c.DeleteOneID(co.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ClubOwnerClient) DeleteOneID(id uuid.UUID) *ClubOwnerDeleteOne {
	builder := c.Delete().Where(clubowner.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ClubOwnerDeleteOne{builder}
}

// Query returns a query builder for ClubOwner.
func (c *ClubOwnerClient) Query() *ClubOwnerQuery {
	return &ClubOwnerQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeClubOwner},
		inters: c.Interceptors(),
	}
}

// Get returns a ClubOwner entity by its id.
func (c *ClubOwnerClient) Get(ctx context.Context, id uuid.UUID) (*ClubOwner, error) {
	return c.Query().Where(clubowner.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ClubOwnerClient) GetX(ctx context.Context, id uuid.UUID) *ClubOwner {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a ClubOwner.
func (c *ClubOwnerClient) QueryUser(co *ClubOwner) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := co.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(clubowner.Table, clubowner.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, clubowner.UserTable, clubowner.UserColumn),
		)
		fromV = sqlgraph.Neighbors(co.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryClub queries the club edge of a ClubOwner.
func (c *ClubOwnerClient) QueryClub(co *ClubOwner) *ClubQuery {
	query := (&ClubClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := co.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(clubowner.Table, clubowner.FieldID, id),
			sqlgraph.To(club.Table, club.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, clubowner.ClubTable, clubowner.ClubColumn),
		)
		fromV = sqlgraph.Neighbors(co.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ClubOwnerClient) Hooks() []Hook {
	hooks := c.hooks.ClubOwner
	return append(hooks[:len(hooks):len(hooks)], clubowner.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *ClubOwnerClient) Interceptors() []Interceptor {
	inters := c.inters.ClubOwner
	return append(inters[:len(inters):len(inters)], clubowner.Interceptors[:]...)
}

func (c *ClubOwnerClient) mutate(ctx context.Context, m *ClubOwnerMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ClubOwnerCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ClubOwnerUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ClubOwnerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ClubOwnerDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ClubOwner mutation op: %q", m.Op())
	}
}

// EventClient is a client for the Event schema.
type EventClient struct {
	config
}

// NewEventClient returns a client for the Event from the given config.
func NewEventClient(c config) *EventClient {
	return &EventClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `event.Hooks(f(g(h())))`.
func (c *EventClient) Use(hooks ...Hook) {
	c.hooks.Event = append(c.hooks.Event, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `event.Intercept(f(g(h())))`.
func (c *EventClient) Intercept(interceptors ...Interceptor) {
	c.inters.Event = append(c.inters.Event, interceptors...)
}

// Create returns a builder for creating a Event entity.
func (c *EventClient) Create() *EventCreate {
	mutation := newEventMutation(c.config, OpCreate)
	return &EventCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Event entities.
func (c *EventClient) CreateBulk(builders ...*EventCreate) *EventCreateBulk {
	return &EventCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *EventClient) MapCreateBulk(slice any, setFunc func(*EventCreate, int)) *EventCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &EventCreateBulk{err: fmt.Errorf("calling to EventClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*EventCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &EventCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Event.
func (c *EventClient) Update() *EventUpdate {
	mutation := newEventMutation(c.config, OpUpdate)
	return &EventUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *EventClient) UpdateOne(e *Event) *EventUpdateOne {
	mutation := newEventMutation(c.config, OpUpdateOne, withEvent(e))
	return &EventUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *EventClient) UpdateOneID(id uuid.UUID) *EventUpdateOne {
	mutation := newEventMutation(c.config, OpUpdateOne, withEventID(id))
	return &EventUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Event.
func (c *EventClient) Delete() *EventDelete {
	mutation := newEventMutation(c.config, OpDelete)
	return &EventDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *EventClient) DeleteOne(e *Event) *EventDeleteOne {
	return c.DeleteOneID(e.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *EventClient) DeleteOneID(id uuid.UUID) *EventDeleteOne {
	builder := c.Delete().Where(event.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &EventDeleteOne{builder}
}

// Query returns a query builder for Event.
func (c *EventClient) Query() *EventQuery {
	return &EventQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeEvent},
		inters: c.Interceptors(),
	}
}

// Get returns a Event entity by its id.
func (c *EventClient) Get(ctx context.Context, id uuid.UUID) (*Event, error) {
	return c.Query().Where(event.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *EventClient) GetX(ctx context.Context, id uuid.UUID) *Event {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryClub queries the club edge of a Event.
func (c *EventClient) QueryClub(e *Event) *ClubQuery {
	query := (&ClubClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(event.Table, event.FieldID, id),
			sqlgraph.To(club.Table, club.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, event.ClubTable, event.ClubColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryParticipants queries the participants edge of a Event.
func (c *EventClient) QueryParticipants(e *Event) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(event.Table, event.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, event.ParticipantsTable, event.ParticipantsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryNotifications queries the notifications edge of a Event.
func (c *EventClient) QueryNotifications(e *Event) *NotificationQuery {
	query := (&NotificationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(event.Table, event.FieldID, id),
			sqlgraph.To(notification.Table, notification.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, event.NotificationsTable, event.NotificationsColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPasses queries the passes edge of a Event.
func (c *EventClient) QueryPasses(e *Event) *PassQuery {
	query := (&PassClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(event.Table, event.FieldID, id),
			sqlgraph.To(pass.Table, pass.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, event.PassesTable, event.PassesColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEventParticipants queries the event_participants edge of a Event.
func (c *EventClient) QueryEventParticipants(e *Event) *EventParticipantQuery {
	query := (&EventParticipantClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(event.Table, event.FieldID, id),
			sqlgraph.To(eventparticipant.Table, eventparticipant.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, event.EventParticipantsTable, event.EventParticipantsColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *EventClient) Hooks() []Hook {
	hooks := c.hooks.Event
	return append(hooks[:len(hooks):len(hooks)], event.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *EventClient) Interceptors() []Interceptor {
	inters := c.inters.Event
	return append(inters[:len(inters):len(inters)], event.Interceptors[:]...)
}

func (c *EventClient) mutate(ctx context.Context, m *EventMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&EventCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&EventUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&EventUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&EventDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Event mutation op: %q", m.Op())
	}
}

// EventParticipantClient is a client for the EventParticipant schema.
type EventParticipantClient struct {
	config
}

// NewEventParticipantClient returns a client for the EventParticipant from the given config.
func NewEventParticipantClient(c config) *EventParticipantClient {
	return &EventParticipantClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `eventparticipant.Hooks(f(g(h())))`.
func (c *EventParticipantClient) Use(hooks ...Hook) {
	c.hooks.EventParticipant = append(c.hooks.EventParticipant, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `eventparticipant.Intercept(f(g(h())))`.
func (c *EventParticipantClient) Intercept(interceptors ...Interceptor) {
	c.inters.EventParticipant = append(c.inters.EventParticipant, interceptors...)
}

// Create returns a builder for creating a EventParticipant entity.
func (c *EventParticipantClient) Create() *EventParticipantCreate {
	mutation := newEventParticipantMutation(c.config, OpCreate)
	return &EventParticipantCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of EventParticipant entities.
func (c *EventParticipantClient) CreateBulk(builders ...*EventParticipantCreate) *EventParticipantCreateBulk {
	return &EventParticipantCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *EventParticipantClient) MapCreateBulk(slice any, setFunc func(*EventParticipantCreate, int)) *EventParticipantCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &EventParticipantCreateBulk{err: fmt.Errorf("calling to EventParticipantClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*EventParticipantCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &EventParticipantCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for EventParticipant.
func (c *EventParticipantClient) Update() *EventParticipantUpdate {
	mutation := newEventParticipantMutation(c.config, OpUpdate)
	return &EventParticipantUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *EventParticipantClient) UpdateOne(ep *EventParticipant) *EventParticipantUpdateOne {
	mutation := newEventParticipantMutation(c.config, OpUpdateOne, withEventParticipant(ep))
	return &EventParticipantUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *EventParticipantClient) UpdateOneID(id uuid.UUID) *EventParticipantUpdateOne {
	mutation := newEventParticipantMutation(c.config, OpUpdateOne, withEventParticipantID(id))
	return &EventParticipantUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for EventParticipant.
func (c *EventParticipantClient) Delete() *EventParticipantDelete {
	mutation := newEventParticipantMutation(c.config, OpDelete)
	return &EventParticipantDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *EventParticipantClient) DeleteOne(ep *EventParticipant) *EventParticipantDeleteOne {
	return c.DeleteOneID(ep.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *EventParticipantClient) DeleteOneID(id uuid.UUID) *EventParticipantDeleteOne {
	builder := c.Delete().Where(eventparticipant.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &EventParticipantDeleteOne{builder}
}

// Query returns a query builder for EventParticipant.
func (c *EventParticipantClient) Query() *EventParticipantQuery {
	return &EventParticipantQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeEventParticipant},
		inters: c.Interceptors(),
	}
}

// Get returns a EventParticipant entity by its id.
func (c *EventParticipantClient) Get(ctx context.Context, id uuid.UUID) (*EventParticipant, error) {
	return c.Query().Where(eventparticipant.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *EventParticipantClient) GetX(ctx context.Context, id uuid.UUID) *EventParticipant {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryEvent queries the event edge of a EventParticipant.
func (c *EventParticipantClient) QueryEvent(ep *EventParticipant) *EventQuery {
	query := (&EventClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ep.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(eventparticipant.Table, eventparticipant.FieldID, id),
			sqlgraph.To(event.Table, event.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, eventparticipant.EventTable, eventparticipant.EventColumn),
		)
		fromV = sqlgraph.Neighbors(ep.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUser queries the user edge of a EventParticipant.
func (c *EventParticipantClient) QueryUser(ep *EventParticipant) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ep.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(eventparticipant.Table, eventparticipant.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, eventparticipant.UserTable, eventparticipant.UserColumn),
		)
		fromV = sqlgraph.Neighbors(ep.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *EventParticipantClient) Hooks() []Hook {
	hooks := c.hooks.EventParticipant
	return append(hooks[:len(hooks):len(hooks)], eventparticipant.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *EventParticipantClient) Interceptors() []Interceptor {
	inters := c.inters.EventParticipant
	return append(inters[:len(inters):len(inters)], eventparticipant.Interceptors[:]...)
}

func (c *EventParticipantClient) mutate(ctx context.Context, m *EventParticipantMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&EventParticipantCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&EventParticipantUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&EventParticipantUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&EventParticipantDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown EventParticipant mutation op: %q", m.Op())
	}
}

// IgnoreMailingClient is a client for the IgnoreMailing schema.
type IgnoreMailingClient struct {
	config
}

// NewIgnoreMailingClient returns a client for the IgnoreMailing from the given config.
func NewIgnoreMailingClient(c config) *IgnoreMailingClient {
	return &IgnoreMailingClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `ignoremailing.Hooks(f(g(h())))`.
func (c *IgnoreMailingClient) Use(hooks ...Hook) {
	c.hooks.IgnoreMailing = append(c.hooks.IgnoreMailing, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `ignoremailing.Intercept(f(g(h())))`.
func (c *IgnoreMailingClient) Intercept(interceptors ...Interceptor) {
	c.inters.IgnoreMailing = append(c.inters.IgnoreMailing, interceptors...)
}

// Create returns a builder for creating a IgnoreMailing entity.
func (c *IgnoreMailingClient) Create() *IgnoreMailingCreate {
	mutation := newIgnoreMailingMutation(c.config, OpCreate)
	return &IgnoreMailingCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of IgnoreMailing entities.
func (c *IgnoreMailingClient) CreateBulk(builders ...*IgnoreMailingCreate) *IgnoreMailingCreateBulk {
	return &IgnoreMailingCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *IgnoreMailingClient) MapCreateBulk(slice any, setFunc func(*IgnoreMailingCreate, int)) *IgnoreMailingCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &IgnoreMailingCreateBulk{err: fmt.Errorf("calling to IgnoreMailingClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*IgnoreMailingCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &IgnoreMailingCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for IgnoreMailing.
func (c *IgnoreMailingClient) Update() *IgnoreMailingUpdate {
	mutation := newIgnoreMailingMutation(c.config, OpUpdate)
	return &IgnoreMailingUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *IgnoreMailingClient) UpdateOne(im *IgnoreMailing) *IgnoreMailingUpdateOne {
	mutation := newIgnoreMailingMutation(c.config, OpUpdateOne, withIgnoreMailing(im))
	return &IgnoreMailingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *IgnoreMailingClient) UpdateOneID(id uuid.UUID) *IgnoreMailingUpdateOne {
	mutation := newIgnoreMailingMutation(c.config, OpUpdateOne, withIgnoreMailingID(id))
	return &IgnoreMailingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for IgnoreMailing.
func (c *IgnoreMailingClient) Delete() *IgnoreMailingDelete {
	mutation := newIgnoreMailingMutation(c.config, OpDelete)
	return &IgnoreMailingDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *IgnoreMailingClient) DeleteOne(im *IgnoreMailing) *IgnoreMailingDeleteOne {
	return c.DeleteOneID(im.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *IgnoreMailingClient) DeleteOneID(id uuid.UUID) *IgnoreMailingDeleteOne {
	builder := c.Delete().Where(ignoremailing.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &IgnoreMailingDeleteOne{builder}
}

// Query returns a query builder for IgnoreMailing.
func (c *IgnoreMailingClient) Query() *IgnoreMailingQuery {
	return &IgnoreMailingQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeIgnoreMailing},
		inters: c.Interceptors(),
	}
}

// Get returns a IgnoreMailing entity by its id.
func (c *IgnoreMailingClient) Get(ctx context.Context, id uuid.UUID) (*IgnoreMailing, error) {
	return c.Query().Where(ignoremailing.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *IgnoreMailingClient) GetX(ctx context.Context, id uuid.UUID) *IgnoreMailing {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a IgnoreMailing.
func (c *IgnoreMailingClient) QueryUser(im *IgnoreMailing) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := im.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(ignoremailing.Table, ignoremailing.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ignoremailing.UserTable, ignoremailing.UserColumn),
		)
		fromV = sqlgraph.Neighbors(im.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryClub queries the club edge of a IgnoreMailing.
func (c *IgnoreMailingClient) QueryClub(im *IgnoreMailing) *ClubQuery {
	query := (&ClubClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := im.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(ignoremailing.Table, ignoremailing.FieldID, id),
			sqlgraph.To(club.Table, club.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ignoremailing.ClubTable, ignoremailing.ClubColumn),
		)
		fromV = sqlgraph.Neighbors(im.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *IgnoreMailingClient) Hooks() []Hook {
	hooks := c.hooks.IgnoreMailing
	return append(hooks[:len(hooks):len(hooks)], ignoremailing.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *IgnoreMailingClient) Interceptors() []Interceptor {
	inters := c.inters.IgnoreMailing
	return append(inters[:len(inters):len(inters)], ignoremailing.Interceptors[:]...)
}

func (c *IgnoreMailingClient) mutate(ctx context.Context, m *IgnoreMailingMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&IgnoreMailingCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&IgnoreMailingUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&IgnoreMailingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&IgnoreMailingDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown IgnoreMailing mutation op: %q", m.Op())
	}
}

// NotificationClient is a client for the Notification schema.
type NotificationClient struct {
	config
}

// NewNotificationClient returns a client for the Notification from the given config.
func NewNotificationClient(c config) *NotificationClient {
	return &NotificationClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `notification.Hooks(f(g(h())))`.
func (c *NotificationClient) Use(hooks ...Hook) {
	c.hooks.Notification = append(c.hooks.Notification, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `notification.Intercept(f(g(h())))`.
func (c *NotificationClient) Intercept(interceptors ...Interceptor) {
	c.inters.Notification = append(c.inters.Notification, interceptors...)
}

// Create returns a builder for creating a Notification entity.
func (c *NotificationClient) Create() *NotificationCreate {
	mutation := newNotificationMutation(c.config, OpCreate)
	return &NotificationCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Notification entities.
func (c *NotificationClient) CreateBulk(builders ...*NotificationCreate) *NotificationCreateBulk {
	return &NotificationCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *NotificationClient) MapCreateBulk(slice any, setFunc func(*NotificationCreate, int)) *NotificationCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &NotificationCreateBulk{err: fmt.Errorf("calling to NotificationClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*NotificationCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &NotificationCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Notification.
func (c *NotificationClient) Update() *NotificationUpdate {
	mutation := newNotificationMutation(c.config, OpUpdate)
	return &NotificationUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *NotificationClient) UpdateOne(n *Notification) *NotificationUpdateOne {
	mutation := newNotificationMutation(c.config, OpUpdateOne, withNotification(n))
	return &NotificationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *NotificationClient) UpdateOneID(id uuid.UUID) *NotificationUpdateOne {
	mutation := newNotificationMutation(c.config, OpUpdateOne, withNotificationID(id))
	return &NotificationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Notification.
func (c *NotificationClient) Delete() *NotificationDelete {
	mutation := newNotificationMutation(c.config, OpDelete)
	return &NotificationDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *NotificationClient) DeleteOne(n *Notification) *NotificationDeleteOne {
	return c.DeleteOneID(n.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *NotificationClient) DeleteOneID(id uuid.UUID) *NotificationDeleteOne {
	builder := c.Delete().Where(notification.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &NotificationDeleteOne{builder}
}

// Query returns a query builder for Notification.
func (c *NotificationClient) Query() *NotificationQuery {
	return &NotificationQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeNotification},
		inters: c.Interceptors(),
	}
}

// Get returns a Notification entity by its id.
func (c *NotificationClient) Get(ctx context.Context, id uuid.UUID) (*Notification, error) {
	return c.Query().Where(notification.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *NotificationClient) GetX(ctx context.Context, id uuid.UUID) *Notification {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryEvent queries the event edge of a Notification.
func (c *NotificationClient) QueryEvent(n *Notification) *EventQuery {
	query := (&EventClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := n.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(notification.Table, notification.FieldID, id),
			sqlgraph.To(event.Table, event.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, notification.EventTable, notification.EventColumn),
		)
		fromV = sqlgraph.Neighbors(n.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUser queries the user edge of a Notification.
func (c *NotificationClient) QueryUser(n *Notification) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := n.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(notification.Table, notification.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, notification.UserTable, notification.UserColumn),
		)
		fromV = sqlgraph.Neighbors(n.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *NotificationClient) Hooks() []Hook {
	hooks := c.hooks.Notification
	return append(hooks[:len(hooks):len(hooks)], notification.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *NotificationClient) Interceptors() []Interceptor {
	inters := c.inters.Notification
	return append(inters[:len(inters):len(inters)], notification.Interceptors[:]...)
}

func (c *NotificationClient) mutate(ctx context.Context, m *NotificationMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&NotificationCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&NotificationUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&NotificationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&NotificationDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Notification mutation op: %q", m.Op())
	}
}

// PassClient is a client for the Pass schema.
type PassClient struct {
	config
}

// NewPassClient returns a client for the Pass from the given config.
func NewPassClient(c config) *PassClient {
	return &PassClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `pass.Hooks(f(g(h())))`.
func (c *PassClient) Use(hooks ...Hook) {
	c.hooks.Pass = append(c.hooks.Pass, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `pass.Intercept(f(g(h())))`.
func (c *PassClient) Intercept(interceptors ...Interceptor) {
	c.inters.Pass = append(c.inters.Pass, interceptors...)
}

// Create returns a builder for creating a Pass entity.
func (c *PassClient) Create() *PassCreate {
	mutation := newPassMutation(c.config, OpCreate)
	return &PassCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Pass entities.
func (c *PassClient) CreateBulk(builders ...*PassCreate) *PassCreateBulk {
	return &PassCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *PassClient) MapCreateBulk(slice any, setFunc func(*PassCreate, int)) *PassCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &PassCreateBulk{err: fmt.Errorf("calling to PassClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*PassCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &PassCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Pass.
func (c *PassClient) Update() *PassUpdate {
	mutation := newPassMutation(c.config, OpUpdate)
	return &PassUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PassClient) UpdateOne(pa *Pass) *PassUpdateOne {
	mutation := newPassMutation(c.config, OpUpdateOne, withPass(pa))
	return &PassUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PassClient) UpdateOneID(id uuid.UUID) *PassUpdateOne {
	mutation := newPassMutation(c.config, OpUpdateOne, withPassID(id))
	return &PassUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Pass.
func (c *PassClient) Delete() *PassDelete {
	mutation := newPassMutation(c.config, OpDelete)
	return &PassDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PassClient) DeleteOne(pa *Pass) *PassDeleteOne {
	return c.DeleteOneID(pa.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PassClient) DeleteOneID(id uuid.UUID) *PassDeleteOne {
	builder := c.Delete().Where(pass.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PassDeleteOne{builder}
}

// Query returns a query builder for Pass.
func (c *PassClient) Query() *PassQuery {
	return &PassQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePass},
		inters: c.Interceptors(),
	}
}

// Get returns a Pass entity by its id.
func (c *PassClient) Get(ctx context.Context, id uuid.UUID) (*Pass, error) {
	return c.Query().Where(pass.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PassClient) GetX(ctx context.Context, id uuid.UUID) *Pass {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryEvent queries the event edge of a Pass.
func (c *PassClient) QueryEvent(pa *Pass) *EventQuery {
	query := (&EventClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(pass.Table, pass.FieldID, id),
			sqlgraph.To(event.Table, event.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, pass.EventTable, pass.EventColumn),
		)
		fromV = sqlgraph.Neighbors(pa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUser queries the user edge of a Pass.
func (c *PassClient) QueryUser(pa *Pass) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(pass.Table, pass.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, pass.UserTable, pass.UserColumn),
		)
		fromV = sqlgraph.Neighbors(pa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PassClient) Hooks() []Hook {
	return c.hooks.Pass
}

// Interceptors returns the client interceptors.
func (c *PassClient) Interceptors() []Interceptor {
	return c.inters.Pass
}

func (c *PassClient) mutate(ctx context.Context, m *PassMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PassCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PassUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PassUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PassDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Pass mutation op: %q", m.Op())
	}
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `user.Intercept(f(g(h())))`.
func (c *UserClient) Intercept(interceptors ...Interceptor) {
	c.inters.User = append(c.inters.User, interceptors...)
}

// Create returns a builder for creating a User entity.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UserClient) MapCreateBulk(slice any, setFunc func(*UserCreate, int)) *UserCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UserCreateBulk{err: fmt.Errorf("calling to UserClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UserCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id uuid.UUID) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserClient) DeleteOneID(id uuid.UUID) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUser},
		inters: c.Interceptors(),
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id uuid.UUID) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id uuid.UUID) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryOwnedClubs queries the owned_clubs edge of a User.
func (c *UserClient) QueryOwnedClubs(u *User) *ClubQuery {
	query := (&ClubClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(club.Table, club.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, user.OwnedClubsTable, user.OwnedClubsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEvents queries the events edge of a User.
func (c *UserClient) QueryEvents(u *User) *EventQuery {
	query := (&EventClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(event.Table, event.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, user.EventsTable, user.EventsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryIgnoreMailings queries the ignore_mailings edge of a User.
func (c *UserClient) QueryIgnoreMailings(u *User) *IgnoreMailingQuery {
	query := (&IgnoreMailingClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(ignoremailing.Table, ignoremailing.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.IgnoreMailingsTable, user.IgnoreMailingsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryNotifications queries the notifications edge of a User.
func (c *UserClient) QueryNotifications(u *User) *NotificationQuery {
	query := (&NotificationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(notification.Table, notification.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, user.NotificationsTable, user.NotificationsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPasses queries the passes edge of a User.
func (c *UserClient) QueryPasses(u *User) *PassQuery {
	query := (&PassClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(pass.Table, pass.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, user.PassesTable, user.PassesColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryClubOwners queries the club_owners edge of a User.
func (c *UserClient) QueryClubOwners(u *User) *ClubOwnerQuery {
	query := (&ClubOwnerClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(clubowner.Table, clubowner.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, user.ClubOwnersTable, user.ClubOwnersColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEventParticipants queries the event_participants edge of a User.
func (c *UserClient) QueryEventParticipants(u *User) *EventParticipantQuery {
	query := (&EventParticipantClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(eventparticipant.Table, eventparticipant.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, user.EventParticipantsTable, user.EventParticipantsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}

// Interceptors returns the client interceptors.
func (c *UserClient) Interceptors() []Interceptor {
	return c.inters.User
}

func (c *UserClient) mutate(ctx context.Context, m *UserMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown User mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		Club, ClubOwner, Event, EventParticipant, IgnoreMailing, Notification, Pass,
		User []ent.Hook
	}
	inters struct {
		Club, ClubOwner, Event, EventParticipant, IgnoreMailing, Notification, Pass,
		User []ent.Interceptor
	}
)
