// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"

	"github.com/Badsnus/cu-clubs-bot/bot/internal/adapters/secondary/postgres/ent/club"
	"github.com/Badsnus/cu-clubs-bot/bot/internal/adapters/secondary/postgres/ent/ignoremailing"
	"github.com/Badsnus/cu-clubs-bot/bot/internal/adapters/secondary/postgres/ent/predicate"
	"github.com/Badsnus/cu-clubs-bot/bot/internal/adapters/secondary/postgres/ent/user"
)

// IgnoreMailingUpdate is the builder for updating IgnoreMailing entities.
type IgnoreMailingUpdate struct {
	config
	hooks    []Hook
	mutation *IgnoreMailingMutation
}

// Where appends a list predicates to the IgnoreMailingUpdate builder.
func (imu *IgnoreMailingUpdate) Where(ps ...predicate.IgnoreMailing) *IgnoreMailingUpdate {
	imu.mutation.Where(ps...)
	return imu
}

// SetDeletedAt sets the "deleted_at" field.
func (imu *IgnoreMailingUpdate) SetDeletedAt(t time.Time) *IgnoreMailingUpdate {
	imu.mutation.SetDeletedAt(t)
	return imu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (imu *IgnoreMailingUpdate) SetNillableDeletedAt(t *time.Time) *IgnoreMailingUpdate {
	if t != nil {
		imu.SetDeletedAt(*t)
	}
	return imu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (imu *IgnoreMailingUpdate) ClearDeletedAt() *IgnoreMailingUpdate {
	imu.mutation.ClearDeletedAt()
	return imu
}

// SetUpdatedAt sets the "updated_at" field.
func (imu *IgnoreMailingUpdate) SetUpdatedAt(t time.Time) *IgnoreMailingUpdate {
	imu.mutation.SetUpdatedAt(t)
	return imu
}

// SetUserID sets the "user_id" field.
func (imu *IgnoreMailingUpdate) SetUserID(u uuid.UUID) *IgnoreMailingUpdate {
	imu.mutation.SetUserID(u)
	return imu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (imu *IgnoreMailingUpdate) SetNillableUserID(u *uuid.UUID) *IgnoreMailingUpdate {
	if u != nil {
		imu.SetUserID(*u)
	}
	return imu
}

// SetClubID sets the "club_id" field.
func (imu *IgnoreMailingUpdate) SetClubID(u uuid.UUID) *IgnoreMailingUpdate {
	imu.mutation.SetClubID(u)
	return imu
}

// SetNillableClubID sets the "club_id" field if the given value is not nil.
func (imu *IgnoreMailingUpdate) SetNillableClubID(u *uuid.UUID) *IgnoreMailingUpdate {
	if u != nil {
		imu.SetClubID(*u)
	}
	return imu
}

// SetUser sets the "user" edge to the User entity.
func (imu *IgnoreMailingUpdate) SetUser(u *User) *IgnoreMailingUpdate {
	return imu.SetUserID(u.ID)
}

// SetClub sets the "club" edge to the Club entity.
func (imu *IgnoreMailingUpdate) SetClub(c *Club) *IgnoreMailingUpdate {
	return imu.SetClubID(c.ID)
}

// Mutation returns the IgnoreMailingMutation object of the builder.
func (imu *IgnoreMailingUpdate) Mutation() *IgnoreMailingMutation {
	return imu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (imu *IgnoreMailingUpdate) ClearUser() *IgnoreMailingUpdate {
	imu.mutation.ClearUser()
	return imu
}

// ClearClub clears the "club" edge to the Club entity.
func (imu *IgnoreMailingUpdate) ClearClub() *IgnoreMailingUpdate {
	imu.mutation.ClearClub()
	return imu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (imu *IgnoreMailingUpdate) Save(ctx context.Context) (int, error) {
	if err := imu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, imu.sqlSave, imu.mutation, imu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (imu *IgnoreMailingUpdate) SaveX(ctx context.Context) int {
	affected, err := imu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (imu *IgnoreMailingUpdate) Exec(ctx context.Context) error {
	_, err := imu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (imu *IgnoreMailingUpdate) ExecX(ctx context.Context) {
	if err := imu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (imu *IgnoreMailingUpdate) defaults() error {
	if _, ok := imu.mutation.UpdatedAt(); !ok {
		if ignoremailing.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized ignoremailing.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := ignoremailing.UpdateDefaultUpdatedAt()
		imu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (imu *IgnoreMailingUpdate) check() error {
	if imu.mutation.UserCleared() && len(imu.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "IgnoreMailing.user"`)
	}
	if imu.mutation.ClubCleared() && len(imu.mutation.ClubIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "IgnoreMailing.club"`)
	}
	return nil
}

func (imu *IgnoreMailingUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := imu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(ignoremailing.Table, ignoremailing.Columns, sqlgraph.NewFieldSpec(ignoremailing.FieldID, field.TypeUUID))
	if ps := imu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := imu.mutation.DeletedAt(); ok {
		_spec.SetField(ignoremailing.FieldDeletedAt, field.TypeTime, value)
	}
	if imu.mutation.DeletedAtCleared() {
		_spec.ClearField(ignoremailing.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := imu.mutation.UpdatedAt(); ok {
		_spec.SetField(ignoremailing.FieldUpdatedAt, field.TypeTime, value)
	}
	if imu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ignoremailing.UserTable,
			Columns: []string{ignoremailing.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := imu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ignoremailing.UserTable,
			Columns: []string{ignoremailing.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if imu.mutation.ClubCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ignoremailing.ClubTable,
			Columns: []string{ignoremailing.ClubColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(club.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := imu.mutation.ClubIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ignoremailing.ClubTable,
			Columns: []string{ignoremailing.ClubColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(club.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, imu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{ignoremailing.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	imu.mutation.done = true
	return n, nil
}

// IgnoreMailingUpdateOne is the builder for updating a single IgnoreMailing entity.
type IgnoreMailingUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *IgnoreMailingMutation
}

// SetDeletedAt sets the "deleted_at" field.
func (imuo *IgnoreMailingUpdateOne) SetDeletedAt(t time.Time) *IgnoreMailingUpdateOne {
	imuo.mutation.SetDeletedAt(t)
	return imuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (imuo *IgnoreMailingUpdateOne) SetNillableDeletedAt(t *time.Time) *IgnoreMailingUpdateOne {
	if t != nil {
		imuo.SetDeletedAt(*t)
	}
	return imuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (imuo *IgnoreMailingUpdateOne) ClearDeletedAt() *IgnoreMailingUpdateOne {
	imuo.mutation.ClearDeletedAt()
	return imuo
}

// SetUpdatedAt sets the "updated_at" field.
func (imuo *IgnoreMailingUpdateOne) SetUpdatedAt(t time.Time) *IgnoreMailingUpdateOne {
	imuo.mutation.SetUpdatedAt(t)
	return imuo
}

// SetUserID sets the "user_id" field.
func (imuo *IgnoreMailingUpdateOne) SetUserID(u uuid.UUID) *IgnoreMailingUpdateOne {
	imuo.mutation.SetUserID(u)
	return imuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (imuo *IgnoreMailingUpdateOne) SetNillableUserID(u *uuid.UUID) *IgnoreMailingUpdateOne {
	if u != nil {
		imuo.SetUserID(*u)
	}
	return imuo
}

// SetClubID sets the "club_id" field.
func (imuo *IgnoreMailingUpdateOne) SetClubID(u uuid.UUID) *IgnoreMailingUpdateOne {
	imuo.mutation.SetClubID(u)
	return imuo
}

// SetNillableClubID sets the "club_id" field if the given value is not nil.
func (imuo *IgnoreMailingUpdateOne) SetNillableClubID(u *uuid.UUID) *IgnoreMailingUpdateOne {
	if u != nil {
		imuo.SetClubID(*u)
	}
	return imuo
}

// SetUser sets the "user" edge to the User entity.
func (imuo *IgnoreMailingUpdateOne) SetUser(u *User) *IgnoreMailingUpdateOne {
	return imuo.SetUserID(u.ID)
}

// SetClub sets the "club" edge to the Club entity.
func (imuo *IgnoreMailingUpdateOne) SetClub(c *Club) *IgnoreMailingUpdateOne {
	return imuo.SetClubID(c.ID)
}

// Mutation returns the IgnoreMailingMutation object of the builder.
func (imuo *IgnoreMailingUpdateOne) Mutation() *IgnoreMailingMutation {
	return imuo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (imuo *IgnoreMailingUpdateOne) ClearUser() *IgnoreMailingUpdateOne {
	imuo.mutation.ClearUser()
	return imuo
}

// ClearClub clears the "club" edge to the Club entity.
func (imuo *IgnoreMailingUpdateOne) ClearClub() *IgnoreMailingUpdateOne {
	imuo.mutation.ClearClub()
	return imuo
}

// Where appends a list predicates to the IgnoreMailingUpdate builder.
func (imuo *IgnoreMailingUpdateOne) Where(ps ...predicate.IgnoreMailing) *IgnoreMailingUpdateOne {
	imuo.mutation.Where(ps...)
	return imuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (imuo *IgnoreMailingUpdateOne) Select(field string, fields ...string) *IgnoreMailingUpdateOne {
	imuo.fields = append([]string{field}, fields...)
	return imuo
}

// Save executes the query and returns the updated IgnoreMailing entity.
func (imuo *IgnoreMailingUpdateOne) Save(ctx context.Context) (*IgnoreMailing, error) {
	if err := imuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, imuo.sqlSave, imuo.mutation, imuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (imuo *IgnoreMailingUpdateOne) SaveX(ctx context.Context) *IgnoreMailing {
	node, err := imuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (imuo *IgnoreMailingUpdateOne) Exec(ctx context.Context) error {
	_, err := imuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (imuo *IgnoreMailingUpdateOne) ExecX(ctx context.Context) {
	if err := imuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (imuo *IgnoreMailingUpdateOne) defaults() error {
	if _, ok := imuo.mutation.UpdatedAt(); !ok {
		if ignoremailing.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized ignoremailing.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := ignoremailing.UpdateDefaultUpdatedAt()
		imuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (imuo *IgnoreMailingUpdateOne) check() error {
	if imuo.mutation.UserCleared() && len(imuo.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "IgnoreMailing.user"`)
	}
	if imuo.mutation.ClubCleared() && len(imuo.mutation.ClubIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "IgnoreMailing.club"`)
	}
	return nil
}

func (imuo *IgnoreMailingUpdateOne) sqlSave(ctx context.Context) (_node *IgnoreMailing, err error) {
	if err := imuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(ignoremailing.Table, ignoremailing.Columns, sqlgraph.NewFieldSpec(ignoremailing.FieldID, field.TypeUUID))
	id, ok := imuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "IgnoreMailing.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := imuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, ignoremailing.FieldID)
		for _, f := range fields {
			if !ignoremailing.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != ignoremailing.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := imuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := imuo.mutation.DeletedAt(); ok {
		_spec.SetField(ignoremailing.FieldDeletedAt, field.TypeTime, value)
	}
	if imuo.mutation.DeletedAtCleared() {
		_spec.ClearField(ignoremailing.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := imuo.mutation.UpdatedAt(); ok {
		_spec.SetField(ignoremailing.FieldUpdatedAt, field.TypeTime, value)
	}
	if imuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ignoremailing.UserTable,
			Columns: []string{ignoremailing.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := imuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ignoremailing.UserTable,
			Columns: []string{ignoremailing.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if imuo.mutation.ClubCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ignoremailing.ClubTable,
			Columns: []string{ignoremailing.ClubColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(club.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := imuo.mutation.ClubIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ignoremailing.ClubTable,
			Columns: []string{ignoremailing.ClubColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(club.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &IgnoreMailing{config: imuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, imuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{ignoremailing.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	imuo.mutation.done = true
	return _node, nil
}
