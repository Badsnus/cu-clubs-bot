// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"

	"github.com/Badsnus/cu-clubs-bot/bot/internal/adapters/secondary/postgres/ent/club"
	"github.com/Badsnus/cu-clubs-bot/bot/internal/adapters/secondary/postgres/ent/event"
	"github.com/Badsnus/cu-clubs-bot/bot/internal/adapters/secondary/postgres/ent/eventparticipant"
	"github.com/Badsnus/cu-clubs-bot/bot/internal/adapters/secondary/postgres/ent/notification"
	"github.com/Badsnus/cu-clubs-bot/bot/internal/adapters/secondary/postgres/ent/pass"
	"github.com/Badsnus/cu-clubs-bot/bot/internal/adapters/secondary/postgres/ent/user"
	"github.com/Badsnus/cu-clubs-bot/bot/internal/domain/valueobject"
)

// EventCreate is the builder for creating a Event entity.
type EventCreate struct {
	config
	mutation *EventMutation
	hooks    []Hook
}

// SetDeletedAt sets the "deleted_at" field.
func (ec *EventCreate) SetDeletedAt(t time.Time) *EventCreate {
	ec.mutation.SetDeletedAt(t)
	return ec
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ec *EventCreate) SetNillableDeletedAt(t *time.Time) *EventCreate {
	if t != nil {
		ec.SetDeletedAt(*t)
	}
	return ec
}

// SetCreatedAt sets the "created_at" field.
func (ec *EventCreate) SetCreatedAt(t time.Time) *EventCreate {
	ec.mutation.SetCreatedAt(t)
	return ec
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ec *EventCreate) SetNillableCreatedAt(t *time.Time) *EventCreate {
	if t != nil {
		ec.SetCreatedAt(*t)
	}
	return ec
}

// SetUpdatedAt sets the "updated_at" field.
func (ec *EventCreate) SetUpdatedAt(t time.Time) *EventCreate {
	ec.mutation.SetUpdatedAt(t)
	return ec
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ec *EventCreate) SetNillableUpdatedAt(t *time.Time) *EventCreate {
	if t != nil {
		ec.SetUpdatedAt(*t)
	}
	return ec
}

// SetClubID sets the "club_id" field.
func (ec *EventCreate) SetClubID(u uuid.UUID) *EventCreate {
	ec.mutation.SetClubID(u)
	return ec
}

// SetName sets the "name" field.
func (ec *EventCreate) SetName(s string) *EventCreate {
	ec.mutation.SetName(s)
	return ec
}

// SetDescription sets the "description" field.
func (ec *EventCreate) SetDescription(s string) *EventCreate {
	ec.mutation.SetDescription(s)
	return ec
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ec *EventCreate) SetNillableDescription(s *string) *EventCreate {
	if s != nil {
		ec.SetDescription(*s)
	}
	return ec
}

// SetAfterRegistrationText sets the "after_registration_text" field.
func (ec *EventCreate) SetAfterRegistrationText(s string) *EventCreate {
	ec.mutation.SetAfterRegistrationText(s)
	return ec
}

// SetNillableAfterRegistrationText sets the "after_registration_text" field if the given value is not nil.
func (ec *EventCreate) SetNillableAfterRegistrationText(s *string) *EventCreate {
	if s != nil {
		ec.SetAfterRegistrationText(*s)
	}
	return ec
}

// SetLocation sets the "location" field.
func (ec *EventCreate) SetLocation(s string) *EventCreate {
	ec.mutation.SetLocation(s)
	return ec
}

// SetStartTime sets the "start_time" field.
func (ec *EventCreate) SetStartTime(t time.Time) *EventCreate {
	ec.mutation.SetStartTime(t)
	return ec
}

// SetEndTime sets the "end_time" field.
func (ec *EventCreate) SetEndTime(t time.Time) *EventCreate {
	ec.mutation.SetEndTime(t)
	return ec
}

// SetNillableEndTime sets the "end_time" field if the given value is not nil.
func (ec *EventCreate) SetNillableEndTime(t *time.Time) *EventCreate {
	if t != nil {
		ec.SetEndTime(*t)
	}
	return ec
}

// SetRegistrationEndTime sets the "registration_end_time" field.
func (ec *EventCreate) SetRegistrationEndTime(t time.Time) *EventCreate {
	ec.mutation.SetRegistrationEndTime(t)
	return ec
}

// SetMaxParticipants sets the "max_participants" field.
func (ec *EventCreate) SetMaxParticipants(i int) *EventCreate {
	ec.mutation.SetMaxParticipants(i)
	return ec
}

// SetNillableMaxParticipants sets the "max_participants" field if the given value is not nil.
func (ec *EventCreate) SetNillableMaxParticipants(i *int) *EventCreate {
	if i != nil {
		ec.SetMaxParticipants(*i)
	}
	return ec
}

// SetExpectedParticipants sets the "expected_participants" field.
func (ec *EventCreate) SetExpectedParticipants(i int) *EventCreate {
	ec.mutation.SetExpectedParticipants(i)
	return ec
}

// SetNillableExpectedParticipants sets the "expected_participants" field if the given value is not nil.
func (ec *EventCreate) SetNillableExpectedParticipants(i *int) *EventCreate {
	if i != nil {
		ec.SetExpectedParticipants(*i)
	}
	return ec
}

// SetQrPayload sets the "qr_payload" field.
func (ec *EventCreate) SetQrPayload(u uuid.UUID) *EventCreate {
	ec.mutation.SetQrPayload(u)
	return ec
}

// SetNillableQrPayload sets the "qr_payload" field if the given value is not nil.
func (ec *EventCreate) SetNillableQrPayload(u *uuid.UUID) *EventCreate {
	if u != nil {
		ec.SetQrPayload(*u)
	}
	return ec
}

// SetQrFileID sets the "qr_file_id" field.
func (ec *EventCreate) SetQrFileID(s string) *EventCreate {
	ec.mutation.SetQrFileID(s)
	return ec
}

// SetNillableQrFileID sets the "qr_file_id" field if the given value is not nil.
func (ec *EventCreate) SetNillableQrFileID(s *string) *EventCreate {
	if s != nil {
		ec.SetQrFileID(*s)
	}
	return ec
}

// SetAllowedRoles sets the "allowed_roles" field.
func (ec *EventCreate) SetAllowedRoles(v valueobject.Roles) *EventCreate {
	ec.mutation.SetAllowedRoles(v)
	return ec
}

// SetPassRequired sets the "pass_required" field.
func (ec *EventCreate) SetPassRequired(b bool) *EventCreate {
	ec.mutation.SetPassRequired(b)
	return ec
}

// SetNillablePassRequired sets the "pass_required" field if the given value is not nil.
func (ec *EventCreate) SetNillablePassRequired(b *bool) *EventCreate {
	if b != nil {
		ec.SetPassRequired(*b)
	}
	return ec
}

// SetID sets the "id" field.
func (ec *EventCreate) SetID(u uuid.UUID) *EventCreate {
	ec.mutation.SetID(u)
	return ec
}

// SetNillableID sets the "id" field if the given value is not nil.
func (ec *EventCreate) SetNillableID(u *uuid.UUID) *EventCreate {
	if u != nil {
		ec.SetID(*u)
	}
	return ec
}

// SetClub sets the "club" edge to the Club entity.
func (ec *EventCreate) SetClub(c *Club) *EventCreate {
	return ec.SetClubID(c.ID)
}

// AddParticipantIDs adds the "participants" edge to the User entity by IDs.
func (ec *EventCreate) AddParticipantIDs(ids ...uuid.UUID) *EventCreate {
	ec.mutation.AddParticipantIDs(ids...)
	return ec
}

// AddParticipants adds the "participants" edges to the User entity.
func (ec *EventCreate) AddParticipants(u ...*User) *EventCreate {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return ec.AddParticipantIDs(ids...)
}

// AddNotificationIDs adds the "notifications" edge to the Notification entity by IDs.
func (ec *EventCreate) AddNotificationIDs(ids ...uuid.UUID) *EventCreate {
	ec.mutation.AddNotificationIDs(ids...)
	return ec
}

// AddNotifications adds the "notifications" edges to the Notification entity.
func (ec *EventCreate) AddNotifications(n ...*Notification) *EventCreate {
	ids := make([]uuid.UUID, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return ec.AddNotificationIDs(ids...)
}

// AddPassIDs adds the "passes" edge to the Pass entity by IDs.
func (ec *EventCreate) AddPassIDs(ids ...uuid.UUID) *EventCreate {
	ec.mutation.AddPassIDs(ids...)
	return ec
}

// AddPasses adds the "passes" edges to the Pass entity.
func (ec *EventCreate) AddPasses(p ...*Pass) *EventCreate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ec.AddPassIDs(ids...)
}

// AddEventParticipantIDs adds the "event_participants" edge to the EventParticipant entity by IDs.
func (ec *EventCreate) AddEventParticipantIDs(ids ...uuid.UUID) *EventCreate {
	ec.mutation.AddEventParticipantIDs(ids...)
	return ec
}

// AddEventParticipants adds the "event_participants" edges to the EventParticipant entity.
func (ec *EventCreate) AddEventParticipants(e ...*EventParticipant) *EventCreate {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return ec.AddEventParticipantIDs(ids...)
}

// Mutation returns the EventMutation object of the builder.
func (ec *EventCreate) Mutation() *EventMutation {
	return ec.mutation
}

// Save creates the Event in the database.
func (ec *EventCreate) Save(ctx context.Context) (*Event, error) {
	if err := ec.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, ec.sqlSave, ec.mutation, ec.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ec *EventCreate) SaveX(ctx context.Context) *Event {
	v, err := ec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ec *EventCreate) Exec(ctx context.Context) error {
	_, err := ec.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ec *EventCreate) ExecX(ctx context.Context) {
	if err := ec.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ec *EventCreate) defaults() error {
	if _, ok := ec.mutation.CreatedAt(); !ok {
		v := event.DefaultCreatedAt
		ec.mutation.SetCreatedAt(v)
	}
	if _, ok := ec.mutation.UpdatedAt(); !ok {
		v := event.DefaultUpdatedAt
		ec.mutation.SetUpdatedAt(v)
	}
	if _, ok := ec.mutation.PassRequired(); !ok {
		v := event.DefaultPassRequired
		ec.mutation.SetPassRequired(v)
	}
	if _, ok := ec.mutation.ID(); !ok {
		if event.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized event.DefaultID (forgotten import ent/runtime?)")
		}
		v := event.DefaultID()
		ec.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (ec *EventCreate) check() error {
	if _, ok := ec.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Event.created_at"`)}
	}
	if _, ok := ec.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Event.updated_at"`)}
	}
	if _, ok := ec.mutation.ClubID(); !ok {
		return &ValidationError{Name: "club_id", err: errors.New(`ent: missing required field "Event.club_id"`)}
	}
	if _, ok := ec.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Event.name"`)}
	}
	if _, ok := ec.mutation.Location(); !ok {
		return &ValidationError{Name: "location", err: errors.New(`ent: missing required field "Event.location"`)}
	}
	if _, ok := ec.mutation.StartTime(); !ok {
		return &ValidationError{Name: "start_time", err: errors.New(`ent: missing required field "Event.start_time"`)}
	}
	if _, ok := ec.mutation.RegistrationEndTime(); !ok {
		return &ValidationError{Name: "registration_end_time", err: errors.New(`ent: missing required field "Event.registration_end_time"`)}
	}
	if v, ok := ec.mutation.MaxParticipants(); ok {
		if err := event.MaxParticipantsValidator(v); err != nil {
			return &ValidationError{Name: "max_participants", err: fmt.Errorf(`ent: validator failed for field "Event.max_participants": %w`, err)}
		}
	}
	if v, ok := ec.mutation.ExpectedParticipants(); ok {
		if err := event.ExpectedParticipantsValidator(v); err != nil {
			return &ValidationError{Name: "expected_participants", err: fmt.Errorf(`ent: validator failed for field "Event.expected_participants": %w`, err)}
		}
	}
	if _, ok := ec.mutation.PassRequired(); !ok {
		return &ValidationError{Name: "pass_required", err: errors.New(`ent: missing required field "Event.pass_required"`)}
	}
	if len(ec.mutation.ClubIDs()) == 0 {
		return &ValidationError{Name: "club", err: errors.New(`ent: missing required edge "Event.club"`)}
	}
	return nil
}

func (ec *EventCreate) sqlSave(ctx context.Context) (*Event, error) {
	if err := ec.check(); err != nil {
		return nil, err
	}
	_node, _spec := ec.createSpec()
	if err := sqlgraph.CreateNode(ctx, ec.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	ec.mutation.id = &_node.ID
	ec.mutation.done = true
	return _node, nil
}

func (ec *EventCreate) createSpec() (*Event, *sqlgraph.CreateSpec) {
	var (
		_node = &Event{config: ec.config}
		_spec = sqlgraph.NewCreateSpec(event.Table, sqlgraph.NewFieldSpec(event.FieldID, field.TypeUUID))
	)
	if id, ok := ec.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := ec.mutation.DeletedAt(); ok {
		_spec.SetField(event.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := ec.mutation.CreatedAt(); ok {
		_spec.SetField(event.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := ec.mutation.UpdatedAt(); ok {
		_spec.SetField(event.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := ec.mutation.Name(); ok {
		_spec.SetField(event.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := ec.mutation.Description(); ok {
		_spec.SetField(event.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := ec.mutation.AfterRegistrationText(); ok {
		_spec.SetField(event.FieldAfterRegistrationText, field.TypeString, value)
		_node.AfterRegistrationText = value
	}
	if value, ok := ec.mutation.Location(); ok {
		_spec.SetField(event.FieldLocation, field.TypeString, value)
		_node.Location = value
	}
	if value, ok := ec.mutation.StartTime(); ok {
		_spec.SetField(event.FieldStartTime, field.TypeTime, value)
		_node.StartTime = value
	}
	if value, ok := ec.mutation.EndTime(); ok {
		_spec.SetField(event.FieldEndTime, field.TypeTime, value)
		_node.EndTime = value
	}
	if value, ok := ec.mutation.RegistrationEndTime(); ok {
		_spec.SetField(event.FieldRegistrationEndTime, field.TypeTime, value)
		_node.RegistrationEndTime = value
	}
	if value, ok := ec.mutation.MaxParticipants(); ok {
		_spec.SetField(event.FieldMaxParticipants, field.TypeInt, value)
		_node.MaxParticipants = value
	}
	if value, ok := ec.mutation.ExpectedParticipants(); ok {
		_spec.SetField(event.FieldExpectedParticipants, field.TypeInt, value)
		_node.ExpectedParticipants = value
	}
	if value, ok := ec.mutation.QrPayload(); ok {
		_spec.SetField(event.FieldQrPayload, field.TypeUUID, value)
		_node.QrPayload = value
	}
	if value, ok := ec.mutation.QrFileID(); ok {
		_spec.SetField(event.FieldQrFileID, field.TypeString, value)
		_node.QrFileID = value
	}
	if value, ok := ec.mutation.AllowedRoles(); ok {
		_spec.SetField(event.FieldAllowedRoles, field.TypeJSON, value)
		_node.AllowedRoles = value
	}
	if value, ok := ec.mutation.PassRequired(); ok {
		_spec.SetField(event.FieldPassRequired, field.TypeBool, value)
		_node.PassRequired = value
	}
	if nodes := ec.mutation.ClubIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   event.ClubTable,
			Columns: []string{event.ClubColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(club.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ClubID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ec.mutation.ParticipantsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.ParticipantsTable,
			Columns: event.ParticipantsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &EventParticipantCreate{config: ec.config, mutation: newEventParticipantMutation(ec.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ec.mutation.NotificationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   event.NotificationsTable,
			Columns: []string{event.NotificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ec.mutation.PassesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   event.PassesTable,
			Columns: []string{event.PassesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pass.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ec.mutation.EventParticipantsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   event.EventParticipantsTable,
			Columns: []string{event.EventParticipantsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eventparticipant.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// EventCreateBulk is the builder for creating many Event entities in bulk.
type EventCreateBulk struct {
	config
	err      error
	builders []*EventCreate
}

// Save creates the Event entities in the database.
func (ecb *EventCreateBulk) Save(ctx context.Context) ([]*Event, error) {
	if ecb.err != nil {
		return nil, ecb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ecb.builders))
	nodes := make([]*Event, len(ecb.builders))
	mutators := make([]Mutator, len(ecb.builders))
	for i := range ecb.builders {
		func(i int, root context.Context) {
			builder := ecb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*EventMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ecb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ecb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ecb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ecb *EventCreateBulk) SaveX(ctx context.Context) []*Event {
	v, err := ecb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ecb *EventCreateBulk) Exec(ctx context.Context) error {
	_, err := ecb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ecb *EventCreateBulk) ExecX(ctx context.Context) {
	if err := ecb.Exec(ctx); err != nil {
		panic(err)
	}
}
