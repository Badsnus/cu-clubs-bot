// Code generated by ent, DO NOT EDIT.

package event

import (
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the event type in the database.
	Label = "event"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldClubID holds the string denoting the club_id field in the database.
	FieldClubID = "club_id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldAfterRegistrationText holds the string denoting the after_registration_text field in the database.
	FieldAfterRegistrationText = "after_registration_text"
	// FieldLocation holds the string denoting the location field in the database.
	FieldLocation = "location"
	// FieldStartTime holds the string denoting the start_time field in the database.
	FieldStartTime = "start_time"
	// FieldEndTime holds the string denoting the end_time field in the database.
	FieldEndTime = "end_time"
	// FieldRegistrationEndTime holds the string denoting the registration_end_time field in the database.
	FieldRegistrationEndTime = "registration_end_time"
	// FieldMaxParticipants holds the string denoting the max_participants field in the database.
	FieldMaxParticipants = "max_participants"
	// FieldExpectedParticipants holds the string denoting the expected_participants field in the database.
	FieldExpectedParticipants = "expected_participants"
	// FieldQrPayload holds the string denoting the qr_payload field in the database.
	FieldQrPayload = "qr_payload"
	// FieldQrFileID holds the string denoting the qr_file_id field in the database.
	FieldQrFileID = "qr_file_id"
	// FieldAllowedRoles holds the string denoting the allowed_roles field in the database.
	FieldAllowedRoles = "allowed_roles"
	// FieldPassRequired holds the string denoting the pass_required field in the database.
	FieldPassRequired = "pass_required"
	// EdgeClub holds the string denoting the club edge name in mutations.
	EdgeClub = "club"
	// EdgeParticipants holds the string denoting the participants edge name in mutations.
	EdgeParticipants = "participants"
	// EdgeNotifications holds the string denoting the notifications edge name in mutations.
	EdgeNotifications = "notifications"
	// EdgePasses holds the string denoting the passes edge name in mutations.
	EdgePasses = "passes"
	// EdgeEventParticipants holds the string denoting the event_participants edge name in mutations.
	EdgeEventParticipants = "event_participants"
	// Table holds the table name of the event in the database.
	Table = "events"
	// ClubTable is the table that holds the club relation/edge.
	ClubTable = "events"
	// ClubInverseTable is the table name for the Club entity.
	// It exists in this package in order to avoid circular dependency with the "club" package.
	ClubInverseTable = "clubs"
	// ClubColumn is the table column denoting the club relation/edge.
	ClubColumn = "club_id"
	// ParticipantsTable is the table that holds the participants relation/edge. The primary key declared below.
	ParticipantsTable = "event_participants"
	// ParticipantsInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	ParticipantsInverseTable = "users"
	// NotificationsTable is the table that holds the notifications relation/edge.
	NotificationsTable = "notifications"
	// NotificationsInverseTable is the table name for the Notification entity.
	// It exists in this package in order to avoid circular dependency with the "notification" package.
	NotificationsInverseTable = "notifications"
	// NotificationsColumn is the table column denoting the notifications relation/edge.
	NotificationsColumn = "event_id"
	// PassesTable is the table that holds the passes relation/edge.
	PassesTable = "passes"
	// PassesInverseTable is the table name for the Pass entity.
	// It exists in this package in order to avoid circular dependency with the "pass" package.
	PassesInverseTable = "passes"
	// PassesColumn is the table column denoting the passes relation/edge.
	PassesColumn = "event_id"
	// EventParticipantsTable is the table that holds the event_participants relation/edge.
	EventParticipantsTable = "event_participants"
	// EventParticipantsInverseTable is the table name for the EventParticipant entity.
	// It exists in this package in order to avoid circular dependency with the "eventparticipant" package.
	EventParticipantsInverseTable = "event_participants"
	// EventParticipantsColumn is the table column denoting the event_participants relation/edge.
	EventParticipantsColumn = "event_id"
)

// Columns holds all SQL columns for event fields.
var Columns = []string{
	FieldID,
	FieldDeletedAt,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldClubID,
	FieldName,
	FieldDescription,
	FieldAfterRegistrationText,
	FieldLocation,
	FieldStartTime,
	FieldEndTime,
	FieldRegistrationEndTime,
	FieldMaxParticipants,
	FieldExpectedParticipants,
	FieldQrPayload,
	FieldQrFileID,
	FieldAllowedRoles,
	FieldPassRequired,
}

var (
	// ParticipantsPrimaryKey and ParticipantsColumn2 are the table columns denoting the
	// primary key for the participants relation (M2M).
	ParticipantsPrimaryKey = []string{"user_id", "event_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/Badsnus/cu-clubs-bot/bot/internal/adapters/secondary/postgres/ent/runtime"
var (
	Hooks        [1]ent.Hook
	Interceptors [1]ent.Interceptor
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// MaxParticipantsValidator is a validator for the "max_participants" field. It is called by the builders before save.
	MaxParticipantsValidator func(int) error
	// ExpectedParticipantsValidator is a validator for the "expected_participants" field. It is called by the builders before save.
	ExpectedParticipantsValidator func(int) error
	// DefaultPassRequired holds the default value on creation for the "pass_required" field.
	DefaultPassRequired bool
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the Event queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByClubID orders the results by the club_id field.
func ByClubID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldClubID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByAfterRegistrationText orders the results by the after_registration_text field.
func ByAfterRegistrationText(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAfterRegistrationText, opts...).ToFunc()
}

// ByLocation orders the results by the location field.
func ByLocation(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLocation, opts...).ToFunc()
}

// ByStartTime orders the results by the start_time field.
func ByStartTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStartTime, opts...).ToFunc()
}

// ByEndTime orders the results by the end_time field.
func ByEndTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEndTime, opts...).ToFunc()
}

// ByRegistrationEndTime orders the results by the registration_end_time field.
func ByRegistrationEndTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRegistrationEndTime, opts...).ToFunc()
}

// ByMaxParticipants orders the results by the max_participants field.
func ByMaxParticipants(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMaxParticipants, opts...).ToFunc()
}

// ByExpectedParticipants orders the results by the expected_participants field.
func ByExpectedParticipants(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExpectedParticipants, opts...).ToFunc()
}

// ByQrPayload orders the results by the qr_payload field.
func ByQrPayload(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldQrPayload, opts...).ToFunc()
}

// ByQrFileID orders the results by the qr_file_id field.
func ByQrFileID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldQrFileID, opts...).ToFunc()
}

// ByPassRequired orders the results by the pass_required field.
func ByPassRequired(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPassRequired, opts...).ToFunc()
}

// ByClubField orders the results by club field.
func ByClubField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newClubStep(), sql.OrderByField(field, opts...))
	}
}

// ByParticipantsCount orders the results by participants count.
func ByParticipantsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newParticipantsStep(), opts...)
	}
}

// ByParticipants orders the results by participants terms.
func ByParticipants(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newParticipantsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByNotificationsCount orders the results by notifications count.
func ByNotificationsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newNotificationsStep(), opts...)
	}
}

// ByNotifications orders the results by notifications terms.
func ByNotifications(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newNotificationsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByPassesCount orders the results by passes count.
func ByPassesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newPassesStep(), opts...)
	}
}

// ByPasses orders the results by passes terms.
func ByPasses(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPassesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByEventParticipantsCount orders the results by event_participants count.
func ByEventParticipantsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newEventParticipantsStep(), opts...)
	}
}

// ByEventParticipants orders the results by event_participants terms.
func ByEventParticipants(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEventParticipantsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newClubStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ClubInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ClubTable, ClubColumn),
	)
}
func newParticipantsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ParticipantsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, ParticipantsTable, ParticipantsPrimaryKey...),
	)
}
func newNotificationsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(NotificationsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, NotificationsTable, NotificationsColumn),
	)
}
func newPassesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PassesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, PassesTable, PassesColumn),
	)
}
func newEventParticipantsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EventParticipantsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, EventParticipantsTable, EventParticipantsColumn),
	)
}
