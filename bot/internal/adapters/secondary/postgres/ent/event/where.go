// Code generated by ent, DO NOT EDIT.

package event

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"

	"github.com/Badsnus/cu-clubs-bot/bot/internal/adapters/secondary/postgres/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Event {
	return predicate.Event(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Event {
	return predicate.Event(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Event {
	return predicate.Event(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Event {
	return predicate.Event(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Event {
	return predicate.Event(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Event {
	return predicate.Event(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Event {
	return predicate.Event(sql.FieldLTE(FieldID, id))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldDeletedAt, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldUpdatedAt, v))
}

// ClubID applies equality check predicate on the "club_id" field. It's identical to ClubIDEQ.
func ClubID(v uuid.UUID) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldClubID, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldName, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldDescription, v))
}

// AfterRegistrationText applies equality check predicate on the "after_registration_text" field. It's identical to AfterRegistrationTextEQ.
func AfterRegistrationText(v string) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldAfterRegistrationText, v))
}

// Location applies equality check predicate on the "location" field. It's identical to LocationEQ.
func Location(v string) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldLocation, v))
}

// StartTime applies equality check predicate on the "start_time" field. It's identical to StartTimeEQ.
func StartTime(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldStartTime, v))
}

// EndTime applies equality check predicate on the "end_time" field. It's identical to EndTimeEQ.
func EndTime(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldEndTime, v))
}

// RegistrationEndTime applies equality check predicate on the "registration_end_time" field. It's identical to RegistrationEndTimeEQ.
func RegistrationEndTime(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldRegistrationEndTime, v))
}

// MaxParticipants applies equality check predicate on the "max_participants" field. It's identical to MaxParticipantsEQ.
func MaxParticipants(v int) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldMaxParticipants, v))
}

// ExpectedParticipants applies equality check predicate on the "expected_participants" field. It's identical to ExpectedParticipantsEQ.
func ExpectedParticipants(v int) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldExpectedParticipants, v))
}

// QrPayload applies equality check predicate on the "qr_payload" field. It's identical to QrPayloadEQ.
func QrPayload(v uuid.UUID) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldQrPayload, v))
}

// QrFileID applies equality check predicate on the "qr_file_id" field. It's identical to QrFileIDEQ.
func QrFileID(v string) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldQrFileID, v))
}

// PassRequired applies equality check predicate on the "pass_required" field. It's identical to PassRequiredEQ.
func PassRequired(v bool) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldPassRequired, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.Event {
	return predicate.Event(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.Event {
	return predicate.Event(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.Event {
	return predicate.Event(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.Event {
	return predicate.Event(sql.FieldNotNull(FieldDeletedAt))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Event {
	return predicate.Event(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Event {
	return predicate.Event(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Event {
	return predicate.Event(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Event {
	return predicate.Event(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldLTE(FieldUpdatedAt, v))
}

// ClubIDEQ applies the EQ predicate on the "club_id" field.
func ClubIDEQ(v uuid.UUID) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldClubID, v))
}

// ClubIDNEQ applies the NEQ predicate on the "club_id" field.
func ClubIDNEQ(v uuid.UUID) predicate.Event {
	return predicate.Event(sql.FieldNEQ(FieldClubID, v))
}

// ClubIDIn applies the In predicate on the "club_id" field.
func ClubIDIn(vs ...uuid.UUID) predicate.Event {
	return predicate.Event(sql.FieldIn(FieldClubID, vs...))
}

// ClubIDNotIn applies the NotIn predicate on the "club_id" field.
func ClubIDNotIn(vs ...uuid.UUID) predicate.Event {
	return predicate.Event(sql.FieldNotIn(FieldClubID, vs...))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Event {
	return predicate.Event(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Event {
	return predicate.Event(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Event {
	return predicate.Event(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Event {
	return predicate.Event(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Event {
	return predicate.Event(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Event {
	return predicate.Event(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Event {
	return predicate.Event(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Event {
	return predicate.Event(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Event {
	return predicate.Event(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Event {
	return predicate.Event(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Event {
	return predicate.Event(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Event {
	return predicate.Event(sql.FieldContainsFold(FieldName, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.Event {
	return predicate.Event(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.Event {
	return predicate.Event(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.Event {
	return predicate.Event(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.Event {
	return predicate.Event(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.Event {
	return predicate.Event(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.Event {
	return predicate.Event(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.Event {
	return predicate.Event(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.Event {
	return predicate.Event(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.Event {
	return predicate.Event(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.Event {
	return predicate.Event(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.Event {
	return predicate.Event(sql.FieldIsNull(FieldDescription))
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.Event {
	return predicate.Event(sql.FieldNotNull(FieldDescription))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.Event {
	return predicate.Event(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.Event {
	return predicate.Event(sql.FieldContainsFold(FieldDescription, v))
}

// AfterRegistrationTextEQ applies the EQ predicate on the "after_registration_text" field.
func AfterRegistrationTextEQ(v string) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldAfterRegistrationText, v))
}

// AfterRegistrationTextNEQ applies the NEQ predicate on the "after_registration_text" field.
func AfterRegistrationTextNEQ(v string) predicate.Event {
	return predicate.Event(sql.FieldNEQ(FieldAfterRegistrationText, v))
}

// AfterRegistrationTextIn applies the In predicate on the "after_registration_text" field.
func AfterRegistrationTextIn(vs ...string) predicate.Event {
	return predicate.Event(sql.FieldIn(FieldAfterRegistrationText, vs...))
}

// AfterRegistrationTextNotIn applies the NotIn predicate on the "after_registration_text" field.
func AfterRegistrationTextNotIn(vs ...string) predicate.Event {
	return predicate.Event(sql.FieldNotIn(FieldAfterRegistrationText, vs...))
}

// AfterRegistrationTextGT applies the GT predicate on the "after_registration_text" field.
func AfterRegistrationTextGT(v string) predicate.Event {
	return predicate.Event(sql.FieldGT(FieldAfterRegistrationText, v))
}

// AfterRegistrationTextGTE applies the GTE predicate on the "after_registration_text" field.
func AfterRegistrationTextGTE(v string) predicate.Event {
	return predicate.Event(sql.FieldGTE(FieldAfterRegistrationText, v))
}

// AfterRegistrationTextLT applies the LT predicate on the "after_registration_text" field.
func AfterRegistrationTextLT(v string) predicate.Event {
	return predicate.Event(sql.FieldLT(FieldAfterRegistrationText, v))
}

// AfterRegistrationTextLTE applies the LTE predicate on the "after_registration_text" field.
func AfterRegistrationTextLTE(v string) predicate.Event {
	return predicate.Event(sql.FieldLTE(FieldAfterRegistrationText, v))
}

// AfterRegistrationTextContains applies the Contains predicate on the "after_registration_text" field.
func AfterRegistrationTextContains(v string) predicate.Event {
	return predicate.Event(sql.FieldContains(FieldAfterRegistrationText, v))
}

// AfterRegistrationTextHasPrefix applies the HasPrefix predicate on the "after_registration_text" field.
func AfterRegistrationTextHasPrefix(v string) predicate.Event {
	return predicate.Event(sql.FieldHasPrefix(FieldAfterRegistrationText, v))
}

// AfterRegistrationTextHasSuffix applies the HasSuffix predicate on the "after_registration_text" field.
func AfterRegistrationTextHasSuffix(v string) predicate.Event {
	return predicate.Event(sql.FieldHasSuffix(FieldAfterRegistrationText, v))
}

// AfterRegistrationTextIsNil applies the IsNil predicate on the "after_registration_text" field.
func AfterRegistrationTextIsNil() predicate.Event {
	return predicate.Event(sql.FieldIsNull(FieldAfterRegistrationText))
}

// AfterRegistrationTextNotNil applies the NotNil predicate on the "after_registration_text" field.
func AfterRegistrationTextNotNil() predicate.Event {
	return predicate.Event(sql.FieldNotNull(FieldAfterRegistrationText))
}

// AfterRegistrationTextEqualFold applies the EqualFold predicate on the "after_registration_text" field.
func AfterRegistrationTextEqualFold(v string) predicate.Event {
	return predicate.Event(sql.FieldEqualFold(FieldAfterRegistrationText, v))
}

// AfterRegistrationTextContainsFold applies the ContainsFold predicate on the "after_registration_text" field.
func AfterRegistrationTextContainsFold(v string) predicate.Event {
	return predicate.Event(sql.FieldContainsFold(FieldAfterRegistrationText, v))
}

// LocationEQ applies the EQ predicate on the "location" field.
func LocationEQ(v string) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldLocation, v))
}

// LocationNEQ applies the NEQ predicate on the "location" field.
func LocationNEQ(v string) predicate.Event {
	return predicate.Event(sql.FieldNEQ(FieldLocation, v))
}

// LocationIn applies the In predicate on the "location" field.
func LocationIn(vs ...string) predicate.Event {
	return predicate.Event(sql.FieldIn(FieldLocation, vs...))
}

// LocationNotIn applies the NotIn predicate on the "location" field.
func LocationNotIn(vs ...string) predicate.Event {
	return predicate.Event(sql.FieldNotIn(FieldLocation, vs...))
}

// LocationGT applies the GT predicate on the "location" field.
func LocationGT(v string) predicate.Event {
	return predicate.Event(sql.FieldGT(FieldLocation, v))
}

// LocationGTE applies the GTE predicate on the "location" field.
func LocationGTE(v string) predicate.Event {
	return predicate.Event(sql.FieldGTE(FieldLocation, v))
}

// LocationLT applies the LT predicate on the "location" field.
func LocationLT(v string) predicate.Event {
	return predicate.Event(sql.FieldLT(FieldLocation, v))
}

// LocationLTE applies the LTE predicate on the "location" field.
func LocationLTE(v string) predicate.Event {
	return predicate.Event(sql.FieldLTE(FieldLocation, v))
}

// LocationContains applies the Contains predicate on the "location" field.
func LocationContains(v string) predicate.Event {
	return predicate.Event(sql.FieldContains(FieldLocation, v))
}

// LocationHasPrefix applies the HasPrefix predicate on the "location" field.
func LocationHasPrefix(v string) predicate.Event {
	return predicate.Event(sql.FieldHasPrefix(FieldLocation, v))
}

// LocationHasSuffix applies the HasSuffix predicate on the "location" field.
func LocationHasSuffix(v string) predicate.Event {
	return predicate.Event(sql.FieldHasSuffix(FieldLocation, v))
}

// LocationEqualFold applies the EqualFold predicate on the "location" field.
func LocationEqualFold(v string) predicate.Event {
	return predicate.Event(sql.FieldEqualFold(FieldLocation, v))
}

// LocationContainsFold applies the ContainsFold predicate on the "location" field.
func LocationContainsFold(v string) predicate.Event {
	return predicate.Event(sql.FieldContainsFold(FieldLocation, v))
}

// StartTimeEQ applies the EQ predicate on the "start_time" field.
func StartTimeEQ(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldStartTime, v))
}

// StartTimeNEQ applies the NEQ predicate on the "start_time" field.
func StartTimeNEQ(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldNEQ(FieldStartTime, v))
}

// StartTimeIn applies the In predicate on the "start_time" field.
func StartTimeIn(vs ...time.Time) predicate.Event {
	return predicate.Event(sql.FieldIn(FieldStartTime, vs...))
}

// StartTimeNotIn applies the NotIn predicate on the "start_time" field.
func StartTimeNotIn(vs ...time.Time) predicate.Event {
	return predicate.Event(sql.FieldNotIn(FieldStartTime, vs...))
}

// StartTimeGT applies the GT predicate on the "start_time" field.
func StartTimeGT(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldGT(FieldStartTime, v))
}

// StartTimeGTE applies the GTE predicate on the "start_time" field.
func StartTimeGTE(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldGTE(FieldStartTime, v))
}

// StartTimeLT applies the LT predicate on the "start_time" field.
func StartTimeLT(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldLT(FieldStartTime, v))
}

// StartTimeLTE applies the LTE predicate on the "start_time" field.
func StartTimeLTE(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldLTE(FieldStartTime, v))
}

// EndTimeEQ applies the EQ predicate on the "end_time" field.
func EndTimeEQ(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldEndTime, v))
}

// EndTimeNEQ applies the NEQ predicate on the "end_time" field.
func EndTimeNEQ(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldNEQ(FieldEndTime, v))
}

// EndTimeIn applies the In predicate on the "end_time" field.
func EndTimeIn(vs ...time.Time) predicate.Event {
	return predicate.Event(sql.FieldIn(FieldEndTime, vs...))
}

// EndTimeNotIn applies the NotIn predicate on the "end_time" field.
func EndTimeNotIn(vs ...time.Time) predicate.Event {
	return predicate.Event(sql.FieldNotIn(FieldEndTime, vs...))
}

// EndTimeGT applies the GT predicate on the "end_time" field.
func EndTimeGT(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldGT(FieldEndTime, v))
}

// EndTimeGTE applies the GTE predicate on the "end_time" field.
func EndTimeGTE(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldGTE(FieldEndTime, v))
}

// EndTimeLT applies the LT predicate on the "end_time" field.
func EndTimeLT(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldLT(FieldEndTime, v))
}

// EndTimeLTE applies the LTE predicate on the "end_time" field.
func EndTimeLTE(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldLTE(FieldEndTime, v))
}

// EndTimeIsNil applies the IsNil predicate on the "end_time" field.
func EndTimeIsNil() predicate.Event {
	return predicate.Event(sql.FieldIsNull(FieldEndTime))
}

// EndTimeNotNil applies the NotNil predicate on the "end_time" field.
func EndTimeNotNil() predicate.Event {
	return predicate.Event(sql.FieldNotNull(FieldEndTime))
}

// RegistrationEndTimeEQ applies the EQ predicate on the "registration_end_time" field.
func RegistrationEndTimeEQ(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldRegistrationEndTime, v))
}

// RegistrationEndTimeNEQ applies the NEQ predicate on the "registration_end_time" field.
func RegistrationEndTimeNEQ(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldNEQ(FieldRegistrationEndTime, v))
}

// RegistrationEndTimeIn applies the In predicate on the "registration_end_time" field.
func RegistrationEndTimeIn(vs ...time.Time) predicate.Event {
	return predicate.Event(sql.FieldIn(FieldRegistrationEndTime, vs...))
}

// RegistrationEndTimeNotIn applies the NotIn predicate on the "registration_end_time" field.
func RegistrationEndTimeNotIn(vs ...time.Time) predicate.Event {
	return predicate.Event(sql.FieldNotIn(FieldRegistrationEndTime, vs...))
}

// RegistrationEndTimeGT applies the GT predicate on the "registration_end_time" field.
func RegistrationEndTimeGT(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldGT(FieldRegistrationEndTime, v))
}

// RegistrationEndTimeGTE applies the GTE predicate on the "registration_end_time" field.
func RegistrationEndTimeGTE(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldGTE(FieldRegistrationEndTime, v))
}

// RegistrationEndTimeLT applies the LT predicate on the "registration_end_time" field.
func RegistrationEndTimeLT(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldLT(FieldRegistrationEndTime, v))
}

// RegistrationEndTimeLTE applies the LTE predicate on the "registration_end_time" field.
func RegistrationEndTimeLTE(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldLTE(FieldRegistrationEndTime, v))
}

// MaxParticipantsEQ applies the EQ predicate on the "max_participants" field.
func MaxParticipantsEQ(v int) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldMaxParticipants, v))
}

// MaxParticipantsNEQ applies the NEQ predicate on the "max_participants" field.
func MaxParticipantsNEQ(v int) predicate.Event {
	return predicate.Event(sql.FieldNEQ(FieldMaxParticipants, v))
}

// MaxParticipantsIn applies the In predicate on the "max_participants" field.
func MaxParticipantsIn(vs ...int) predicate.Event {
	return predicate.Event(sql.FieldIn(FieldMaxParticipants, vs...))
}

// MaxParticipantsNotIn applies the NotIn predicate on the "max_participants" field.
func MaxParticipantsNotIn(vs ...int) predicate.Event {
	return predicate.Event(sql.FieldNotIn(FieldMaxParticipants, vs...))
}

// MaxParticipantsGT applies the GT predicate on the "max_participants" field.
func MaxParticipantsGT(v int) predicate.Event {
	return predicate.Event(sql.FieldGT(FieldMaxParticipants, v))
}

// MaxParticipantsGTE applies the GTE predicate on the "max_participants" field.
func MaxParticipantsGTE(v int) predicate.Event {
	return predicate.Event(sql.FieldGTE(FieldMaxParticipants, v))
}

// MaxParticipantsLT applies the LT predicate on the "max_participants" field.
func MaxParticipantsLT(v int) predicate.Event {
	return predicate.Event(sql.FieldLT(FieldMaxParticipants, v))
}

// MaxParticipantsLTE applies the LTE predicate on the "max_participants" field.
func MaxParticipantsLTE(v int) predicate.Event {
	return predicate.Event(sql.FieldLTE(FieldMaxParticipants, v))
}

// MaxParticipantsIsNil applies the IsNil predicate on the "max_participants" field.
func MaxParticipantsIsNil() predicate.Event {
	return predicate.Event(sql.FieldIsNull(FieldMaxParticipants))
}

// MaxParticipantsNotNil applies the NotNil predicate on the "max_participants" field.
func MaxParticipantsNotNil() predicate.Event {
	return predicate.Event(sql.FieldNotNull(FieldMaxParticipants))
}

// ExpectedParticipantsEQ applies the EQ predicate on the "expected_participants" field.
func ExpectedParticipantsEQ(v int) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldExpectedParticipants, v))
}

// ExpectedParticipantsNEQ applies the NEQ predicate on the "expected_participants" field.
func ExpectedParticipantsNEQ(v int) predicate.Event {
	return predicate.Event(sql.FieldNEQ(FieldExpectedParticipants, v))
}

// ExpectedParticipantsIn applies the In predicate on the "expected_participants" field.
func ExpectedParticipantsIn(vs ...int) predicate.Event {
	return predicate.Event(sql.FieldIn(FieldExpectedParticipants, vs...))
}

// ExpectedParticipantsNotIn applies the NotIn predicate on the "expected_participants" field.
func ExpectedParticipantsNotIn(vs ...int) predicate.Event {
	return predicate.Event(sql.FieldNotIn(FieldExpectedParticipants, vs...))
}

// ExpectedParticipantsGT applies the GT predicate on the "expected_participants" field.
func ExpectedParticipantsGT(v int) predicate.Event {
	return predicate.Event(sql.FieldGT(FieldExpectedParticipants, v))
}

// ExpectedParticipantsGTE applies the GTE predicate on the "expected_participants" field.
func ExpectedParticipantsGTE(v int) predicate.Event {
	return predicate.Event(sql.FieldGTE(FieldExpectedParticipants, v))
}

// ExpectedParticipantsLT applies the LT predicate on the "expected_participants" field.
func ExpectedParticipantsLT(v int) predicate.Event {
	return predicate.Event(sql.FieldLT(FieldExpectedParticipants, v))
}

// ExpectedParticipantsLTE applies the LTE predicate on the "expected_participants" field.
func ExpectedParticipantsLTE(v int) predicate.Event {
	return predicate.Event(sql.FieldLTE(FieldExpectedParticipants, v))
}

// ExpectedParticipantsIsNil applies the IsNil predicate on the "expected_participants" field.
func ExpectedParticipantsIsNil() predicate.Event {
	return predicate.Event(sql.FieldIsNull(FieldExpectedParticipants))
}

// ExpectedParticipantsNotNil applies the NotNil predicate on the "expected_participants" field.
func ExpectedParticipantsNotNil() predicate.Event {
	return predicate.Event(sql.FieldNotNull(FieldExpectedParticipants))
}

// QrPayloadEQ applies the EQ predicate on the "qr_payload" field.
func QrPayloadEQ(v uuid.UUID) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldQrPayload, v))
}

// QrPayloadNEQ applies the NEQ predicate on the "qr_payload" field.
func QrPayloadNEQ(v uuid.UUID) predicate.Event {
	return predicate.Event(sql.FieldNEQ(FieldQrPayload, v))
}

// QrPayloadIn applies the In predicate on the "qr_payload" field.
func QrPayloadIn(vs ...uuid.UUID) predicate.Event {
	return predicate.Event(sql.FieldIn(FieldQrPayload, vs...))
}

// QrPayloadNotIn applies the NotIn predicate on the "qr_payload" field.
func QrPayloadNotIn(vs ...uuid.UUID) predicate.Event {
	return predicate.Event(sql.FieldNotIn(FieldQrPayload, vs...))
}

// QrPayloadGT applies the GT predicate on the "qr_payload" field.
func QrPayloadGT(v uuid.UUID) predicate.Event {
	return predicate.Event(sql.FieldGT(FieldQrPayload, v))
}

// QrPayloadGTE applies the GTE predicate on the "qr_payload" field.
func QrPayloadGTE(v uuid.UUID) predicate.Event {
	return predicate.Event(sql.FieldGTE(FieldQrPayload, v))
}

// QrPayloadLT applies the LT predicate on the "qr_payload" field.
func QrPayloadLT(v uuid.UUID) predicate.Event {
	return predicate.Event(sql.FieldLT(FieldQrPayload, v))
}

// QrPayloadLTE applies the LTE predicate on the "qr_payload" field.
func QrPayloadLTE(v uuid.UUID) predicate.Event {
	return predicate.Event(sql.FieldLTE(FieldQrPayload, v))
}

// QrPayloadIsNil applies the IsNil predicate on the "qr_payload" field.
func QrPayloadIsNil() predicate.Event {
	return predicate.Event(sql.FieldIsNull(FieldQrPayload))
}

// QrPayloadNotNil applies the NotNil predicate on the "qr_payload" field.
func QrPayloadNotNil() predicate.Event {
	return predicate.Event(sql.FieldNotNull(FieldQrPayload))
}

// QrFileIDEQ applies the EQ predicate on the "qr_file_id" field.
func QrFileIDEQ(v string) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldQrFileID, v))
}

// QrFileIDNEQ applies the NEQ predicate on the "qr_file_id" field.
func QrFileIDNEQ(v string) predicate.Event {
	return predicate.Event(sql.FieldNEQ(FieldQrFileID, v))
}

// QrFileIDIn applies the In predicate on the "qr_file_id" field.
func QrFileIDIn(vs ...string) predicate.Event {
	return predicate.Event(sql.FieldIn(FieldQrFileID, vs...))
}

// QrFileIDNotIn applies the NotIn predicate on the "qr_file_id" field.
func QrFileIDNotIn(vs ...string) predicate.Event {
	return predicate.Event(sql.FieldNotIn(FieldQrFileID, vs...))
}

// QrFileIDGT applies the GT predicate on the "qr_file_id" field.
func QrFileIDGT(v string) predicate.Event {
	return predicate.Event(sql.FieldGT(FieldQrFileID, v))
}

// QrFileIDGTE applies the GTE predicate on the "qr_file_id" field.
func QrFileIDGTE(v string) predicate.Event {
	return predicate.Event(sql.FieldGTE(FieldQrFileID, v))
}

// QrFileIDLT applies the LT predicate on the "qr_file_id" field.
func QrFileIDLT(v string) predicate.Event {
	return predicate.Event(sql.FieldLT(FieldQrFileID, v))
}

// QrFileIDLTE applies the LTE predicate on the "qr_file_id" field.
func QrFileIDLTE(v string) predicate.Event {
	return predicate.Event(sql.FieldLTE(FieldQrFileID, v))
}

// QrFileIDContains applies the Contains predicate on the "qr_file_id" field.
func QrFileIDContains(v string) predicate.Event {
	return predicate.Event(sql.FieldContains(FieldQrFileID, v))
}

// QrFileIDHasPrefix applies the HasPrefix predicate on the "qr_file_id" field.
func QrFileIDHasPrefix(v string) predicate.Event {
	return predicate.Event(sql.FieldHasPrefix(FieldQrFileID, v))
}

// QrFileIDHasSuffix applies the HasSuffix predicate on the "qr_file_id" field.
func QrFileIDHasSuffix(v string) predicate.Event {
	return predicate.Event(sql.FieldHasSuffix(FieldQrFileID, v))
}

// QrFileIDIsNil applies the IsNil predicate on the "qr_file_id" field.
func QrFileIDIsNil() predicate.Event {
	return predicate.Event(sql.FieldIsNull(FieldQrFileID))
}

// QrFileIDNotNil applies the NotNil predicate on the "qr_file_id" field.
func QrFileIDNotNil() predicate.Event {
	return predicate.Event(sql.FieldNotNull(FieldQrFileID))
}

// QrFileIDEqualFold applies the EqualFold predicate on the "qr_file_id" field.
func QrFileIDEqualFold(v string) predicate.Event {
	return predicate.Event(sql.FieldEqualFold(FieldQrFileID, v))
}

// QrFileIDContainsFold applies the ContainsFold predicate on the "qr_file_id" field.
func QrFileIDContainsFold(v string) predicate.Event {
	return predicate.Event(sql.FieldContainsFold(FieldQrFileID, v))
}

// AllowedRolesIsNil applies the IsNil predicate on the "allowed_roles" field.
func AllowedRolesIsNil() predicate.Event {
	return predicate.Event(sql.FieldIsNull(FieldAllowedRoles))
}

// AllowedRolesNotNil applies the NotNil predicate on the "allowed_roles" field.
func AllowedRolesNotNil() predicate.Event {
	return predicate.Event(sql.FieldNotNull(FieldAllowedRoles))
}

// PassRequiredEQ applies the EQ predicate on the "pass_required" field.
func PassRequiredEQ(v bool) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldPassRequired, v))
}

// PassRequiredNEQ applies the NEQ predicate on the "pass_required" field.
func PassRequiredNEQ(v bool) predicate.Event {
	return predicate.Event(sql.FieldNEQ(FieldPassRequired, v))
}

// HasClub applies the HasEdge predicate on the "club" edge.
func HasClub() predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ClubTable, ClubColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasClubWith applies the HasEdge predicate on the "club" edge with a given conditions (other predicates).
func HasClubWith(preds ...predicate.Club) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		step := newClubStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasParticipants applies the HasEdge predicate on the "participants" edge.
func HasParticipants() predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, ParticipantsTable, ParticipantsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasParticipantsWith applies the HasEdge predicate on the "participants" edge with a given conditions (other predicates).
func HasParticipantsWith(preds ...predicate.User) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		step := newParticipantsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasNotifications applies the HasEdge predicate on the "notifications" edge.
func HasNotifications() predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, NotificationsTable, NotificationsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasNotificationsWith applies the HasEdge predicate on the "notifications" edge with a given conditions (other predicates).
func HasNotificationsWith(preds ...predicate.Notification) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		step := newNotificationsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPasses applies the HasEdge predicate on the "passes" edge.
func HasPasses() predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, PassesTable, PassesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPassesWith applies the HasEdge predicate on the "passes" edge with a given conditions (other predicates).
func HasPassesWith(preds ...predicate.Pass) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		step := newPassesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasEventParticipants applies the HasEdge predicate on the "event_participants" edge.
func HasEventParticipants() predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, EventParticipantsTable, EventParticipantsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEventParticipantsWith applies the HasEdge predicate on the "event_participants" edge with a given conditions (other predicates).
func HasEventParticipantsWith(preds ...predicate.EventParticipant) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		step := newEventParticipantsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Event) predicate.Event {
	return predicate.Event(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Event) predicate.Event {
	return predicate.Event(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Event) predicate.Event {
	return predicate.Event(sql.NotPredicates(p))
}
