// Code generated by ent, DO NOT EDIT.

package user

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"

	"github.com/Badsnus/cu-clubs-bot/bot/internal/domain/valueobject"
)

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldTelegramID holds the string denoting the telegram_id field in the database.
	FieldTelegramID = "telegram_id"
	// FieldLocalization holds the string denoting the localization field in the database.
	FieldLocalization = "localization"
	// FieldUsername holds the string denoting the username field in the database.
	FieldUsername = "username"
	// FieldRole holds the string denoting the role field in the database.
	FieldRole = "role"
	// FieldEmail holds the string denoting the email field in the database.
	FieldEmail = "email"
	// FieldFio holds the string denoting the fio field in the database.
	FieldFio = "fio"
	// FieldQrPayload holds the string denoting the qr_payload field in the database.
	FieldQrPayload = "qr_payload"
	// FieldQrFileID holds the string denoting the qr_file_id field in the database.
	FieldQrFileID = "qr_file_id"
	// FieldIsBanned holds the string denoting the is_banned field in the database.
	FieldIsBanned = "is_banned"
	// EdgeOwnedClubs holds the string denoting the owned_clubs edge name in mutations.
	EdgeOwnedClubs = "owned_clubs"
	// EdgeEvents holds the string denoting the events edge name in mutations.
	EdgeEvents = "events"
	// EdgeIgnoreMailings holds the string denoting the ignore_mailings edge name in mutations.
	EdgeIgnoreMailings = "ignore_mailings"
	// EdgeNotifications holds the string denoting the notifications edge name in mutations.
	EdgeNotifications = "notifications"
	// EdgePasses holds the string denoting the passes edge name in mutations.
	EdgePasses = "passes"
	// EdgeClubOwners holds the string denoting the club_owners edge name in mutations.
	EdgeClubOwners = "club_owners"
	// EdgeEventParticipants holds the string denoting the event_participants edge name in mutations.
	EdgeEventParticipants = "event_participants"
	// Table holds the table name of the user in the database.
	Table = "users"
	// OwnedClubsTable is the table that holds the owned_clubs relation/edge. The primary key declared below.
	OwnedClubsTable = "club_owners"
	// OwnedClubsInverseTable is the table name for the Club entity.
	// It exists in this package in order to avoid circular dependency with the "club" package.
	OwnedClubsInverseTable = "clubs"
	// EventsTable is the table that holds the events relation/edge. The primary key declared below.
	EventsTable = "event_participants"
	// EventsInverseTable is the table name for the Event entity.
	// It exists in this package in order to avoid circular dependency with the "event" package.
	EventsInverseTable = "events"
	// IgnoreMailingsTable is the table that holds the ignore_mailings relation/edge.
	IgnoreMailingsTable = "ignore_mailings"
	// IgnoreMailingsInverseTable is the table name for the IgnoreMailing entity.
	// It exists in this package in order to avoid circular dependency with the "ignoremailing" package.
	IgnoreMailingsInverseTable = "ignore_mailings"
	// IgnoreMailingsColumn is the table column denoting the ignore_mailings relation/edge.
	IgnoreMailingsColumn = "user_id"
	// NotificationsTable is the table that holds the notifications relation/edge.
	NotificationsTable = "notifications"
	// NotificationsInverseTable is the table name for the Notification entity.
	// It exists in this package in order to avoid circular dependency with the "notification" package.
	NotificationsInverseTable = "notifications"
	// NotificationsColumn is the table column denoting the notifications relation/edge.
	NotificationsColumn = "user_id"
	// PassesTable is the table that holds the passes relation/edge.
	PassesTable = "passes"
	// PassesInverseTable is the table name for the Pass entity.
	// It exists in this package in order to avoid circular dependency with the "pass" package.
	PassesInverseTable = "passes"
	// PassesColumn is the table column denoting the passes relation/edge.
	PassesColumn = "user_id"
	// ClubOwnersTable is the table that holds the club_owners relation/edge.
	ClubOwnersTable = "club_owners"
	// ClubOwnersInverseTable is the table name for the ClubOwner entity.
	// It exists in this package in order to avoid circular dependency with the "clubowner" package.
	ClubOwnersInverseTable = "club_owners"
	// ClubOwnersColumn is the table column denoting the club_owners relation/edge.
	ClubOwnersColumn = "user_id"
	// EventParticipantsTable is the table that holds the event_participants relation/edge.
	EventParticipantsTable = "event_participants"
	// EventParticipantsInverseTable is the table name for the EventParticipant entity.
	// It exists in this package in order to avoid circular dependency with the "eventparticipant" package.
	EventParticipantsInverseTable = "event_participants"
	// EventParticipantsColumn is the table column denoting the event_participants relation/edge.
	EventParticipantsColumn = "user_id"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldTelegramID,
	FieldLocalization,
	FieldUsername,
	FieldRole,
	FieldEmail,
	FieldFio,
	FieldQrPayload,
	FieldQrFileID,
	FieldIsBanned,
}

var (
	// OwnedClubsPrimaryKey and OwnedClubsColumn2 are the table columns denoting the
	// primary key for the owned_clubs relation (M2M).
	OwnedClubsPrimaryKey = []string{"user_id", "club_id"}
	// EventsPrimaryKey and EventsColumn2 are the table columns denoting the
	// primary key for the events relation (M2M).
	EventsPrimaryKey = []string{"user_id", "event_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// TelegramIDValidator is a validator for the "telegram_id" field. It is called by the builders before save.
	TelegramIDValidator func(int64) error
	// DefaultIsBanned holds the default value on creation for the "is_banned" field.
	DefaultIsBanned bool
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// Localization defines the type for the "localization" enum field.
type Localization string

// LocalizationRu is the default value of the Localization enum.
const DefaultLocalization = LocalizationRu

// Localization values.
const (
	LocalizationRu Localization = "ru"
)

func (l Localization) String() string {
	return string(l)
}

// LocalizationValidator is a validator for the "localization" field enum values. It is called by the builders before save.
func LocalizationValidator(l Localization) error {
	switch l {
	case LocalizationRu:
		return nil
	default:
		return fmt.Errorf("user: invalid enum value for localization field: %q", l)
	}
}

// RoleValidator is a validator for the "role" field enum values. It is called by the builders before save.
func RoleValidator(r valueobject.Role) error {
	switch r.String() {
	case "external_user", "grant_user", "student":
		return nil
	default:
		return fmt.Errorf("user: invalid enum value for role field: %q", r)
	}
}

// OrderOption defines the ordering options for the User queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByTelegramID orders the results by the telegram_id field.
func ByTelegramID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTelegramID, opts...).ToFunc()
}

// ByLocalization orders the results by the localization field.
func ByLocalization(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLocalization, opts...).ToFunc()
}

// ByUsername orders the results by the username field.
func ByUsername(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUsername, opts...).ToFunc()
}

// ByRole orders the results by the role field.
func ByRole(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRole, opts...).ToFunc()
}

// ByEmail orders the results by the email field.
func ByEmail(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmail, opts...).ToFunc()
}

// ByFio orders the results by the fio field.
func ByFio(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFio, opts...).ToFunc()
}

// ByQrPayload orders the results by the qr_payload field.
func ByQrPayload(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldQrPayload, opts...).ToFunc()
}

// ByQrFileID orders the results by the qr_file_id field.
func ByQrFileID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldQrFileID, opts...).ToFunc()
}

// ByIsBanned orders the results by the is_banned field.
func ByIsBanned(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsBanned, opts...).ToFunc()
}

// ByOwnedClubsCount orders the results by owned_clubs count.
func ByOwnedClubsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newOwnedClubsStep(), opts...)
	}
}

// ByOwnedClubs orders the results by owned_clubs terms.
func ByOwnedClubs(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOwnedClubsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByEventsCount orders the results by events count.
func ByEventsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newEventsStep(), opts...)
	}
}

// ByEvents orders the results by events terms.
func ByEvents(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEventsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByIgnoreMailingsCount orders the results by ignore_mailings count.
func ByIgnoreMailingsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newIgnoreMailingsStep(), opts...)
	}
}

// ByIgnoreMailings orders the results by ignore_mailings terms.
func ByIgnoreMailings(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newIgnoreMailingsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByNotificationsCount orders the results by notifications count.
func ByNotificationsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newNotificationsStep(), opts...)
	}
}

// ByNotifications orders the results by notifications terms.
func ByNotifications(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newNotificationsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByPassesCount orders the results by passes count.
func ByPassesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newPassesStep(), opts...)
	}
}

// ByPasses orders the results by passes terms.
func ByPasses(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPassesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByClubOwnersCount orders the results by club_owners count.
func ByClubOwnersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newClubOwnersStep(), opts...)
	}
}

// ByClubOwners orders the results by club_owners terms.
func ByClubOwners(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newClubOwnersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByEventParticipantsCount orders the results by event_participants count.
func ByEventParticipantsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newEventParticipantsStep(), opts...)
	}
}

// ByEventParticipants orders the results by event_participants terms.
func ByEventParticipants(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEventParticipantsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newOwnedClubsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OwnedClubsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, OwnedClubsTable, OwnedClubsPrimaryKey...),
	)
}
func newEventsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EventsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, EventsTable, EventsPrimaryKey...),
	)
}
func newIgnoreMailingsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(IgnoreMailingsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, IgnoreMailingsTable, IgnoreMailingsColumn),
	)
}
func newNotificationsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(NotificationsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, NotificationsTable, NotificationsColumn),
	)
}
func newPassesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PassesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, PassesTable, PassesColumn),
	)
}
func newClubOwnersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ClubOwnersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, ClubOwnersTable, ClubOwnersColumn),
	)
}
func newEventParticipantsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EventParticipantsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, EventParticipantsTable, EventParticipantsColumn),
	)
}
