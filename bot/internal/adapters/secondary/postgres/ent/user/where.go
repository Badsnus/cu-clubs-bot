// Code generated by ent, DO NOT EDIT.

package user

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"

	"github.com/Badsnus/cu-clubs-bot/bot/internal/adapters/secondary/postgres/ent/predicate"
	"github.com/Badsnus/cu-clubs-bot/bot/internal/domain/valueobject"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.User {
	return predicate.User(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.User {
	return predicate.User(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.User {
	return predicate.User(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.User {
	return predicate.User(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.User {
	return predicate.User(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.User {
	return predicate.User(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.User {
	return predicate.User(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUpdatedAt, v))
}

// TelegramID applies equality check predicate on the "telegram_id" field. It's identical to TelegramIDEQ.
func TelegramID(v int64) predicate.User {
	return predicate.User(sql.FieldEQ(FieldTelegramID, v))
}

// Username applies equality check predicate on the "username" field. It's identical to UsernameEQ.
func Username(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUsername, v))
}

// Email applies equality check predicate on the "email" field. It's identical to EmailEQ.
func Email(v valueobject.Email) predicate.User {
	return predicate.User(sql.FieldEQ(FieldEmail, v))
}

// Fio applies equality check predicate on the "fio" field. It's identical to FioEQ.
func Fio(v valueobject.FIO) predicate.User {
	return predicate.User(sql.FieldEQ(FieldFio, v))
}

// QrPayload applies equality check predicate on the "qr_payload" field. It's identical to QrPayloadEQ.
func QrPayload(v uuid.UUID) predicate.User {
	return predicate.User(sql.FieldEQ(FieldQrPayload, v))
}

// QrFileID applies equality check predicate on the "qr_file_id" field. It's identical to QrFileIDEQ.
func QrFileID(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldQrFileID, v))
}

// IsBanned applies equality check predicate on the "is_banned" field. It's identical to IsBannedEQ.
func IsBanned(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldIsBanned, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.User {
	return predicate.User(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.User {
	return predicate.User(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.User {
	return predicate.User(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.User {
	return predicate.User(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldLTE(FieldUpdatedAt, v))
}

// TelegramIDEQ applies the EQ predicate on the "telegram_id" field.
func TelegramIDEQ(v int64) predicate.User {
	return predicate.User(sql.FieldEQ(FieldTelegramID, v))
}

// TelegramIDNEQ applies the NEQ predicate on the "telegram_id" field.
func TelegramIDNEQ(v int64) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldTelegramID, v))
}

// TelegramIDIn applies the In predicate on the "telegram_id" field.
func TelegramIDIn(vs ...int64) predicate.User {
	return predicate.User(sql.FieldIn(FieldTelegramID, vs...))
}

// TelegramIDNotIn applies the NotIn predicate on the "telegram_id" field.
func TelegramIDNotIn(vs ...int64) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldTelegramID, vs...))
}

// TelegramIDGT applies the GT predicate on the "telegram_id" field.
func TelegramIDGT(v int64) predicate.User {
	return predicate.User(sql.FieldGT(FieldTelegramID, v))
}

// TelegramIDGTE applies the GTE predicate on the "telegram_id" field.
func TelegramIDGTE(v int64) predicate.User {
	return predicate.User(sql.FieldGTE(FieldTelegramID, v))
}

// TelegramIDLT applies the LT predicate on the "telegram_id" field.
func TelegramIDLT(v int64) predicate.User {
	return predicate.User(sql.FieldLT(FieldTelegramID, v))
}

// TelegramIDLTE applies the LTE predicate on the "telegram_id" field.
func TelegramIDLTE(v int64) predicate.User {
	return predicate.User(sql.FieldLTE(FieldTelegramID, v))
}

// LocalizationEQ applies the EQ predicate on the "localization" field.
func LocalizationEQ(v Localization) predicate.User {
	return predicate.User(sql.FieldEQ(FieldLocalization, v))
}

// LocalizationNEQ applies the NEQ predicate on the "localization" field.
func LocalizationNEQ(v Localization) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldLocalization, v))
}

// LocalizationIn applies the In predicate on the "localization" field.
func LocalizationIn(vs ...Localization) predicate.User {
	return predicate.User(sql.FieldIn(FieldLocalization, vs...))
}

// LocalizationNotIn applies the NotIn predicate on the "localization" field.
func LocalizationNotIn(vs ...Localization) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldLocalization, vs...))
}

// UsernameEQ applies the EQ predicate on the "username" field.
func UsernameEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUsername, v))
}

// UsernameNEQ applies the NEQ predicate on the "username" field.
func UsernameNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldUsername, v))
}

// UsernameIn applies the In predicate on the "username" field.
func UsernameIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldUsername, vs...))
}

// UsernameNotIn applies the NotIn predicate on the "username" field.
func UsernameNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldUsername, vs...))
}

// UsernameGT applies the GT predicate on the "username" field.
func UsernameGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldUsername, v))
}

// UsernameGTE applies the GTE predicate on the "username" field.
func UsernameGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldUsername, v))
}

// UsernameLT applies the LT predicate on the "username" field.
func UsernameLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldUsername, v))
}

// UsernameLTE applies the LTE predicate on the "username" field.
func UsernameLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldUsername, v))
}

// UsernameContains applies the Contains predicate on the "username" field.
func UsernameContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldUsername, v))
}

// UsernameHasPrefix applies the HasPrefix predicate on the "username" field.
func UsernameHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldUsername, v))
}

// UsernameHasSuffix applies the HasSuffix predicate on the "username" field.
func UsernameHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldUsername, v))
}

// UsernameIsNil applies the IsNil predicate on the "username" field.
func UsernameIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldUsername))
}

// UsernameNotNil applies the NotNil predicate on the "username" field.
func UsernameNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldUsername))
}

// UsernameEqualFold applies the EqualFold predicate on the "username" field.
func UsernameEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldUsername, v))
}

// UsernameContainsFold applies the ContainsFold predicate on the "username" field.
func UsernameContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldUsername, v))
}

// RoleEQ applies the EQ predicate on the "role" field.
func RoleEQ(v valueobject.Role) predicate.User {
	return predicate.User(sql.FieldEQ(FieldRole, v))
}

// RoleNEQ applies the NEQ predicate on the "role" field.
func RoleNEQ(v valueobject.Role) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldRole, v))
}

// RoleIn applies the In predicate on the "role" field.
func RoleIn(vs ...valueobject.Role) predicate.User {
	return predicate.User(sql.FieldIn(FieldRole, vs...))
}

// RoleNotIn applies the NotIn predicate on the "role" field.
func RoleNotIn(vs ...valueobject.Role) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldRole, vs...))
}

// EmailEQ applies the EQ predicate on the "email" field.
func EmailEQ(v valueobject.Email) predicate.User {
	return predicate.User(sql.FieldEQ(FieldEmail, v))
}

// EmailNEQ applies the NEQ predicate on the "email" field.
func EmailNEQ(v valueobject.Email) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldEmail, v))
}

// EmailIn applies the In predicate on the "email" field.
func EmailIn(vs ...valueobject.Email) predicate.User {
	return predicate.User(sql.FieldIn(FieldEmail, vs...))
}

// EmailNotIn applies the NotIn predicate on the "email" field.
func EmailNotIn(vs ...valueobject.Email) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldEmail, vs...))
}

// EmailGT applies the GT predicate on the "email" field.
func EmailGT(v valueobject.Email) predicate.User {
	return predicate.User(sql.FieldGT(FieldEmail, v))
}

// EmailGTE applies the GTE predicate on the "email" field.
func EmailGTE(v valueobject.Email) predicate.User {
	return predicate.User(sql.FieldGTE(FieldEmail, v))
}

// EmailLT applies the LT predicate on the "email" field.
func EmailLT(v valueobject.Email) predicate.User {
	return predicate.User(sql.FieldLT(FieldEmail, v))
}

// EmailLTE applies the LTE predicate on the "email" field.
func EmailLTE(v valueobject.Email) predicate.User {
	return predicate.User(sql.FieldLTE(FieldEmail, v))
}

// EmailContains applies the Contains predicate on the "email" field.
func EmailContains(v valueobject.Email) predicate.User {
	vc := string(v)
	return predicate.User(sql.FieldContains(FieldEmail, vc))
}

// EmailHasPrefix applies the HasPrefix predicate on the "email" field.
func EmailHasPrefix(v valueobject.Email) predicate.User {
	vc := string(v)
	return predicate.User(sql.FieldHasPrefix(FieldEmail, vc))
}

// EmailHasSuffix applies the HasSuffix predicate on the "email" field.
func EmailHasSuffix(v valueobject.Email) predicate.User {
	vc := string(v)
	return predicate.User(sql.FieldHasSuffix(FieldEmail, vc))
}

// EmailIsNil applies the IsNil predicate on the "email" field.
func EmailIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldEmail))
}

// EmailNotNil applies the NotNil predicate on the "email" field.
func EmailNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldEmail))
}

// EmailEqualFold applies the EqualFold predicate on the "email" field.
func EmailEqualFold(v valueobject.Email) predicate.User {
	vc := string(v)
	return predicate.User(sql.FieldEqualFold(FieldEmail, vc))
}

// EmailContainsFold applies the ContainsFold predicate on the "email" field.
func EmailContainsFold(v valueobject.Email) predicate.User {
	vc := string(v)
	return predicate.User(sql.FieldContainsFold(FieldEmail, vc))
}

// FioEQ applies the EQ predicate on the "fio" field.
func FioEQ(v valueobject.FIO) predicate.User {
	return predicate.User(sql.FieldEQ(FieldFio, v))
}

// FioNEQ applies the NEQ predicate on the "fio" field.
func FioNEQ(v valueobject.FIO) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldFio, v))
}

// FioIn applies the In predicate on the "fio" field.
func FioIn(vs ...valueobject.FIO) predicate.User {
	return predicate.User(sql.FieldIn(FieldFio, vs...))
}

// FioNotIn applies the NotIn predicate on the "fio" field.
func FioNotIn(vs ...valueobject.FIO) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldFio, vs...))
}

// FioGT applies the GT predicate on the "fio" field.
func FioGT(v valueobject.FIO) predicate.User {
	return predicate.User(sql.FieldGT(FieldFio, v))
}

// FioGTE applies the GTE predicate on the "fio" field.
func FioGTE(v valueobject.FIO) predicate.User {
	return predicate.User(sql.FieldGTE(FieldFio, v))
}

// FioLT applies the LT predicate on the "fio" field.
func FioLT(v valueobject.FIO) predicate.User {
	return predicate.User(sql.FieldLT(FieldFio, v))
}

// FioLTE applies the LTE predicate on the "fio" field.
func FioLTE(v valueobject.FIO) predicate.User {
	return predicate.User(sql.FieldLTE(FieldFio, v))
}

// FioContains applies the Contains predicate on the "fio" field.
func FioContains(v valueobject.FIO) predicate.User {
	vc := v.String()
	return predicate.User(sql.FieldContains(FieldFio, vc))
}

// FioHasPrefix applies the HasPrefix predicate on the "fio" field.
func FioHasPrefix(v valueobject.FIO) predicate.User {
	vc := v.String()
	return predicate.User(sql.FieldHasPrefix(FieldFio, vc))
}

// FioHasSuffix applies the HasSuffix predicate on the "fio" field.
func FioHasSuffix(v valueobject.FIO) predicate.User {
	vc := v.String()
	return predicate.User(sql.FieldHasSuffix(FieldFio, vc))
}

// FioEqualFold applies the EqualFold predicate on the "fio" field.
func FioEqualFold(v valueobject.FIO) predicate.User {
	vc := v.String()
	return predicate.User(sql.FieldEqualFold(FieldFio, vc))
}

// FioContainsFold applies the ContainsFold predicate on the "fio" field.
func FioContainsFold(v valueobject.FIO) predicate.User {
	vc := v.String()
	return predicate.User(sql.FieldContainsFold(FieldFio, vc))
}

// QrPayloadEQ applies the EQ predicate on the "qr_payload" field.
func QrPayloadEQ(v uuid.UUID) predicate.User {
	return predicate.User(sql.FieldEQ(FieldQrPayload, v))
}

// QrPayloadNEQ applies the NEQ predicate on the "qr_payload" field.
func QrPayloadNEQ(v uuid.UUID) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldQrPayload, v))
}

// QrPayloadIn applies the In predicate on the "qr_payload" field.
func QrPayloadIn(vs ...uuid.UUID) predicate.User {
	return predicate.User(sql.FieldIn(FieldQrPayload, vs...))
}

// QrPayloadNotIn applies the NotIn predicate on the "qr_payload" field.
func QrPayloadNotIn(vs ...uuid.UUID) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldQrPayload, vs...))
}

// QrPayloadGT applies the GT predicate on the "qr_payload" field.
func QrPayloadGT(v uuid.UUID) predicate.User {
	return predicate.User(sql.FieldGT(FieldQrPayload, v))
}

// QrPayloadGTE applies the GTE predicate on the "qr_payload" field.
func QrPayloadGTE(v uuid.UUID) predicate.User {
	return predicate.User(sql.FieldGTE(FieldQrPayload, v))
}

// QrPayloadLT applies the LT predicate on the "qr_payload" field.
func QrPayloadLT(v uuid.UUID) predicate.User {
	return predicate.User(sql.FieldLT(FieldQrPayload, v))
}

// QrPayloadLTE applies the LTE predicate on the "qr_payload" field.
func QrPayloadLTE(v uuid.UUID) predicate.User {
	return predicate.User(sql.FieldLTE(FieldQrPayload, v))
}

// QrPayloadIsNil applies the IsNil predicate on the "qr_payload" field.
func QrPayloadIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldQrPayload))
}

// QrPayloadNotNil applies the NotNil predicate on the "qr_payload" field.
func QrPayloadNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldQrPayload))
}

// QrFileIDEQ applies the EQ predicate on the "qr_file_id" field.
func QrFileIDEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldQrFileID, v))
}

// QrFileIDNEQ applies the NEQ predicate on the "qr_file_id" field.
func QrFileIDNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldQrFileID, v))
}

// QrFileIDIn applies the In predicate on the "qr_file_id" field.
func QrFileIDIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldQrFileID, vs...))
}

// QrFileIDNotIn applies the NotIn predicate on the "qr_file_id" field.
func QrFileIDNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldQrFileID, vs...))
}

// QrFileIDGT applies the GT predicate on the "qr_file_id" field.
func QrFileIDGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldQrFileID, v))
}

// QrFileIDGTE applies the GTE predicate on the "qr_file_id" field.
func QrFileIDGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldQrFileID, v))
}

// QrFileIDLT applies the LT predicate on the "qr_file_id" field.
func QrFileIDLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldQrFileID, v))
}

// QrFileIDLTE applies the LTE predicate on the "qr_file_id" field.
func QrFileIDLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldQrFileID, v))
}

// QrFileIDContains applies the Contains predicate on the "qr_file_id" field.
func QrFileIDContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldQrFileID, v))
}

// QrFileIDHasPrefix applies the HasPrefix predicate on the "qr_file_id" field.
func QrFileIDHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldQrFileID, v))
}

// QrFileIDHasSuffix applies the HasSuffix predicate on the "qr_file_id" field.
func QrFileIDHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldQrFileID, v))
}

// QrFileIDIsNil applies the IsNil predicate on the "qr_file_id" field.
func QrFileIDIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldQrFileID))
}

// QrFileIDNotNil applies the NotNil predicate on the "qr_file_id" field.
func QrFileIDNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldQrFileID))
}

// QrFileIDEqualFold applies the EqualFold predicate on the "qr_file_id" field.
func QrFileIDEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldQrFileID, v))
}

// QrFileIDContainsFold applies the ContainsFold predicate on the "qr_file_id" field.
func QrFileIDContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldQrFileID, v))
}

// IsBannedEQ applies the EQ predicate on the "is_banned" field.
func IsBannedEQ(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldIsBanned, v))
}

// IsBannedNEQ applies the NEQ predicate on the "is_banned" field.
func IsBannedNEQ(v bool) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldIsBanned, v))
}

// HasOwnedClubs applies the HasEdge predicate on the "owned_clubs" edge.
func HasOwnedClubs() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, OwnedClubsTable, OwnedClubsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOwnedClubsWith applies the HasEdge predicate on the "owned_clubs" edge with a given conditions (other predicates).
func HasOwnedClubsWith(preds ...predicate.Club) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newOwnedClubsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasEvents applies the HasEdge predicate on the "events" edge.
func HasEvents() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, EventsTable, EventsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEventsWith applies the HasEdge predicate on the "events" edge with a given conditions (other predicates).
func HasEventsWith(preds ...predicate.Event) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newEventsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasIgnoreMailings applies the HasEdge predicate on the "ignore_mailings" edge.
func HasIgnoreMailings() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, IgnoreMailingsTable, IgnoreMailingsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasIgnoreMailingsWith applies the HasEdge predicate on the "ignore_mailings" edge with a given conditions (other predicates).
func HasIgnoreMailingsWith(preds ...predicate.IgnoreMailing) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newIgnoreMailingsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasNotifications applies the HasEdge predicate on the "notifications" edge.
func HasNotifications() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, NotificationsTable, NotificationsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasNotificationsWith applies the HasEdge predicate on the "notifications" edge with a given conditions (other predicates).
func HasNotificationsWith(preds ...predicate.Notification) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newNotificationsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPasses applies the HasEdge predicate on the "passes" edge.
func HasPasses() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, PassesTable, PassesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPassesWith applies the HasEdge predicate on the "passes" edge with a given conditions (other predicates).
func HasPassesWith(preds ...predicate.Pass) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newPassesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasClubOwners applies the HasEdge predicate on the "club_owners" edge.
func HasClubOwners() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, ClubOwnersTable, ClubOwnersColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasClubOwnersWith applies the HasEdge predicate on the "club_owners" edge with a given conditions (other predicates).
func HasClubOwnersWith(preds ...predicate.ClubOwner) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newClubOwnersStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasEventParticipants applies the HasEdge predicate on the "event_participants" edge.
func HasEventParticipants() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, EventParticipantsTable, EventParticipantsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEventParticipantsWith applies the HasEdge predicate on the "event_participants" edge with a given conditions (other predicates).
func HasEventParticipantsWith(preds ...predicate.EventParticipant) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newEventParticipantsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.User) predicate.User {
	return predicate.User(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.User) predicate.User {
	return predicate.User(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.User) predicate.User {
	return predicate.User(sql.NotPredicates(p))
}
