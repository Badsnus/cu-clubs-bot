// Code generated by ent, DO NOT EDIT.

package club

import (
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the club type in the database.
	Label = "club"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldLink holds the string denoting the link field in the database.
	FieldLink = "link"
	// FieldAvatarID holds the string denoting the avatar_id field in the database.
	FieldAvatarID = "avatar_id"
	// FieldIntroID holds the string denoting the intro_id field in the database.
	FieldIntroID = "intro_id"
	// FieldVisibleInTour holds the string denoting the visible_in_tour field in the database.
	FieldVisibleInTour = "visible_in_tour"
	// FieldAllowedRoles holds the string denoting the allowed_roles field in the database.
	FieldAllowedRoles = "allowed_roles"
	// FieldQrAllowed holds the string denoting the qr_allowed field in the database.
	FieldQrAllowed = "qr_allowed"
	// EdgeEvents holds the string denoting the events edge name in mutations.
	EdgeEvents = "events"
	// EdgeOwners holds the string denoting the owners edge name in mutations.
	EdgeOwners = "owners"
	// EdgeIgnoreMailings holds the string denoting the ignore_mailings edge name in mutations.
	EdgeIgnoreMailings = "ignore_mailings"
	// EdgeClubOwners holds the string denoting the club_owners edge name in mutations.
	EdgeClubOwners = "club_owners"
	// Table holds the table name of the club in the database.
	Table = "clubs"
	// EventsTable is the table that holds the events relation/edge.
	EventsTable = "events"
	// EventsInverseTable is the table name for the Event entity.
	// It exists in this package in order to avoid circular dependency with the "event" package.
	EventsInverseTable = "events"
	// EventsColumn is the table column denoting the events relation/edge.
	EventsColumn = "club_id"
	// OwnersTable is the table that holds the owners relation/edge. The primary key declared below.
	OwnersTable = "club_owners"
	// OwnersInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	OwnersInverseTable = "users"
	// IgnoreMailingsTable is the table that holds the ignore_mailings relation/edge.
	IgnoreMailingsTable = "ignore_mailings"
	// IgnoreMailingsInverseTable is the table name for the IgnoreMailing entity.
	// It exists in this package in order to avoid circular dependency with the "ignoremailing" package.
	IgnoreMailingsInverseTable = "ignore_mailings"
	// IgnoreMailingsColumn is the table column denoting the ignore_mailings relation/edge.
	IgnoreMailingsColumn = "club_id"
	// ClubOwnersTable is the table that holds the club_owners relation/edge.
	ClubOwnersTable = "club_owners"
	// ClubOwnersInverseTable is the table name for the ClubOwner entity.
	// It exists in this package in order to avoid circular dependency with the "clubowner" package.
	ClubOwnersInverseTable = "club_owners"
	// ClubOwnersColumn is the table column denoting the club_owners relation/edge.
	ClubOwnersColumn = "club_id"
)

// Columns holds all SQL columns for club fields.
var Columns = []string{
	FieldID,
	FieldDeletedAt,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldName,
	FieldDescription,
	FieldLink,
	FieldAvatarID,
	FieldIntroID,
	FieldVisibleInTour,
	FieldAllowedRoles,
	FieldQrAllowed,
}

var (
	// OwnersPrimaryKey and OwnersColumn2 are the table columns denoting the
	// primary key for the owners relation (M2M).
	OwnersPrimaryKey = []string{"user_id", "club_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/Badsnus/cu-clubs-bot/bot/internal/adapters/secondary/postgres/ent/runtime"
var (
	Hooks        [1]ent.Hook
	Interceptors [1]ent.Interceptor
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// LinkValidator is a validator for the "link" field. It is called by the builders before save.
	LinkValidator func(string) error
	// DefaultVisibleInTour holds the default value on creation for the "visible_in_tour" field.
	DefaultVisibleInTour bool
	// DefaultQrAllowed holds the default value on creation for the "qr_allowed" field.
	DefaultQrAllowed bool
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the Club queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByLink orders the results by the link field.
func ByLink(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLink, opts...).ToFunc()
}

// ByAvatarID orders the results by the avatar_id field.
func ByAvatarID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAvatarID, opts...).ToFunc()
}

// ByIntroID orders the results by the intro_id field.
func ByIntroID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIntroID, opts...).ToFunc()
}

// ByVisibleInTour orders the results by the visible_in_tour field.
func ByVisibleInTour(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVisibleInTour, opts...).ToFunc()
}

// ByQrAllowed orders the results by the qr_allowed field.
func ByQrAllowed(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldQrAllowed, opts...).ToFunc()
}

// ByEventsCount orders the results by events count.
func ByEventsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newEventsStep(), opts...)
	}
}

// ByEvents orders the results by events terms.
func ByEvents(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEventsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByOwnersCount orders the results by owners count.
func ByOwnersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newOwnersStep(), opts...)
	}
}

// ByOwners orders the results by owners terms.
func ByOwners(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOwnersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByIgnoreMailingsCount orders the results by ignore_mailings count.
func ByIgnoreMailingsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newIgnoreMailingsStep(), opts...)
	}
}

// ByIgnoreMailings orders the results by ignore_mailings terms.
func ByIgnoreMailings(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newIgnoreMailingsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByClubOwnersCount orders the results by club_owners count.
func ByClubOwnersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newClubOwnersStep(), opts...)
	}
}

// ByClubOwners orders the results by club_owners terms.
func ByClubOwners(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newClubOwnersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newEventsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EventsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, EventsTable, EventsColumn),
	)
}
func newOwnersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OwnersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, OwnersTable, OwnersPrimaryKey...),
	)
}
func newIgnoreMailingsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(IgnoreMailingsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, IgnoreMailingsTable, IgnoreMailingsColumn),
	)
}
func newClubOwnersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ClubOwnersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, ClubOwnersTable, ClubOwnersColumn),
	)
}
