// Code generated by ent, DO NOT EDIT.

package club

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"

	"github.com/Badsnus/cu-clubs-bot/bot/internal/adapters/secondary/postgres/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Club {
	return predicate.Club(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Club {
	return predicate.Club(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Club {
	return predicate.Club(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Club {
	return predicate.Club(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Club {
	return predicate.Club(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Club {
	return predicate.Club(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Club {
	return predicate.Club(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Club {
	return predicate.Club(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Club {
	return predicate.Club(sql.FieldLTE(FieldID, id))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.Club {
	return predicate.Club(sql.FieldEQ(FieldDeletedAt, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Club {
	return predicate.Club(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Club {
	return predicate.Club(sql.FieldEQ(FieldUpdatedAt, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Club {
	return predicate.Club(sql.FieldEQ(FieldName, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.Club {
	return predicate.Club(sql.FieldEQ(FieldDescription, v))
}

// Link applies equality check predicate on the "link" field. It's identical to LinkEQ.
func Link(v string) predicate.Club {
	return predicate.Club(sql.FieldEQ(FieldLink, v))
}

// AvatarID applies equality check predicate on the "avatar_id" field. It's identical to AvatarIDEQ.
func AvatarID(v string) predicate.Club {
	return predicate.Club(sql.FieldEQ(FieldAvatarID, v))
}

// IntroID applies equality check predicate on the "intro_id" field. It's identical to IntroIDEQ.
func IntroID(v string) predicate.Club {
	return predicate.Club(sql.FieldEQ(FieldIntroID, v))
}

// VisibleInTour applies equality check predicate on the "visible_in_tour" field. It's identical to VisibleInTourEQ.
func VisibleInTour(v bool) predicate.Club {
	return predicate.Club(sql.FieldEQ(FieldVisibleInTour, v))
}

// QrAllowed applies equality check predicate on the "qr_allowed" field. It's identical to QrAllowedEQ.
func QrAllowed(v bool) predicate.Club {
	return predicate.Club(sql.FieldEQ(FieldQrAllowed, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.Club {
	return predicate.Club(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.Club {
	return predicate.Club(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.Club {
	return predicate.Club(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.Club {
	return predicate.Club(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.Club {
	return predicate.Club(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.Club {
	return predicate.Club(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.Club {
	return predicate.Club(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.Club {
	return predicate.Club(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.Club {
	return predicate.Club(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.Club {
	return predicate.Club(sql.FieldNotNull(FieldDeletedAt))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Club {
	return predicate.Club(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Club {
	return predicate.Club(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Club {
	return predicate.Club(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Club {
	return predicate.Club(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Club {
	return predicate.Club(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Club {
	return predicate.Club(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Club {
	return predicate.Club(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Club {
	return predicate.Club(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Club {
	return predicate.Club(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Club {
	return predicate.Club(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Club {
	return predicate.Club(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Club {
	return predicate.Club(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Club {
	return predicate.Club(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Club {
	return predicate.Club(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Club {
	return predicate.Club(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Club {
	return predicate.Club(sql.FieldLTE(FieldUpdatedAt, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Club {
	return predicate.Club(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Club {
	return predicate.Club(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Club {
	return predicate.Club(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Club {
	return predicate.Club(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Club {
	return predicate.Club(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Club {
	return predicate.Club(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Club {
	return predicate.Club(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Club {
	return predicate.Club(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Club {
	return predicate.Club(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Club {
	return predicate.Club(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Club {
	return predicate.Club(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Club {
	return predicate.Club(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Club {
	return predicate.Club(sql.FieldContainsFold(FieldName, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.Club {
	return predicate.Club(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.Club {
	return predicate.Club(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.Club {
	return predicate.Club(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.Club {
	return predicate.Club(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.Club {
	return predicate.Club(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.Club {
	return predicate.Club(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.Club {
	return predicate.Club(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.Club {
	return predicate.Club(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.Club {
	return predicate.Club(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.Club {
	return predicate.Club(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.Club {
	return predicate.Club(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.Club {
	return predicate.Club(sql.FieldIsNull(FieldDescription))
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.Club {
	return predicate.Club(sql.FieldNotNull(FieldDescription))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.Club {
	return predicate.Club(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.Club {
	return predicate.Club(sql.FieldContainsFold(FieldDescription, v))
}

// LinkEQ applies the EQ predicate on the "link" field.
func LinkEQ(v string) predicate.Club {
	return predicate.Club(sql.FieldEQ(FieldLink, v))
}

// LinkNEQ applies the NEQ predicate on the "link" field.
func LinkNEQ(v string) predicate.Club {
	return predicate.Club(sql.FieldNEQ(FieldLink, v))
}

// LinkIn applies the In predicate on the "link" field.
func LinkIn(vs ...string) predicate.Club {
	return predicate.Club(sql.FieldIn(FieldLink, vs...))
}

// LinkNotIn applies the NotIn predicate on the "link" field.
func LinkNotIn(vs ...string) predicate.Club {
	return predicate.Club(sql.FieldNotIn(FieldLink, vs...))
}

// LinkGT applies the GT predicate on the "link" field.
func LinkGT(v string) predicate.Club {
	return predicate.Club(sql.FieldGT(FieldLink, v))
}

// LinkGTE applies the GTE predicate on the "link" field.
func LinkGTE(v string) predicate.Club {
	return predicate.Club(sql.FieldGTE(FieldLink, v))
}

// LinkLT applies the LT predicate on the "link" field.
func LinkLT(v string) predicate.Club {
	return predicate.Club(sql.FieldLT(FieldLink, v))
}

// LinkLTE applies the LTE predicate on the "link" field.
func LinkLTE(v string) predicate.Club {
	return predicate.Club(sql.FieldLTE(FieldLink, v))
}

// LinkContains applies the Contains predicate on the "link" field.
func LinkContains(v string) predicate.Club {
	return predicate.Club(sql.FieldContains(FieldLink, v))
}

// LinkHasPrefix applies the HasPrefix predicate on the "link" field.
func LinkHasPrefix(v string) predicate.Club {
	return predicate.Club(sql.FieldHasPrefix(FieldLink, v))
}

// LinkHasSuffix applies the HasSuffix predicate on the "link" field.
func LinkHasSuffix(v string) predicate.Club {
	return predicate.Club(sql.FieldHasSuffix(FieldLink, v))
}

// LinkIsNil applies the IsNil predicate on the "link" field.
func LinkIsNil() predicate.Club {
	return predicate.Club(sql.FieldIsNull(FieldLink))
}

// LinkNotNil applies the NotNil predicate on the "link" field.
func LinkNotNil() predicate.Club {
	return predicate.Club(sql.FieldNotNull(FieldLink))
}

// LinkEqualFold applies the EqualFold predicate on the "link" field.
func LinkEqualFold(v string) predicate.Club {
	return predicate.Club(sql.FieldEqualFold(FieldLink, v))
}

// LinkContainsFold applies the ContainsFold predicate on the "link" field.
func LinkContainsFold(v string) predicate.Club {
	return predicate.Club(sql.FieldContainsFold(FieldLink, v))
}

// AvatarIDEQ applies the EQ predicate on the "avatar_id" field.
func AvatarIDEQ(v string) predicate.Club {
	return predicate.Club(sql.FieldEQ(FieldAvatarID, v))
}

// AvatarIDNEQ applies the NEQ predicate on the "avatar_id" field.
func AvatarIDNEQ(v string) predicate.Club {
	return predicate.Club(sql.FieldNEQ(FieldAvatarID, v))
}

// AvatarIDIn applies the In predicate on the "avatar_id" field.
func AvatarIDIn(vs ...string) predicate.Club {
	return predicate.Club(sql.FieldIn(FieldAvatarID, vs...))
}

// AvatarIDNotIn applies the NotIn predicate on the "avatar_id" field.
func AvatarIDNotIn(vs ...string) predicate.Club {
	return predicate.Club(sql.FieldNotIn(FieldAvatarID, vs...))
}

// AvatarIDGT applies the GT predicate on the "avatar_id" field.
func AvatarIDGT(v string) predicate.Club {
	return predicate.Club(sql.FieldGT(FieldAvatarID, v))
}

// AvatarIDGTE applies the GTE predicate on the "avatar_id" field.
func AvatarIDGTE(v string) predicate.Club {
	return predicate.Club(sql.FieldGTE(FieldAvatarID, v))
}

// AvatarIDLT applies the LT predicate on the "avatar_id" field.
func AvatarIDLT(v string) predicate.Club {
	return predicate.Club(sql.FieldLT(FieldAvatarID, v))
}

// AvatarIDLTE applies the LTE predicate on the "avatar_id" field.
func AvatarIDLTE(v string) predicate.Club {
	return predicate.Club(sql.FieldLTE(FieldAvatarID, v))
}

// AvatarIDContains applies the Contains predicate on the "avatar_id" field.
func AvatarIDContains(v string) predicate.Club {
	return predicate.Club(sql.FieldContains(FieldAvatarID, v))
}

// AvatarIDHasPrefix applies the HasPrefix predicate on the "avatar_id" field.
func AvatarIDHasPrefix(v string) predicate.Club {
	return predicate.Club(sql.FieldHasPrefix(FieldAvatarID, v))
}

// AvatarIDHasSuffix applies the HasSuffix predicate on the "avatar_id" field.
func AvatarIDHasSuffix(v string) predicate.Club {
	return predicate.Club(sql.FieldHasSuffix(FieldAvatarID, v))
}

// AvatarIDIsNil applies the IsNil predicate on the "avatar_id" field.
func AvatarIDIsNil() predicate.Club {
	return predicate.Club(sql.FieldIsNull(FieldAvatarID))
}

// AvatarIDNotNil applies the NotNil predicate on the "avatar_id" field.
func AvatarIDNotNil() predicate.Club {
	return predicate.Club(sql.FieldNotNull(FieldAvatarID))
}

// AvatarIDEqualFold applies the EqualFold predicate on the "avatar_id" field.
func AvatarIDEqualFold(v string) predicate.Club {
	return predicate.Club(sql.FieldEqualFold(FieldAvatarID, v))
}

// AvatarIDContainsFold applies the ContainsFold predicate on the "avatar_id" field.
func AvatarIDContainsFold(v string) predicate.Club {
	return predicate.Club(sql.FieldContainsFold(FieldAvatarID, v))
}

// IntroIDEQ applies the EQ predicate on the "intro_id" field.
func IntroIDEQ(v string) predicate.Club {
	return predicate.Club(sql.FieldEQ(FieldIntroID, v))
}

// IntroIDNEQ applies the NEQ predicate on the "intro_id" field.
func IntroIDNEQ(v string) predicate.Club {
	return predicate.Club(sql.FieldNEQ(FieldIntroID, v))
}

// IntroIDIn applies the In predicate on the "intro_id" field.
func IntroIDIn(vs ...string) predicate.Club {
	return predicate.Club(sql.FieldIn(FieldIntroID, vs...))
}

// IntroIDNotIn applies the NotIn predicate on the "intro_id" field.
func IntroIDNotIn(vs ...string) predicate.Club {
	return predicate.Club(sql.FieldNotIn(FieldIntroID, vs...))
}

// IntroIDGT applies the GT predicate on the "intro_id" field.
func IntroIDGT(v string) predicate.Club {
	return predicate.Club(sql.FieldGT(FieldIntroID, v))
}

// IntroIDGTE applies the GTE predicate on the "intro_id" field.
func IntroIDGTE(v string) predicate.Club {
	return predicate.Club(sql.FieldGTE(FieldIntroID, v))
}

// IntroIDLT applies the LT predicate on the "intro_id" field.
func IntroIDLT(v string) predicate.Club {
	return predicate.Club(sql.FieldLT(FieldIntroID, v))
}

// IntroIDLTE applies the LTE predicate on the "intro_id" field.
func IntroIDLTE(v string) predicate.Club {
	return predicate.Club(sql.FieldLTE(FieldIntroID, v))
}

// IntroIDContains applies the Contains predicate on the "intro_id" field.
func IntroIDContains(v string) predicate.Club {
	return predicate.Club(sql.FieldContains(FieldIntroID, v))
}

// IntroIDHasPrefix applies the HasPrefix predicate on the "intro_id" field.
func IntroIDHasPrefix(v string) predicate.Club {
	return predicate.Club(sql.FieldHasPrefix(FieldIntroID, v))
}

// IntroIDHasSuffix applies the HasSuffix predicate on the "intro_id" field.
func IntroIDHasSuffix(v string) predicate.Club {
	return predicate.Club(sql.FieldHasSuffix(FieldIntroID, v))
}

// IntroIDIsNil applies the IsNil predicate on the "intro_id" field.
func IntroIDIsNil() predicate.Club {
	return predicate.Club(sql.FieldIsNull(FieldIntroID))
}

// IntroIDNotNil applies the NotNil predicate on the "intro_id" field.
func IntroIDNotNil() predicate.Club {
	return predicate.Club(sql.FieldNotNull(FieldIntroID))
}

// IntroIDEqualFold applies the EqualFold predicate on the "intro_id" field.
func IntroIDEqualFold(v string) predicate.Club {
	return predicate.Club(sql.FieldEqualFold(FieldIntroID, v))
}

// IntroIDContainsFold applies the ContainsFold predicate on the "intro_id" field.
func IntroIDContainsFold(v string) predicate.Club {
	return predicate.Club(sql.FieldContainsFold(FieldIntroID, v))
}

// VisibleInTourEQ applies the EQ predicate on the "visible_in_tour" field.
func VisibleInTourEQ(v bool) predicate.Club {
	return predicate.Club(sql.FieldEQ(FieldVisibleInTour, v))
}

// VisibleInTourNEQ applies the NEQ predicate on the "visible_in_tour" field.
func VisibleInTourNEQ(v bool) predicate.Club {
	return predicate.Club(sql.FieldNEQ(FieldVisibleInTour, v))
}

// AllowedRolesIsNil applies the IsNil predicate on the "allowed_roles" field.
func AllowedRolesIsNil() predicate.Club {
	return predicate.Club(sql.FieldIsNull(FieldAllowedRoles))
}

// AllowedRolesNotNil applies the NotNil predicate on the "allowed_roles" field.
func AllowedRolesNotNil() predicate.Club {
	return predicate.Club(sql.FieldNotNull(FieldAllowedRoles))
}

// QrAllowedEQ applies the EQ predicate on the "qr_allowed" field.
func QrAllowedEQ(v bool) predicate.Club {
	return predicate.Club(sql.FieldEQ(FieldQrAllowed, v))
}

// QrAllowedNEQ applies the NEQ predicate on the "qr_allowed" field.
func QrAllowedNEQ(v bool) predicate.Club {
	return predicate.Club(sql.FieldNEQ(FieldQrAllowed, v))
}

// HasEvents applies the HasEdge predicate on the "events" edge.
func HasEvents() predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, EventsTable, EventsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEventsWith applies the HasEdge predicate on the "events" edge with a given conditions (other predicates).
func HasEventsWith(preds ...predicate.Event) predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		step := newEventsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOwners applies the HasEdge predicate on the "owners" edge.
func HasOwners() predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, OwnersTable, OwnersPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOwnersWith applies the HasEdge predicate on the "owners" edge with a given conditions (other predicates).
func HasOwnersWith(preds ...predicate.User) predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		step := newOwnersStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasIgnoreMailings applies the HasEdge predicate on the "ignore_mailings" edge.
func HasIgnoreMailings() predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, IgnoreMailingsTable, IgnoreMailingsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasIgnoreMailingsWith applies the HasEdge predicate on the "ignore_mailings" edge with a given conditions (other predicates).
func HasIgnoreMailingsWith(preds ...predicate.IgnoreMailing) predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		step := newIgnoreMailingsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasClubOwners applies the HasEdge predicate on the "club_owners" edge.
func HasClubOwners() predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, ClubOwnersTable, ClubOwnersColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasClubOwnersWith applies the HasEdge predicate on the "club_owners" edge with a given conditions (other predicates).
func HasClubOwnersWith(preds ...predicate.ClubOwner) predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		step := newClubOwnersStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Club) predicate.Club {
	return predicate.Club(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Club) predicate.Club {
	return predicate.Club(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Club) predicate.Club {
	return predicate.Club(sql.NotPredicates(p))
}
