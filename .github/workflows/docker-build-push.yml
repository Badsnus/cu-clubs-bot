name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
    paths-ignore:
      - '.env'
      - 'docker-compose.yml'
      - 'docker-compose-dev.yml'
      - 'README.md'
      - '.gitignore'

jobs:
  lint:
    name: Run GolangCI-Lint
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: 1.21

      - name: Install dependencies
        working-directory: ./bot
        run: |
          go mod tidy
          go mod verify
          go mod download

      - name: Install golangci-lint
        run: |
          curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.63.4

      - name: Run golangci-lint
        working-directory: ./bot
        run: |
          golangci-lint run --out-format colored-line-number

  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: lint
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set repository name to lowercase
        id: repo-name
        run: |
          echo "name=${GITHUB_REPOSITORY,,}" >> $GITHUB_OUTPUT

      - name: Get PR information
        id: pr-info
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // Get the commit message
            const commit = await github.rest.git.getCommit({
              owner: context.repo.owner,
              repo: context.repo.repo,
              commit_sha: context.sha
            });
            
            // Extract PR number from commit message (Merge pull request #X from...)
            const prMatch = commit.data.message.match(/Merge pull request #(\d+)/);
            
            if (prMatch && prMatch[1]) {
              const prNumber = prMatch[1];
            
              // Get PR details
              const { data: pullRequest } = await github.rest.pulls.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: prNumber
              });
            
              // Escape PR description for Docker build-args
              let prDesc = pullRequest.body || 'No description provided';
              // Replace newlines with \n and escape quotes
              prDesc = prDesc.replace(/\r?\n/g, '\\n').replace(/"/g, '\\"');
            
              core.setOutput('pr_name', pullRequest.title);
              core.setOutput('pr_desc', prDesc);
              core.setOutput('pr_number', prNumber);
              console.log(`Found PR #${prNumber}: ${pullRequest.title}`);
            } else {
              // Fallback if we can't find PR info
              let commitMsg = commit.data.message;
              // Replace newlines with \n and escape quotes
              commitMsg = commitMsg.replace(/\r?\n/g, '\\n').replace(/"/g, '\\"');
            
              core.setOutput('pr_name', 'Direct commit to main');
              core.setOutput('pr_desc', commitMsg);
              core.setOutput('pr_number', 'N/A');
              console.log('No PR found, using commit message');
            }

      - name: Set version information
        id: version-info
        run: |
          # Get build date
          echo "build_date=$(date -u +'%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_OUTPUT
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./bot
          push: true
          tags: ghcr.io/${{ steps.repo-name.outputs.name }}:${{ github.ref_name }}
          build-args: |
            PR_NAME="${{ steps.pr-info.outputs.pr_name }}"
            PR_DESC="${{ steps.pr-info.outputs.pr_desc }}"
            BUILD_DATE="${{ steps.version-info.outputs.build_date }}"
          cache-from: type=gha
          cache-to: type=gha,mode=max
